CCS PCM C Compiler, Version 4.023, 25097               24-Nov-08 06:58

               Filename: main.lst

               ROM used: 1576 words (19%)
                         Largest free fragment is 2048
               RAM used: 126 (34%) at main() level
                         136 (37%) worst case
               Stack:    5 worst case (2 in main + 3 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   509
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   30A
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   0DF
.................... #define _VERSION_ "0.48" 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT,NOPUT 
.................... #use delay(clock=20000000, restart_wdt) 
*
00B2:  MOVLW  D8
00B3:  MOVWF  04
00B4:  BCF    03.7
00B5:  MOVF   00,W
00B6:  BTFSC  03.2
00B7:  GOTO   0C9
00B8:  MOVLW  06
00B9:  MOVWF  78
00BA:  MOVLW  BF
00BB:  MOVWF  77
00BC:  CLRWDT
00BD:  DECFSZ 77,F
00BE:  GOTO   0BC
00BF:  DECFSZ 78,F
00C0:  GOTO   0BA
00C1:  MOVLW  7A
00C2:  MOVWF  77
00C3:  DECFSZ 77,F
00C4:  GOTO   0C3
00C5:  GOTO   0C6
00C6:  CLRWDT
00C7:  DECFSZ 00,F
00C8:  GOTO   0B8
00C9:  RETLW  00
.................... #use rs232(baud=4800, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... /****** DEFINITIONS ******/ 
.................... typedef enum {B1200 = 0, B2400, B4800, B9600, B19200,  
.................... 				B38400, B57600, B115200} bouds; 
....................  
.................... typedef enum {SCROLL_NONE = 0, SCROLL_RIGHT, SCROLL_LEFT, 
.................... 			SCROLL_UP, SCROLL_DOWN, SCROLL_RIGHT_CARRY, 
.................... 			SCROLL_LEFT_CARRY, SCROLL_UP_CARRY, 
.................... 			SCROLL_DOWN_CARRY} scrolls; 
....................  
.................... #define _COMMAND_BASE			0 
.................... #define _PONG					_COMMAND_BASE + 'A' 
.................... #define _SET_SCROLL_FREQ		_COMMAND_BASE + 'B' 
.................... #define _SET_UART_SPEED			_COMMAND_BASE + 'C' 
.................... #define _START_SCROLL			_COMMAND_BASE + 'D' 
.................... #define _STOP_SCROLL			_COMMAND_BASE + 'E' 
.................... #define _GET_SCREEN				_COMMAND_BASE + 'F' 
.................... #define _SET_SCREEN				_COMMAND_BASE + 'G' 
.................... #define _SCROLL_DOWN_CARRY		_COMMAND_BASE + 'H' 
.................... #define _SCROLL_DOWN			_COMMAND_BASE + 'I' 
.................... #define _SCROLL_UP_CARRY		_COMMAND_BASE + 'J' 
.................... #define _SCROLL_UP				_COMMAND_BASE + 'K' 
.................... #define _SCROLL_LEFT_CARRY		_COMMAND_BASE + 'L' 
.................... #define _SCROLL_LEFT			_COMMAND_BASE + 'M' 
.................... #define _SCROLL_RIGHT_CARRY		_COMMAND_BASE + 'N' 
.................... #define _SCROLL_RIGHT			_COMMAND_BASE + 'O' 
.................... #define _CLEAR					_COMMAND_BASE + 'P' 
.................... #define _GET_COL				_COMMAND_BASE + 'Q' 
.................... #define _SET_COL				_COMMAND_BASE + 'R' 
....................  
.................... #define PARAM_SET_SCROLL_FREQ	_COMMAND_BASE + 1 
.................... #define PARAM_SET_UART_SPEED	_COMMAND_BASE + 2 
.................... #define PARAM_SET_SCREEN		_COMMAND_BASE + 3 
.................... #define PARAM_SET_COL			_COMMAND_BASE + 4 
....................  
.................... #define DISABLED			0 
.................... #define ENABLED				(DISABLED + 1) 
....................  
.................... /* STATUS*/ 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... /* LEDS */ 
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define SET_74154_TIME		1 
.................... #define SET_74573_TIME		0 
.................... #define SCREEN_WIDTH		16 
.................... #define COLOR_COUNT			3 
.................... #define SCREEN				(COLOR_COUNT * SCREEN_WIDTH) 
....................  
.................... /* TIMER */ 
.................... // 76 && 256 -> 1Hz 
.................... #define DEFAULT_TIMER_COUNT	76 
.................... #define DEFAULT_TIMER_DIV	RTCC_DIV_256 
.................... #define DEFAULT_PING_COUNT	38 // ping every 500ms 
.................... #define PING_PONG_COUNT		50 
....................  
.................... /****** FUNCTIONS ******/ 
....................  
.................... /* LEDS */ 
.................... void clear(void); 
.................... void set_red(byte color); 
.................... void set_green(byte color); 
.................... void set_blue(byte color); 
.................... void set_col(byte col); 
.................... void get_col(void); 
.................... void scrollUp(void); 
.................... void scrollUpCarry(void); 
.................... void scrollDown(void); 
.................... void scrollDownCarry(void); 
.................... void scrollLeft(void); 
.................... void scrollLeftCarry(void); 
.................... void scrollRight(void); 
.................... void scrollRightCarry(void); 
.................... void setScreen(byte * buffer); 
.................... void getScreen(void); 
.................... void clearScreen(void); 
.................... void stopScroll(void); 
.................... void startScroll(void); 
.................... void setUARTSpeed(byte speed); 
.................... void setScrollFreq(byte freq); 
.................... void ping(void); 
.................... void pong(void); 
....................  
.................... /* TIMER */ 
.................... byte matrix[SCREEN] = {	0x00, 0x00, 0xFF, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00}; 
*
051A:  BCF    03.5
051B:  CLRF   29
051C:  CLRF   2A
051D:  MOVLW  FF
051E:  MOVWF  2B
051F:  CLRF   2C
0520:  CLRF   2D
0521:  CLRF   2E
0522:  CLRF   2F
0523:  CLRF   30
0524:  CLRF   31
0525:  CLRF   32
0526:  CLRF   33
0527:  CLRF   34
0528:  CLRF   35
0529:  CLRF   36
052A:  CLRF   37
052B:  CLRF   38
052C:  CLRF   39
052D:  CLRF   3A
052E:  CLRF   3B
052F:  CLRF   3C
0530:  CLRF   3D
0531:  CLRF   3E
0532:  CLRF   3F
0533:  CLRF   40
0534:  CLRF   41
0535:  CLRF   42
0536:  CLRF   43
0537:  CLRF   44
0538:  CLRF   45
0539:  CLRF   46
053A:  CLRF   47
053B:  CLRF   48
053C:  CLRF   49
053D:  CLRF   4A
053E:  CLRF   4B
053F:  CLRF   4C
0540:  CLRF   4D
0541:  CLRF   4E
0542:  CLRF   4F
0543:  CLRF   50
0544:  CLRF   51
0545:  CLRF   52
0546:  CLRF   53
0547:  CLRF   54
0548:  CLRF   55
0549:  CLRF   56
054A:  CLRF   57
054B:  CLRF   58
....................  
.................... /****** IMPLEMENTATION ******/ 
.................... byte timer_div = DEFAULT_TIMER_DIV; 
054C:  MOVLW  07
054D:  MOVWF  59
.................... byte timer_count = DEFAULT_TIMER_COUNT; 
054E:  MOVLW  4C
054F:  MOVWF  5A
.................... byte int_count = DEFAULT_TIMER_COUNT; 
0550:  MOVWF  5B
.................... byte int_ping_count = DEFAULT_PING_COUNT; 
0551:  MOVLW  26
0552:  MOVWF  5C
.................... byte ping_count = DEFAULT_PING_COUNT; 
0553:  MOVWF  5D
.................... byte scroll = DISABLED; 
0554:  CLRF   5E
.................... byte scroll_type = SCROLL_NONE; 
0555:  CLRF   5F
.................... byte do_reset = PING_PONG_COUNT; 
0556:  MOVLW  32
0557:  MOVWF  60
.................... byte actual_col = 0; 
0558:  CLRF   61
.................... byte buffer[SCREEN]; 
.................... byte buffer_idx = 0; 
0559:  CLRF   62
.................... byte status = _COMMAND_BASE; 
055A:  CLRF   63
....................  
.................... /* INTERRUPT */ 
.................... #INT_RDA 
.................... void recv_rs232(void) 
.................... { 
.................... 	int recv = 0; 
*
00DF:  BSF    03.5
00E0:  CLRF   56
.................... 	//disable_interrupts(GLOBAL); 
.................... 	LINK_ENA 
00E1:  BCF    08.2
00E2:  BCF    03.5
00E3:  BSF    08.2
.................... 	recv = getc(); 
00E4:  BTFSS  0C.5
00E5:  GOTO   0E4
00E6:  MOVF   1A,W
00E7:  BSF    03.5
00E8:  MOVWF  56
....................  
.................... 	if (status == 0) 
00E9:  BCF    03.5
00EA:  MOVF   63,F
00EB:  BTFSS  03.2
00EC:  GOTO   19A
.................... 	{ 
.................... 		// Es un comando 
.................... 		switch (recv) 
.................... 		{ 
00ED:  BSF    03.5
00EE:  MOVF   56,W
00EF:  XORLW  47
00F0:  BCF    03.5
00F1:  BTFSC  03.2
00F2:  GOTO   127
00F3:  XORLW  05
00F4:  BTFSC  03.2
00F5:  GOTO   12B
00F6:  XORLW  01
00F7:  BTFSC  03.2
00F8:  GOTO   12E
00F9:  XORLW  11
00FA:  BTFSC  03.2
00FB:  GOTO   131
00FC:  XORLW  13
00FD:  BTFSC  03.2
00FE:  GOTO   134
00FF:  XORLW  05
0100:  BTFSC  03.2
0101:  GOTO   137
0102:  XORLW  01
0103:  BTFSC  03.2
0104:  GOTO   139
0105:  XORLW  03
0106:  BTFSC  03.2
0107:  GOTO   13B
0108:  XORLW  0E
0109:  BTFSC  03.2
010A:  GOTO   15B
010B:  XORLW  01
010C:  BTFSC  03.2
010D:  GOTO   15F
010E:  XORLW  03
010F:  BTFSC  03.2
0110:  GOTO   163
0111:  XORLW  01
0112:  BTFSC  03.2
0113:  GOTO   167
0114:  XORLW  07
0115:  BTFSC  03.2
0116:  GOTO   16B
0117:  XORLW  01
0118:  BTFSC  03.2
0119:  GOTO   16F
011A:  XORLW  03
011B:  BTFSC  03.2
011C:  GOTO   173
011D:  XORLW  01
011E:  BTFSC  03.2
011F:  GOTO   177
0120:  XORLW  1F
0121:  BTFSC  03.2
0122:  GOTO   17B
0123:  XORLW  01
0124:  BTFSC  03.2
0125:  GOTO   18B
0126:  GOTO   198
.................... 			// SCREEN parameters left 
.................... 			case _SET_SCREEN: 
.................... 				status = PARAM_SET_SCREEN; 
0127:  MOVLW  03
0128:  MOVWF  63
.................... 				buffer_idx = 0; 
0129:  CLRF   62
.................... 				break; 
012A:  GOTO   199
.................... 			// 1 parameter left 
.................... 			case _SET_SCROLL_FREQ: 
.................... 				status = PARAM_SET_SCROLL_FREQ; 
012B:  MOVLW  01
012C:  MOVWF  63
.................... 				break; 
012D:  GOTO   199
.................... 			case _SET_UART_SPEED: 
.................... 				status = PARAM_SET_UART_SPEED; 
012E:  MOVLW  02
012F:  MOVWF  63
.................... 				break; 
0130:  GOTO   199
.................... 			case _SET_COL: 
.................... 				status = PARAM_SET_COL; 
0131:  MOVLW  04
0132:  MOVWF  63
.................... 				break; 
0133:  GOTO   199
.................... 			// No parameters 
.................... 			case _PONG: 
.................... 				pong(); 
.................... 				break; 
*
0136:  GOTO   199
.................... 			case _START_SCROLL: 
.................... 				startScroll(); 
0137:  CALL   091
.................... 				break; 
0138:  GOTO   199
.................... 			case _STOP_SCROLL: 
.................... 				stopScroll(); 
0139:  CALL   0B0
.................... 				break; 
013A:  GOTO   199
.................... 			case _GET_SCREEN: 
.................... 				getScreen(); 
.................... 				break; 
*
015A:  GOTO   199
.................... 			case _SCROLL_DOWN_CARRY: 
.................... 				scroll_type = SCROLL_DOWN_CARRY; 
015B:  MOVLW  08
015C:  MOVWF  5F
.................... 				startScroll(); 
015D:  CALL   091
.................... 				break; 
015E:  GOTO   199
.................... 			case _SCROLL_DOWN: 
.................... 				scroll_type = SCROLL_DOWN; 
015F:  MOVLW  04
0160:  MOVWF  5F
.................... 				startScroll(); 
0161:  CALL   091
.................... 				break; 
0162:  GOTO   199
.................... 			case _SCROLL_UP_CARRY: 
.................... 				scroll_type = SCROLL_UP_CARRY; 
0163:  MOVLW  07
0164:  MOVWF  5F
.................... 				startScroll(); 
0165:  CALL   091
.................... 				break; 
0166:  GOTO   199
.................... 			case _SCROLL_UP: 
.................... 				scroll_type = SCROLL_UP; 
0167:  MOVLW  03
0168:  MOVWF  5F
.................... 				startScroll(); 
0169:  CALL   091
.................... 				break; 
016A:  GOTO   199
.................... 			case _SCROLL_LEFT_CARRY: 
.................... 				scroll_type = SCROLL_LEFT_CARRY; 
016B:  MOVLW  06
016C:  MOVWF  5F
.................... 				startScroll(); 
016D:  CALL   091
.................... 				break; 
016E:  GOTO   199
.................... 			case _SCROLL_LEFT: 
.................... 				scroll_type = SCROLL_LEFT; 
016F:  MOVLW  02
0170:  MOVWF  5F
.................... 				startScroll(); 
0171:  CALL   091
.................... 				break; 
0172:  GOTO   199
.................... 			case _SCROLL_RIGHT_CARRY: 
.................... 				scroll_type = SCROLL_RIGHT_CARRY; 
0173:  MOVLW  05
0174:  MOVWF  5F
.................... 				startScroll(); 
0175:  CALL   091
.................... 				break; 
0176:  GOTO   199
.................... 			case _SCROLL_RIGHT: 
.................... 				scroll_type = SCROLL_RIGHT; 
0177:  MOVLW  01
0178:  MOVWF  5F
.................... 				startScroll(); 
0179:  CALL   091
.................... 				break; 
017A:  GOTO   199
.................... 			case _CLEAR: 
.................... 				clearScreen(); 
.................... 				break; 
*
0189:  BCF    03.5
018A:  GOTO   199
.................... 			case _GET_COL: 
.................... 				get_col(); 
.................... 				break; 
*
0197:  GOTO   199
.................... 			default: 
.................... 				break; 
0198:  GOTO   199
.................... 		} 
.................... 	} 
.................... 	else if (PARAM_SET_SCROLL_FREQ == status) 
0199:  GOTO   306
019A:  DECFSZ 63,W
019B:  GOTO   25C
.................... 	{ 
.................... 		// Freq @ recv 
.................... 		if ((recv >= 0) && (recv <= 16))  
019C:  BSF    03.5
019D:  MOVF   56,W
019E:  SUBLW  10
019F:  BTFSS  03.0
01A0:  GOTO   259
.................... 			setScrollFreq(recv); 
01A1:  MOVF   56,W
01A2:  MOVWF  57
.................... 		status = _COMMAND_BASE; 
*
0259:  BCF    03.5
025A:  CLRF   63
.................... 	} 
.................... 	else if (PARAM_SET_UART_SPEED == status) 
025B:  GOTO   306
025C:  MOVF   63,W
025D:  SUBLW  02
025E:  BTFSS  03.2
025F:  GOTO   2BB
.................... 	{ 
.................... 		// Speed @ recv 
.................... 		if ((recv >= B1200) && (recv <= B115200))  
0260:  BSF    03.5
0261:  MOVF   56,W
0262:  SUBLW  07
0263:  BTFSS  03.0
0264:  GOTO   2B8
.................... 			setUARTSpeed(recv); 
0265:  MOVF   56,W
0266:  MOVWF  57
.................... 		status = _COMMAND_BASE; 
*
02B8:  BCF    03.5
02B9:  CLRF   63
.................... 	} 
.................... 	else if (PARAM_SET_SCREEN == status) 
02BA:  GOTO   306
02BB:  MOVF   63,W
02BC:  SUBLW  03
02BD:  BTFSS  03.2
02BE:  GOTO   2F6
.................... 	{ 
.................... 		// Es un dato 
.................... 		if (buffer_idx >= SCREEN) 
02BF:  MOVF   62,W
02C0:  SUBLW  2F
02C1:  BTFSC  03.0
02C2:  GOTO   2EC
.................... 		{ 
.................... 			// Buffer full -> flush to screen 
.................... 			setScreen(buffer); 
02C3:  BSF    03.5
02C4:  CLRF   58
02C5:  MOVLW  A0
02C6:  MOVWF  57
.................... 			buffer_idx = 0; 
*
02E8:  BCF    03.5
02E9:  CLRF   62
.................... 			status = _COMMAND_BASE; 
02EA:  CLRF   63
.................... 		} 
.................... 		else 
02EB:  GOTO   2F5
.................... 			buffer[buffer_idx++] = recv; 
02EC:  MOVF   62,W
02ED:  INCF   62,F
02EE:  ADDLW  A0
02EF:  MOVWF  04
02F0:  BCF    03.7
02F1:  BSF    03.5
02F2:  MOVF   56,W
02F3:  MOVWF  00
02F4:  BCF    03.5
.................... 	} 
.................... 	else if (PARAM_SET_COL == status) 
02F5:  GOTO   306
02F6:  MOVF   63,W
02F7:  SUBLW  04
02F8:  BTFSS  03.2
02F9:  GOTO   306
.................... 	{ 
.................... 		// <column @ recv 
.................... 		if ((recv >= 0) && (recv < SCREEN_WIDTH))  
02FA:  BSF    03.5
02FB:  MOVF   56,W
02FC:  SUBLW  0F
02FD:  BTFSS  03.0
02FE:  GOTO   304
.................... 			set_col(recv); 
02FF:  MOVF   56,W
0300:  MOVWF  57
0301:  BCF    03.5
0302:  CALL   0CA
0303:  BSF    03.5
.................... 		status = _COMMAND_BASE; 
0304:  BCF    03.5
0305:  CLRF   63
.................... 	}/* 
.................... 	else 
.................... 	{ 
.................... 		// Es un dato 
.................... 		idx %= SCREEN; 
.................... 		matrix[idx++] = recv; 
.................... 	}*/ 
.................... 	//enable_interrupts(GLOBAL); 
.................... 	return; 
.................... } 
....................  
0306:  BCF    0C.5
0307:  BCF    0A.3
0308:  BCF    0A.4
0309:  GOTO   023
.................... #INT_RTCC 
.................... void clock(void) 
.................... { 
.................... 	LINK_DIS 
030A:  BSF    03.5
030B:  BCF    08.2
030C:  BCF    03.5
030D:  BCF    08.2
....................  
.................... 	if(0 == (--int_ping_count)) 
030E:  DECFSZ 5C,F
030F:  GOTO   32F
.................... 	{ 
.................... 		ping(); 
.................... 		int_ping_count = ping_count; 
*
0314:  MOVF   5D,W
0315:  MOVWF  5C
.................... 		if (0 == do_reset--) 
0316:  MOVF   60,W
0317:  DECF   60,F
0318:  XORLW  00
0319:  BTFSS  03.2
031A:  GOTO   32F
.................... 		{ 
.................... 			printf("\r\n# Ping timeout - check drivers#\r\n"); 
031B:  BSF    03.5
031C:  CLRF   56
031D:  MOVF   56,W
031E:  BCF    03.5
031F:  CALL   03C
0320:  BSF    03.5
0321:  INCF   56,F
0322:  MOVWF  77
0323:  BCF    03.5
0324:  BTFSS  0C.4
0325:  GOTO   324
0326:  MOVWF  19
0327:  MOVLW  23
0328:  BSF    03.5
0329:  SUBWF  56,W
032A:  BTFSS  03.2
032B:  GOTO   31D
.................... 			reset_cpu(); 
032C:  CLRF   0A
032D:  BCF    03.5
032E:  GOTO   000
.................... 		} 
.................... 	} 
....................  
.................... 	if((scroll == ENABLED) && (0 == (--int_count))) 
032F:  DECFSZ 5E,W
0330:  GOTO   494
0331:  DECFSZ 5B,F
0332:  GOTO   494
.................... 	{ 
.................... 		switch (scroll_type) 
.................... 		{ 
0333:  MOVF   5F,W
0334:  XORLW  01
0335:  BTFSC  03.2
0336:  GOTO   34D
0337:  XORLW  03
0338:  BTFSC  03.2
0339:  GOTO   374
033A:  XORLW  01
033B:  BTFSC  03.2
033C:  GOTO   3A8
033D:  XORLW  07
033E:  BTFSC  03.2
033F:  GOTO   3C2
0340:  XORLW  01
0341:  BTFSC  03.2
0342:  GOTO   3DA
0343:  XORLW  03
0344:  BTFSC  03.2
0345:  GOTO   41D
0346:  XORLW  01
0347:  BTFSC  03.2
0348:  GOTO   460
0349:  XORLW  0F
034A:  BTFSC  03.2
034B:  GOTO   478
034C:  GOTO   490
.................... 			case SCROLL_RIGHT: 
.................... 				scrollRight(); 
.................... 				break; 
*
0373:  GOTO   492
.................... 			case SCROLL_LEFT: 
.................... 				scrollLeft(); 
.................... 				break; 
*
03A6:  BCF    03.5
03A7:  GOTO   492
.................... 			case SCROLL_UP: 
.................... 				scrollUp(); 
.................... 				break; 
*
03C0:  BCF    03.5
03C1:  GOTO   492
.................... 			case SCROLL_DOWN: 
.................... 				scrollDown(); 
.................... 				break; 
*
03D8:  BCF    03.5
03D9:  GOTO   492
.................... 			case SCROLL_RIGHT_CARRY: 
.................... 				scrollRightCarry(); 
.................... 				break; 
*
041C:  GOTO   492
.................... 			case SCROLL_LEFT_CARRY: 
.................... 				scrollLeftCarry(); 
.................... 				break; 
*
045E:  BCF    03.5
045F:  GOTO   492
.................... 			case SCROLL_UP_CARRY: 
.................... 				scrollUpCarry(); 
.................... 				break; 
*
0476:  BCF    03.5
0477:  GOTO   492
.................... 			case SCROLL_DOWN_CARRY: 
.................... 				scrollDownCarry(); 
.................... 				break; 
*
048E:  BCF    03.5
048F:  GOTO   492
.................... 			default: 
.................... 				stopScroll(); 
0490:  CALL   0B0
.................... 				break; 
0491:  GOTO   492
.................... 		} 
.................... 		int_count = timer_count; 
0492:  MOVF   5A,W
0493:  MOVWF  5B
.................... 	} 
.................... } 
....................  
.................... /* MAIN */ 
0494:  BCF    0B.2
0495:  BCF    0A.3
0496:  BCF    0A.4
0497:  GOTO   023
.................... void main(void) 
.................... { 
*
0509:  CLRF   04
050A:  BCF    03.7
050B:  MOVLW  1F
050C:  ANDWF  03,F
050D:  MOVLW  40
050E:  BSF    03.5
050F:  MOVWF  19
0510:  MOVLW  A2
0511:  MOVWF  18
0512:  MOVLW  90
0513:  BCF    03.5
0514:  MOVWF  18
0515:  BSF    03.5
0516:  BSF    1F.0
0517:  BSF    1F.1
0518:  BSF    1F.2
0519:  BCF    1F.3
.................... 	int i; 
.................... 	unsigned byte alive = 0; 
*
055B:  BSF    03.5
055C:  CLRF   51
....................  
.................... 	set_tris_a(0x00); 
055D:  MOVLW  00
055E:  MOVWF  05
.................... 	set_tris_b(0x00); 
055F:  MOVWF  06
.................... 	set_tris_d(0x00); 
0560:  MOVWF  08
....................  
.................... 	output_a(0x00); 
0561:  CLRF   05
0562:  BCF    03.5
0563:  CLRF   05
.................... 	output_b(0xFF); 
0564:  BSF    03.5
0565:  CLRF   06
0566:  MOVLW  FF
0567:  BCF    03.5
0568:  MOVWF  06
.................... 	output_d(0x00); 
0569:  BSF    03.5
056A:  CLRF   08
056B:  BCF    03.5
056C:  CLRF   08
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
056D:  BSF    03.5
056E:  CLRF   50
056F:  MOVF   50,W
0570:  SUBLW  2F
0571:  BTFSS  03.0
0572:  GOTO   57A
.................... 		buffer[i] = 0; 
0573:  MOVLW  A0
0574:  ADDWF  50,W
0575:  MOVWF  04
0576:  BCF    03.7
0577:  CLRF   00
0578:  INCF   50,F
0579:  GOTO   56F
....................  
.................... 	status = 0; //means waiting for a command 
057A:  BCF    03.5
057B:  CLRF   63
.................... 	// scroll? 
.................... 	scroll = DISABLED; 
057C:  CLRF   5E
.................... 	scroll_type = SCROLL_NONE; 
057D:  CLRF   5F
.................... 	// watch dog 
.................... 	do_reset = PING_PONG_COUNT; 
057E:  MOVLW  32
057F:  MOVWF  60
.................... 	ping_count = DEFAULT_PING_COUNT; 
0580:  MOVLW  26
0581:  MOVWF  5D
.................... 	// reset timer0 
.................... 	set_rtcc(0); 
0582:  CLRF   01
.................... 	timer_div = RTCC_DIV_256; 
0583:  MOVLW  07
0584:  MOVWF  59
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0585:  MOVF   59,W
0586:  MOVWF  77
0587:  BTFSS  59.3
0588:  GOTO   592
0589:  MOVLW  07
058A:  CLRF   01
058B:  MOVLW  81
058C:  MOVWF  04
058D:  BCF    03.7
058E:  MOVF   00,W
058F:  ANDLW  C0
0590:  IORLW  0F
0591:  MOVWF  00
0592:  CLRWDT
0593:  MOVLW  81
0594:  MOVWF  04
0595:  MOVF   00,W
0596:  ANDLW  C0
0597:  IORWF  77,W
0598:  MOVWF  00
.................... 	//timer interrupt 
.................... 	enable_interrupts (INT_RTCC); 
0599:  BSF    0B.5
.................... 	//serial interrupt 
.................... 	enable_interrupts(INT_RDA); 
059A:  BSF    03.5
059B:  BSF    0C.5
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
059C:  MOVLW  C0
059D:  BCF    03.5
059E:  IORWF  0B,F
....................  
.................... 	printf("\r\nInitializing Fleds (ver %s)\r\n", _VERSION_); 
059F:  BSF    03.5
05A0:  CLRF   52
05A1:  MOVF   52,W
05A2:  BCF    03.5
05A3:  CALL   064
05A4:  BSF    03.5
05A5:  INCF   52,F
05A6:  MOVWF  77
05A7:  BCF    03.5
05A8:  BTFSS  0C.4
05A9:  GOTO   5A8
05AA:  MOVWF  19
05AB:  MOVLW  1A
05AC:  BSF    03.5
05AD:  SUBWF  52,W
05AE:  BTFSS  03.2
05AF:  GOTO   5A1
05B0:  CLRF   53
05B1:  MOVF   53,W
05B2:  BCF    03.5
05B3:  CALL   088
05B4:  IORLW  00
05B5:  BTFSC  03.2
05B6:  GOTO   5C0
05B7:  BSF    03.5
05B8:  INCF   53,F
05B9:  BCF    03.5
05BA:  BTFSS  0C.4
05BB:  GOTO   5BA
05BC:  MOVWF  19
05BD:  BSF    03.5
05BE:  GOTO   5B1
05BF:  BCF    03.5
05C0:  MOVLW  29
05C1:  BTFSS  0C.4
05C2:  GOTO   5C1
05C3:  MOVWF  19
05C4:  MOVLW  0D
05C5:  BTFSS  0C.4
05C6:  GOTO   5C5
05C7:  MOVWF  19
05C8:  MOVLW  0A
05C9:  BTFSS  0C.4
05CA:  GOTO   5C9
05CB:  MOVWF  19
....................  
....................  
.................... 	clear(); 
05CC:  GOTO   498
05CD:  CLRF   28
05CE:  BTFSC  0B.7
05CF:  BSF    28.7
05D0:  BCF    0B.7
....................  
.................... 	set_col(0); 
05D1:  BSF    03.5
05D2:  CLRF   57
05D3:  BCF    03.5
05D4:  CALL   0CA
05D5:  BTFSC  28.7
05D6:  BSF    0B.7
.................... 	while(1) 
.................... 	{ 
.................... 		actual_col = 0; 
05D7:  CLRF   61
.................... 		for (i = 0; i < SCREEN; i+=3) 
05D8:  BSF    03.5
05D9:  CLRF   50
05DA:  MOVF   50,W
05DB:  SUBLW  2F
05DC:  BTFSS  03.0
05DD:  GOTO   615
.................... 		{ 
.................... 			COL_DIS 
05DE:  BCF    08.1
05DF:  BCF    03.5
05E0:  BSF    08.1
.................... 			set_red(matrix[i]); 
05E1:  MOVLW  29
05E2:  BSF    03.5
05E3:  ADDWF  50,W
05E4:  MOVWF  04
05E5:  BCF    03.7
05E6:  MOVF   00,W
05E7:  MOVWF  52
05E8:  MOVWF  53
05E9:  BCF    03.5
05EA:  GOTO   4B8
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_green(matrix[i+1]); 
05EB:  MOVLW  01
05EC:  BSF    03.5
05ED:  ADDWF  50,W
05EE:  ADDLW  29
05EF:  MOVWF  04
05F0:  BCF    03.7
05F1:  MOVF   00,W
05F2:  MOVWF  53
05F3:  MOVWF  54
05F4:  BCF    03.5
05F5:  GOTO   4D3
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_blue(matrix[i+2]); 
05F6:  MOVLW  02
05F7:  BSF    03.5
05F8:  ADDWF  50,W
05F9:  ADDLW  29
05FA:  MOVWF  04
05FB:  BCF    03.7
05FC:  MOVF   00,W
05FD:  MOVWF  53
05FE:  MOVWF  54
05FF:  BCF    03.5
0600:  GOTO   4EE
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_col(actual_col++); 
0601:  MOVF   61,W
0602:  INCF   61,F
0603:  BSF    03.5
0604:  MOVWF  52
0605:  BCF    03.5
0606:  CLRF   28
0607:  BTFSC  0B.7
0608:  BSF    28.7
0609:  BCF    0B.7
060A:  BSF    03.5
060B:  MOVF   52,W
060C:  MOVWF  57
060D:  BCF    03.5
060E:  CALL   0CA
060F:  BTFSC  28.7
0610:  BSF    0B.7
.................... 		} 
0611:  MOVLW  03
0612:  BSF    03.5
0613:  ADDWF  50,F
0614:  GOTO   5DA
.................... 		if (0 == alive) 
0615:  MOVF   51,F
0616:  BTFSS  03.2
0617:  GOTO   61C
.................... 			STATUS_ENA 
0618:  BCF    08.3
0619:  BCF    03.5
061A:  BSF    08.3
061B:  BSF    03.5
.................... 		if (128 == alive++) 
061C:  MOVF   51,W
061D:  INCF   51,F
061E:  SUBLW  80
061F:  BTFSS  03.2
0620:  GOTO   625
.................... 			STATUS_DIS 
0621:  BCF    08.3
0622:  BCF    03.5
0623:  BCF    08.3
0624:  BSF    03.5
.................... 	} 
0625:  BCF    03.5
0626:  GOTO   5D7
....................  
....................  	return; 
.................... } 
....................  
.................... /* LEDS */ 
.................... void set_col(byte col) 
.................... { 
0627:  SLEEP
.................... 	if (col < 16) 
*
00CA:  BSF    03.5
00CB:  MOVF   57,W
00CC:  SUBLW  0F
00CD:  BTFSS  03.0
00CE:  GOTO   0DD
.................... 	{ 
.................... 		output_a(col); 
00CF:  CLRF   05
00D0:  MOVF   57,W
00D1:  BCF    03.5
00D2:  MOVWF  05
.................... 		COL_ENA 
00D3:  BSF    03.5
00D4:  BCF    08.1
00D5:  BCF    03.5
00D6:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
00D7:  MOVLW  01
00D8:  BSF    03.5
00D9:  MOVWF  58
00DA:  BCF    03.5
00DB:  CALL   0B2
00DC:  BSF    03.5
.................... 		//COL_DIS 
.................... 	} 
.................... 	return; 
.................... } 
00DD:  BCF    03.5
00DE:  RETLW  00
....................  
.................... void get_col(void) 
.................... { 
.................... 	putchar('<'); 
*
018B:  MOVLW  3C
018C:  BTFSS  0C.4
018D:  GOTO   18C
018E:  MOVWF  19
.................... 	putchar(actual_col); 
018F:  MOVF   61,W
0190:  BTFSS  0C.4
0191:  GOTO   190
0192:  MOVWF  19
.................... 	putchar('>'); 
0193:  MOVLW  3E
0194:  BTFSS  0C.4
0195:  GOTO   194
0196:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
0498:  BSF    03.5
0499:  BCF    08.7
049A:  BCF    03.5
049B:  BSF    08.7
.................... 	G_ENA 
049C:  BSF    03.5
049D:  BCF    08.6
049E:  BCF    03.5
049F:  BSF    08.6
.................... 	B_ENA 
04A0:  BSF    03.5
04A1:  BCF    08.5
04A2:  BCF    03.5
04A3:  BSF    08.5
.................... 	output_b(0xFF); 
04A4:  BSF    03.5
04A5:  CLRF   06
04A6:  MOVLW  FF
04A7:  BCF    03.5
04A8:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
04A9:  BSF    03.5
04AA:  BCF    08.7
04AB:  BCF    03.5
04AC:  BCF    08.7
.................... 	G_DIS 
04AD:  BSF    03.5
04AE:  BCF    08.6
04AF:  BCF    03.5
04B0:  BCF    08.6
.................... 	B_DIS 
04B1:  BSF    03.5
04B2:  BCF    08.5
04B3:  BCF    03.5
04B4:  BCF    08.5
.................... 	return; 
.................... } 
04B5:  BCF    0A.3
04B6:  BCF    0A.4
04B7:  GOTO   5CD (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
04B8:  BSF    03.5
04B9:  BCF    08.6
04BA:  BCF    03.5
04BB:  BCF    08.6
.................... 	B_DIS 
04BC:  BSF    03.5
04BD:  BCF    08.5
04BE:  BCF    03.5
04BF:  BCF    08.5
.................... 	output_b(0xFF - color); 
04C0:  BSF    03.5
04C1:  MOVF   53,W
04C2:  SUBLW  FF
04C3:  MOVWF  54
04C4:  CLRF   06
04C5:  MOVF   54,W
04C6:  BCF    03.5
04C7:  MOVWF  06
.................... 	R_ENA 
04C8:  BSF    03.5
04C9:  BCF    08.7
04CA:  BCF    03.5
04CB:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
04CC:  BSF    03.5
04CD:  BCF    08.7
04CE:  BCF    03.5
04CF:  BCF    08.7
.................... 	return; 
.................... } 
04D0:  BCF    0A.3
04D1:  BCF    0A.4
04D2:  GOTO   5EB (RETURN)
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
04D3:  BSF    03.5
04D4:  BCF    08.6
04D5:  BCF    03.5
04D6:  BCF    08.6
.................... 	B_DIS 
04D7:  BSF    03.5
04D8:  BCF    08.5
04D9:  BCF    03.5
04DA:  BCF    08.5
.................... 	output_b(0xFF - color); 
04DB:  BSF    03.5
04DC:  MOVF   54,W
04DD:  SUBLW  FF
04DE:  MOVWF  55
04DF:  CLRF   06
04E0:  MOVF   55,W
04E1:  BCF    03.5
04E2:  MOVWF  06
.................... 	G_ENA 
04E3:  BSF    03.5
04E4:  BCF    08.6
04E5:  BCF    03.5
04E6:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
04E7:  BSF    03.5
04E8:  BCF    08.6
04E9:  BCF    03.5
04EA:  BCF    08.6
.................... 	return; 
.................... } 
04EB:  BCF    0A.3
04EC:  BCF    0A.4
04ED:  GOTO   5F6 (RETURN)
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
04EE:  BSF    03.5
04EF:  BCF    08.6
04F0:  BCF    03.5
04F1:  BCF    08.6
.................... 	B_DIS 
04F2:  BSF    03.5
04F3:  BCF    08.5
04F4:  BCF    03.5
04F5:  BCF    08.5
.................... 	output_b(0xFF - color);	 
04F6:  BSF    03.5
04F7:  MOVF   54,W
04F8:  SUBLW  FF
04F9:  MOVWF  55
04FA:  CLRF   06
04FB:  MOVF   55,W
04FC:  BCF    03.5
04FD:  MOVWF  06
.................... 	B_ENA 
04FE:  BSF    03.5
04FF:  BCF    08.5
0500:  BCF    03.5
0501:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
0502:  BSF    03.5
0503:  BCF    08.5
0504:  BCF    03.5
0505:  BCF    08.5
.................... 	return; 
.................... } 
0506:  BCF    0A.3
0507:  BCF    0A.4
0508:  GOTO   601 (RETURN)
....................  
.................... void scrollUpCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
0460:  BSF    03.5
0461:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
0462:  CLRF   56
0463:  MOVF   56,W
0464:  SUBLW  2F
0465:  BTFSS  03.0
0466:  GOTO   476
.................... 		rotate_right(matrix + i, 1); 
0467:  MOVLW  29
0468:  ADDWF  56,W
0469:  MOVWF  57
046A:  CLRF   58
046B:  BTFSC  03.0
046C:  INCF   58,F
046D:  MOVF   57,W
046E:  MOVWF  04
046F:  BCF    03.7
0470:  BTFSC  58.0
0471:  BSF    03.7
0472:  RRF    00,W
0473:  RRF    00,F
0474:  INCF   56,F
0475:  GOTO   463
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollUp(void) 
.................... { 
.................... 	byte i = 0; 
*
03A8:  BSF    03.5
03A9:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
03AA:  CLRF   56
03AB:  MOVF   56,W
03AC:  SUBLW  2F
03AD:  BTFSS  03.0
03AE:  GOTO   3C0
.................... 		shift_right(matrix + i, 1, 0); 
03AF:  MOVLW  29
03B0:  ADDWF  56,W
03B1:  MOVWF  57
03B2:  CLRF   58
03B3:  BTFSC  03.0
03B4:  INCF   58,F
03B5:  MOVF   57,W
03B6:  MOVWF  04
03B7:  BCF    03.7
03B8:  BTFSC  58.0
03B9:  BSF    03.7
03BA:  MOVLW  00
03BB:  ADDWF  04,F
03BC:  BCF    03.0
03BD:  RRF    00,F
03BE:  INCF   56,F
03BF:  GOTO   3AB
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDownCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
0478:  BSF    03.5
0479:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
047A:  CLRF   56
047B:  MOVF   56,W
047C:  SUBLW  2F
047D:  BTFSS  03.0
047E:  GOTO   48E
.................... 		rotate_left(matrix + i, 1); 
047F:  MOVLW  29
0480:  ADDWF  56,W
0481:  MOVWF  57
0482:  CLRF   58
0483:  BTFSC  03.0
0484:  INCF   58,F
0485:  MOVF   57,W
0486:  MOVWF  04
0487:  BCF    03.7
0488:  BTFSC  58.0
0489:  BSF    03.7
048A:  RLF    00,W
048B:  RLF    00,F
048C:  INCF   56,F
048D:  GOTO   47B
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDown(void) 
.................... { 
.................... 	byte i = 0; 
*
03C2:  BSF    03.5
03C3:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
03C4:  CLRF   56
03C5:  MOVF   56,W
03C6:  SUBLW  2F
03C7:  BTFSS  03.0
03C8:  GOTO   3D8
.................... 		shift_left(matrix + i, 1, 0); 
03C9:  MOVLW  29
03CA:  ADDWF  56,W
03CB:  MOVWF  57
03CC:  CLRF   58
03CD:  BTFSC  03.0
03CE:  INCF   58,F
03CF:  MOVF   57,W
03D0:  MOVWF  04
03D1:  BCF    03.7
03D2:  BTFSC  58.0
03D3:  BSF    03.7
03D4:  BCF    03.0
03D5:  RLF    00,F
03D6:  INCF   56,F
03D7:  GOTO   3C5
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeft(void) 
.................... { 
.................... 	byte i = 0; 
*
0374:  BSF    03.5
0375:  CLRF   56
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
0376:  CLRF   56
0377:  MOVF   56,W
0378:  SUBLW  2C
0379:  BTFSS  03.0
037A:  GOTO   395
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
037B:  MOVLW  29
037C:  ADDWF  56,W
037D:  MOVWF  78
037E:  CLRF   7A
037F:  BTFSC  03.0
0380:  INCF   7A,F
0381:  MOVF   78,W
0382:  MOVWF  57
0383:  MOVF   7A,W
0384:  MOVWF  58
0385:  MOVLW  03
0386:  ADDWF  56,W
0387:  ADDLW  29
0388:  MOVWF  04
0389:  BCF    03.7
038A:  MOVF   00,W
038B:  MOVWF  5A
038C:  MOVF   57,W
038D:  MOVWF  04
038E:  BCF    03.7
038F:  BTFSC  58.0
0390:  BSF    03.7
0391:  MOVF   5A,W
0392:  MOVWF  00
.................... 	} 
0393:  INCF   56,F
0394:  GOTO   377
.................... 	// clear last column 
.................... 	matrix[i] = 0; 
0395:  MOVLW  29
0396:  ADDWF  56,W
0397:  MOVWF  04
0398:  BCF    03.7
0399:  CLRF   00
.................... 	matrix[i+1] = 0; 
039A:  MOVLW  01
039B:  ADDWF  56,W
039C:  ADDLW  29
039D:  MOVWF  04
039E:  BCF    03.7
039F:  CLRF   00
.................... 	matrix[i+2] = 0; 
03A0:  MOVLW  02
03A1:  ADDWF  56,W
03A2:  ADDLW  29
03A3:  MOVWF  04
03A4:  BCF    03.7
03A5:  CLRF   00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeftCarry(void) 
.................... { 
.................... 	byte i = 0, r, g, b; 
*
041D:  BSF    03.5
041E:  CLRF   56
....................  
.................... 	// Backup first column 
.................... 	r = matrix[0]; 
041F:  BCF    03.5
0420:  MOVF   29,W
0421:  BSF    03.5
0422:  MOVWF  57
.................... 	g = matrix[1]; 
0423:  BCF    03.5
0424:  MOVF   2A,W
0425:  BSF    03.5
0426:  MOVWF  58
.................... 	b = matrix[2]; 
0427:  BCF    03.5
0428:  MOVF   2B,W
0429:  BSF    03.5
042A:  MOVWF  59
....................  
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
042B:  CLRF   56
042C:  MOVF   56,W
042D:  SUBLW  2C
042E:  BTFSS  03.0
042F:  GOTO   44A
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
0430:  MOVLW  29
0431:  ADDWF  56,W
0432:  MOVWF  78
0433:  CLRF   7A
0434:  BTFSC  03.0
0435:  INCF   7A,F
0436:  MOVF   78,W
0437:  MOVWF  5A
0438:  MOVF   7A,W
0439:  MOVWF  5B
043A:  MOVLW  03
043B:  ADDWF  56,W
043C:  ADDLW  29
043D:  MOVWF  04
043E:  BCF    03.7
043F:  MOVF   00,W
0440:  MOVWF  5D
0441:  MOVF   5A,W
0442:  MOVWF  04
0443:  BCF    03.7
0444:  BTFSC  5B.0
0445:  BSF    03.7
0446:  MOVF   5D,W
0447:  MOVWF  00
.................... 	} 
0448:  INCF   56,F
0449:  GOTO   42C
.................... 	// set last column 
.................... 	matrix[i] = r; 
044A:  MOVLW  29
044B:  ADDWF  56,W
044C:  MOVWF  04
044D:  BCF    03.7
044E:  MOVF   57,W
044F:  MOVWF  00
.................... 	matrix[i+1] = g; 
0450:  MOVLW  01
0451:  ADDWF  56,W
0452:  ADDLW  29
0453:  MOVWF  04
0454:  BCF    03.7
0455:  MOVF   58,W
0456:  MOVWF  00
.................... 	matrix[i+2] = b; 
0457:  MOVLW  02
0458:  ADDWF  56,W
0459:  ADDLW  29
045A:  MOVWF  04
045B:  BCF    03.7
045C:  MOVF   59,W
045D:  MOVWF  00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRight(void) 
.................... { 
.................... 	byte i = SCREEN-1; 
*
034D:  MOVLW  2F
034E:  BSF    03.5
034F:  MOVWF  56
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
0350:  MOVWF  56
0351:  MOVF   56,W
0352:  SUBLW  02
0353:  BTFSC  03.0
0354:  GOTO   36F
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
0355:  MOVLW  29
0356:  ADDWF  56,W
0357:  MOVWF  78
0358:  CLRF   7A
0359:  BTFSC  03.0
035A:  INCF   7A,F
035B:  MOVF   78,W
035C:  MOVWF  57
035D:  MOVF   7A,W
035E:  MOVWF  58
035F:  MOVLW  03
0360:  SUBWF  56,W
0361:  ADDLW  29
0362:  MOVWF  04
0363:  BCF    03.7
0364:  MOVF   00,W
0365:  MOVWF  5A
0366:  MOVF   57,W
0367:  MOVWF  04
0368:  BCF    03.7
0369:  BTFSC  58.0
036A:  BSF    03.7
036B:  MOVF   5A,W
036C:  MOVWF  00
.................... 	} 
036D:  DECF   56,F
036E:  GOTO   351
.................... 	// set last column 
.................... 	matrix[0] = 0; 
036F:  BCF    03.5
0370:  CLRF   29
.................... 	matrix[1] = 0; 
0371:  CLRF   2A
.................... 	matrix[2] = 0; 
0372:  CLRF   2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRightCarry(void) 
.................... { 
.................... 	byte i = SCREEN-1, r, g, b; 
*
03DA:  MOVLW  2F
03DB:  BSF    03.5
03DC:  MOVWF  56
....................  
.................... 	// Backup first column 
.................... 	r = matrix[i-2]; 
03DD:  MOVLW  02
03DE:  SUBWF  56,W
03DF:  ADDLW  29
03E0:  MOVWF  04
03E1:  BCF    03.7
03E2:  MOVF   00,W
03E3:  MOVWF  57
.................... 	g = matrix[i-1]; 
03E4:  MOVLW  01
03E5:  SUBWF  56,W
03E6:  ADDLW  29
03E7:  MOVWF  04
03E8:  BCF    03.7
03E9:  MOVF   00,W
03EA:  MOVWF  58
.................... 	b = matrix[i]; 
03EB:  MOVLW  29
03EC:  ADDWF  56,W
03ED:  MOVWF  04
03EE:  BCF    03.7
03EF:  MOVF   00,W
03F0:  MOVWF  59
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
03F1:  MOVLW  2F
03F2:  MOVWF  56
03F3:  MOVF   56,W
03F4:  SUBLW  02
03F5:  BTFSC  03.0
03F6:  GOTO   411
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
03F7:  MOVLW  29
03F8:  ADDWF  56,W
03F9:  MOVWF  78
03FA:  CLRF   7A
03FB:  BTFSC  03.0
03FC:  INCF   7A,F
03FD:  MOVF   78,W
03FE:  MOVWF  5A
03FF:  MOVF   7A,W
0400:  MOVWF  5B
0401:  MOVLW  03
0402:  SUBWF  56,W
0403:  ADDLW  29
0404:  MOVWF  04
0405:  BCF    03.7
0406:  MOVF   00,W
0407:  MOVWF  5D
0408:  MOVF   5A,W
0409:  MOVWF  04
040A:  BCF    03.7
040B:  BTFSC  5B.0
040C:  BSF    03.7
040D:  MOVF   5D,W
040E:  MOVWF  00
.................... 	} 
040F:  DECF   56,F
0410:  GOTO   3F3
.................... 	// set last column 
.................... 	matrix[0] = r; 
0411:  MOVF   57,W
0412:  BCF    03.5
0413:  MOVWF  29
.................... 	matrix[1] = g; 
0414:  BSF    03.5
0415:  MOVF   58,W
0416:  BCF    03.5
0417:  MOVWF  2A
.................... 	matrix[2] = b; 
0418:  BSF    03.5
0419:  MOVF   59,W
041A:  BCF    03.5
041B:  MOVWF  2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void clearScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
017B:  BSF    03.5
017C:  CLRF   57
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
017D:  CLRF   57
017E:  MOVF   57,W
017F:  SUBLW  2F
0180:  BTFSS  03.0
0181:  GOTO   189
.................... 	{ 
.................... 		matrix[i] = 0; 
0182:  MOVLW  29
0183:  ADDWF  57,W
0184:  MOVWF  04
0185:  BCF    03.7
0186:  CLRF   00
.................... 	} 
0187:  INCF   57,F
0188:  GOTO   17E
.................... 	return; 
.................... } 
....................  
.................... void setScreen(byte * buffer) 
.................... { 
.................... 	byte i = 0; 
*
02C7:  CLRF   59
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
02C8:  CLRF   59
02C9:  MOVF   59,W
02CA:  SUBLW  2F
02CB:  BTFSS  03.0
02CC:  GOTO   2E8
.................... 	{ 
.................... 		matrix[i] = buffer[i]; 
02CD:  MOVLW  29
02CE:  ADDWF  59,W
02CF:  MOVWF  78
02D0:  CLRF   7A
02D1:  BTFSC  03.0
02D2:  INCF   7A,F
02D3:  MOVF   78,W
02D4:  MOVWF  5A
02D5:  MOVF   7A,W
02D6:  MOVWF  5B
02D7:  MOVF   59,W
02D8:  ADDWF  57,W
02D9:  MOVWF  04
02DA:  BCF    03.7
02DB:  BTFSC  58.0
02DC:  BSF    03.7
02DD:  MOVF   00,W
02DE:  MOVWF  5C
02DF:  MOVF   5A,W
02E0:  MOVWF  04
02E1:  BCF    03.7
02E2:  BTFSC  5B.0
02E3:  BSF    03.7
02E4:  MOVF   5C,W
02E5:  MOVWF  00
.................... 	} 
02E6:  INCF   59,F
02E7:  GOTO   2C9
.................... 	return; 
.................... } 
....................  
.................... void getScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
013B:  BSF    03.5
013C:  CLRF   57
.................... 	 
.................... 	putchar('['); 
013D:  MOVLW  5B
013E:  BCF    03.5
013F:  BTFSS  0C.4
0140:  GOTO   13F
0141:  MOVWF  19
.................... 	for(i = 0; i < SCREEN; i++) 
0142:  BSF    03.5
0143:  CLRF   57
0144:  MOVF   57,W
0145:  SUBLW  2F
0146:  BTFSS  03.0
0147:  GOTO   155
.................... 	{ 
.................... 		putchar(matrix[i]); 
0148:  MOVLW  29
0149:  ADDWF  57,W
014A:  MOVWF  04
014B:  BCF    03.7
014C:  MOVF   00,W
014D:  MOVWF  58
014E:  BCF    03.5
014F:  BTFSS  0C.4
0150:  GOTO   14F
0151:  MOVWF  19
.................... 	} 
0152:  BSF    03.5
0153:  INCF   57,F
0154:  GOTO   144
.................... 	putchar(']'); 
0155:  MOVLW  5D
0156:  BCF    03.5
0157:  BTFSS  0C.4
0158:  GOTO   157
0159:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void stopScroll(void) 
.................... { 
.................... 	scroll = DISABLED; 
*
00B0:  CLRF   5E
.................... 	return; 
.................... } 
00B1:  RETLW  00
....................  
.................... void startScroll(void) 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
*
0091:  BCF    0B.6
0092:  BCF    0B.7
0093:  BTFSC  0B.7
0094:  GOTO   092
.................... 	scroll = ENABLED; 
0095:  MOVLW  01
0096:  MOVWF  5E
.................... 	set_rtcc(0); 
0097:  CLRF   01
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0098:  MOVF   59,W
0099:  MOVWF  77
009A:  BTFSS  59.3
009B:  GOTO   0A5
009C:  MOVLW  07
009D:  CLRF   01
009E:  MOVLW  81
009F:  MOVWF  04
00A0:  BCF    03.7
00A1:  MOVF   00,W
00A2:  ANDLW  C0
00A3:  IORLW  0F
00A4:  MOVWF  00
00A5:  CLRWDT
00A6:  MOVLW  81
00A7:  MOVWF  04
00A8:  MOVF   00,W
00A9:  ANDLW  C0
00AA:  IORWF  77,W
00AB:  MOVWF  00
.................... 	enable_interrupts(INT_RTCC); 
00AC:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
00AD:  MOVLW  C0
00AE:  IORWF  0B,F
.................... 	return; 
.................... } 
00AF:  RETLW  00
....................  
.................... void setUARTSpeed(byte speed) 
.................... { 
.................... 	switch(speed) 
.................... 	{ 
*
0267:  MOVF   57,W
0268:  BCF    03.5
0269:  BTFSC  03.2
026A:  GOTO   281
026B:  XORLW  01
026C:  BTFSC  03.2
026D:  GOTO   287
026E:  XORLW  03
026F:  BTFSC  03.2
0270:  GOTO   28D
0271:  XORLW  01
0272:  BTFSC  03.2
0273:  GOTO   293
0274:  XORLW  07
0275:  BTFSC  03.2
0276:  GOTO   299
0277:  XORLW  01
0278:  BTFSC  03.2
0279:  GOTO   29F
027A:  XORLW  03
027B:  BTFSC  03.2
027C:  GOTO   2A5
027D:  XORLW  01
027E:  BTFSC  03.2
027F:  GOTO   2AB
0280:  GOTO   2B2
.................... 		case B1200: 
.................... 			setup_uart(1200); 
0281:  MOVLW  FF
0282:  BSF    03.5
0283:  MOVWF  19
0284:  MOVLW  A2
0285:  MOVWF  18
.................... 			break; 
0286:  GOTO   2B8
.................... 		case B2400: 
.................... 			setup_uart(2400); 
0287:  MOVLW  81
0288:  BSF    03.5
0289:  MOVWF  19
028A:  MOVLW  A2
028B:  MOVWF  18
.................... 			break; 
028C:  GOTO   2B8
.................... 		case B4800: 
.................... 			setup_uart(4800); 
028D:  MOVLW  40
028E:  BSF    03.5
028F:  MOVWF  19
0290:  MOVLW  A2
0291:  MOVWF  18
.................... 			break; 
0292:  GOTO   2B8
.................... 		case B9600: 
.................... 			setup_uart(9600); 
0293:  MOVLW  81
0294:  BSF    03.5
0295:  MOVWF  19
0296:  MOVLW  A6
0297:  MOVWF  18
.................... 			break; 
0298:  GOTO   2B8
.................... 		case B19200: 
.................... 			setup_uart(19200); 
0299:  MOVLW  40
029A:  BSF    03.5
029B:  MOVWF  19
029C:  MOVLW  A6
029D:  MOVWF  18
.................... 			break; 
029E:  GOTO   2B8
.................... 		case B38400: 
.................... 			setup_uart(38400); 
029F:  MOVLW  20
02A0:  BSF    03.5
02A1:  MOVWF  19
02A2:  MOVLW  A6
02A3:  MOVWF  18
.................... 			break; 
02A4:  GOTO   2B8
.................... 		case B57600: 
.................... 			setup_uart(57600); 
02A5:  MOVLW  15
02A6:  BSF    03.5
02A7:  MOVWF  19
02A8:  MOVLW  A6
02A9:  MOVWF  18
.................... 			break; 
02AA:  GOTO   2B8
.................... 		case B115200: 
.................... 			setup_uart(115200); 
02AB:  MOVLW  0A
02AC:  BSF    03.5
02AD:  MOVWF  19
02AE:  MOVLW  A6
02AF:  MOVWF  18
.................... 			break; 
02B0:  GOTO   2B8
02B1:  BCF    03.5
.................... 		default: 
.................... 			setup_uart(4800); 
02B2:  MOVLW  40
02B3:  BSF    03.5
02B4:  MOVWF  19
02B5:  MOVLW  A2
02B6:  MOVWF  18
.................... 			break; 
02B7:  GOTO   2B8
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void setScrollFreq(byte freq) 
.................... { 
.................... 	//global interrupt 
.................... 	disable_interrupts(GLOBAL); 
*
01A3:  BCF    03.5
01A4:  BCF    0B.6
01A5:  BCF    0B.7
01A6:  BTFSC  0B.7
01A7:  GOTO   1A5
.................... 	set_rtcc(0); 
01A8:  CLRF   01
....................  
.................... 	switch(freq) 
.................... 	{ 
01A9:  BSF    03.5
01AA:  MOVF   57,W
01AB:  BCF    03.5
01AC:  BTFSC  03.2
01AD:  GOTO   1DC
01AE:  XORLW  01
01AF:  BTFSC  03.2
01B0:  GOTO   1E3
01B1:  XORLW  03
01B2:  BTFSC  03.2
01B3:  GOTO   1EA
01B4:  XORLW  01
01B5:  BTFSC  03.2
01B6:  GOTO   1F1
01B7:  XORLW  07
01B8:  BTFSC  03.2
01B9:  GOTO   1F8
01BA:  XORLW  01
01BB:  BTFSC  03.2
01BC:  GOTO   1FE
01BD:  XORLW  03
01BE:  BTFSC  03.2
01BF:  GOTO   205
01C0:  XORLW  01
01C1:  BTFSC  03.2
01C2:  GOTO   20C
01C3:  XORLW  0F
01C4:  BTFSC  03.2
01C5:  GOTO   213
01C6:  XORLW  01
01C7:  BTFSC  03.2
01C8:  GOTO   21A
01C9:  XORLW  03
01CA:  BTFSC  03.2
01CB:  GOTO   221
01CC:  XORLW  01
01CD:  BTFSC  03.2
01CE:  GOTO   228
01CF:  XORLW  07
01D0:  BTFSC  03.2
01D1:  GOTO   22F
01D2:  XORLW  01
01D3:  BTFSC  03.2
01D4:  GOTO   236
01D5:  XORLW  03
01D6:  BTFSC  03.2
01D7:  GOTO   23D
01D8:  XORLW  01
01D9:  BTFSC  03.2
01DA:  GOTO   244
01DB:  GOTO   24B
.................... 		case 0: 
.................... 			timer_div = RTCC_DIV_64; 
01DC:  MOVLW  05
01DD:  MOVWF  59
.................... 			timer_count = 1; 
01DE:  MOVLW  01
01DF:  MOVWF  5A
.................... 			ping_count = 229; 
01E0:  MOVLW  E5
01E1:  MOVWF  5D
.................... 			break; 
01E2:  GOTO   252
.................... 		case 1: 
.................... 			timer_div = RTCC_DIV_128; 
01E3:  MOVLW  06
01E4:  MOVWF  59
.................... 			timer_count = 1; 
01E5:  MOVLW  01
01E6:  MOVWF  5A
.................... 			ping_count = 115; 
01E7:  MOVLW  73
01E8:  MOVWF  5D
.................... 			break; 
01E9:  GOTO   252
.................... 		case 2: 
.................... 			timer_div = RTCC_DIV_64; 
01EA:  MOVLW  05
01EB:  MOVWF  59
.................... 			timer_count = 3; 
01EC:  MOVLW  03
01ED:  MOVWF  5A
.................... 			ping_count = 230; 
01EE:  MOVLW  E6
01EF:  MOVWF  5D
.................... 			break; 
01F0:  GOTO   252
.................... 		case 3: 
.................... 			timer_div = RTCC_DIV_256; 
01F1:  MOVLW  07
01F2:  MOVWF  59
.................... 			timer_count = 1; 
01F3:  MOVLW  01
01F4:  MOVWF  5A
.................... 			ping_count = 57; 
01F5:  MOVLW  39
01F6:  MOVWF  5D
.................... 			break; 
01F7:  GOTO   252
.................... 		case 4: 
.................... 			timer_div = RTCC_DIV_64; 
01F8:  MOVLW  05
01F9:  MOVWF  59
.................... 			timer_count = 5; 
01FA:  MOVWF  5A
.................... 			ping_count = 229; 
01FB:  MOVLW  E5
01FC:  MOVWF  5D
.................... 			break; 
01FD:  GOTO   252
.................... 		case 5: 
.................... 			timer_div = RTCC_DIV_128; 
01FE:  MOVLW  06
01FF:  MOVWF  59
.................... 			timer_count = 3; 
0200:  MOVLW  03
0201:  MOVWF  5A
.................... 			ping_count = 115; 
0202:  MOVLW  73
0203:  MOVWF  5D
.................... 			break; 
0204:  GOTO   252
.................... 		case 6: 
.................... 			timer_div = RTCC_DIV_64; 
0205:  MOVLW  05
0206:  MOVWF  59
.................... 			timer_count = 7; 
0207:  MOVLW  07
0208:  MOVWF  5A
.................... 			ping_count = 231; 
0209:  MOVLW  E7
020A:  MOVWF  5D
.................... 			break; 
020B:  GOTO   252
.................... 		case 7: 
.................... 			timer_div = RTCC_DIV_256; 
020C:  MOVLW  07
020D:  MOVWF  59
.................... 			timer_count = 2; 
020E:  MOVLW  02
020F:  MOVWF  5A
.................... 			ping_count = 57; 
0210:  MOVLW  39
0211:  MOVWF  5D
.................... 			break; 
0212:  GOTO   252
.................... 		case 8: 
.................... 			timer_div = RTCC_DIV_64; 
0213:  MOVLW  05
0214:  MOVWF  59
.................... 			timer_count = 9; 
0215:  MOVLW  09
0216:  MOVWF  5A
.................... 			ping_count = 230; 
0217:  MOVLW  E6
0218:  MOVWF  5D
.................... 			break; 
0219:  GOTO   252
.................... 		case 9: 
.................... 			timer_div = RTCC_DIV_256; 
021A:  MOVLW  07
021B:  MOVWF  59
.................... 			timer_count = 3; 
021C:  MOVLW  03
021D:  MOVWF  5A
.................... 			ping_count = 56; 
021E:  MOVLW  38
021F:  MOVWF  5D
.................... 			break; 
0220:  GOTO   252
.................... 		case 10: 
.................... 			timer_div = RTCC_DIV_64; 
0221:  MOVLW  05
0222:  MOVWF  59
.................... 			timer_count = 17; 
0223:  MOVLW  11
0224:  MOVWF  5A
.................... 			ping_count = 230; 
0225:  MOVLW  E6
0226:  MOVWF  5D
.................... 			break; 
0227:  GOTO   252
.................... 		case 11: 
.................... 			timer_div = RTCC_DIV_256; 
0228:  MOVLW  07
0229:  MOVWF  59
.................... 			timer_count = 5; 
022A:  MOVLW  05
022B:  MOVWF  5A
.................... 			ping_count = 56; 
022C:  MOVLW  38
022D:  MOVWF  5D
.................... 			break; 
022E:  GOTO   252
.................... 		case 12: 
.................... 			timer_div = RTCC_DIV_256; 
022F:  MOVLW  07
0230:  MOVWF  59
.................... 			timer_count = 8; 
0231:  MOVLW  08
0232:  MOVWF  5A
.................... 			ping_count = 60; 
0233:  MOVLW  3C
0234:  MOVWF  5D
.................... 			break; 
0235:  GOTO   252
.................... 		case 13: 
.................... 			timer_div = RTCC_DIV_256; 
0236:  MOVLW  07
0237:  MOVWF  59
.................... 			timer_count = 9; 
0238:  MOVLW  09
0239:  MOVWF  5A
.................... 			ping_count = 54; 
023A:  MOVLW  36
023B:  MOVWF  5D
.................... 			break; 
023C:  GOTO   252
.................... 		case 14: 
.................... 			timer_div = RTCC_DIV_256; 
023D:  MOVLW  07
023E:  MOVWF  59
.................... 			timer_count = 14; 
023F:  MOVLW  0E
0240:  MOVWF  5A
.................... 			ping_count = 53; 
0241:  MOVLW  35
0242:  MOVWF  5D
.................... 			break; 
0243:  GOTO   252
.................... 		case 15: 
.................... 			timer_div = RTCC_DIV_256; 
0244:  MOVLW  07
0245:  MOVWF  59
.................... 			timer_count = 76; 
0246:  MOVLW  4C
0247:  MOVWF  5A
.................... 			ping_count = 57; 
0248:  MOVLW  39
0249:  MOVWF  5D
.................... 			break; 
024A:  GOTO   252
.................... 		default: 
.................... 			timer_div = DEFAULT_TIMER_DIV; 
024B:  MOVLW  07
024C:  MOVWF  59
.................... 			timer_count = DEFAULT_TIMER_COUNT; 
024D:  MOVLW  4C
024E:  MOVWF  5A
.................... 			ping_count = DEFAULT_PING_COUNT; 
024F:  MOVLW  26
0250:  MOVWF  5D
.................... 			break; 
0251:  GOTO   252
.................... 	} 
....................  
.................... 	// Reset counters 
.................... 	int_count = timer_count; 
0252:  MOVF   5A,W
0253:  MOVWF  5B
.................... 	int_ping_count = ping_count; 
0254:  MOVF   5D,W
0255:  MOVWF  5C
....................  
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
0256:  MOVLW  C0
0257:  IORWF  0B,F
0258:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void ping(void) 
.................... { 
....................  
.................... 	putchar('?'); 
*
0310:  MOVLW  3F
0311:  BTFSS  0C.4
0312:  GOTO   311
0313:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void pong(void) 
.................... { 
.................... 	// do not do reset! 
.................... 	do_reset = ping_count; 
*
0134:  MOVF   5D,W
0135:  MOVWF  60
....................  
.................... 	return; 
.................... } 

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG

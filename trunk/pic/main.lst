CCS PCM C Compiler, Version 4.023, 25097               24-Nov-08 20:35

               Filename: main.lst

               ROM used: 1483 words (18%)
                         Largest free fragment is 2048
               RAM used: 126 (34%) at main() level
                         136 (37%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   4BA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   2AD
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   0B1
.................... #define _VERSION_ "0.48" 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT,NOPUT 
.................... #use delay(clock=20000000, restart_wdt) 
*
043A:  MOVLW  D4
043B:  MOVWF  04
043C:  BCF    03.7
043D:  MOVF   00,W
043E:  BTFSC  03.2
043F:  GOTO   451
0440:  MOVLW  06
0441:  MOVWF  78
0442:  MOVLW  BF
0443:  MOVWF  77
0444:  CLRWDT
0445:  DECFSZ 77,F
0446:  GOTO   444
0447:  DECFSZ 78,F
0448:  GOTO   442
0449:  MOVLW  7A
044A:  MOVWF  77
044B:  DECFSZ 77,F
044C:  GOTO   44B
044D:  GOTO   44E
044E:  CLRWDT
044F:  DECFSZ 00,F
0450:  GOTO   440
0451:  BCF    0A.3
0452:  BCF    0A.4
0453:  GOTO   466 (RETURN)
.................... #use rs232(baud=115200, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... /****** DEFINITIONS ******/ 
.................... typedef enum {B1200 = 0, B2400, B4800, B9600, B19200,  
.................... 				B38400, B57600, B115200} bouds; 
....................  
.................... typedef enum {SCROLL_NONE = 0, SCROLL_RIGHT, SCROLL_LEFT, 
.................... 			SCROLL_UP, SCROLL_DOWN, SCROLL_RIGHT_CARRY, 
.................... 			SCROLL_LEFT_CARRY, SCROLL_UP_CARRY, 
.................... 			SCROLL_DOWN_CARRY} scrolls; 
....................  
.................... #define _COMMAND_BASE			0 
.................... #define _PONG					_COMMAND_BASE + 'A' 
.................... #define _SET_SCROLL_FREQ		_COMMAND_BASE + 'B' 
.................... #define _SET_UART_SPEED			_COMMAND_BASE + 'C' 
.................... #define _GET_SCREEN				_COMMAND_BASE + 'F' 
.................... #define _SET_SCREEN				_COMMAND_BASE + 'G' 
.................... #define _CLEAR					_COMMAND_BASE + 'P' 
.................... #define _GET_COL				_COMMAND_BASE + 'Q' 
.................... #define _SET_COL				_COMMAND_BASE + 'R' 
....................  
.................... #define _SCROLL_DOWN_CARRY		0 
.................... #define _SCROLL_DOWN			1 
.................... #define _SCROLL_UP_CARRY		2 
.................... #define _SCROLL_UP				3 
.................... #define _SCROLL_LEFT_CARRY		4 
.................... #define _SCROLL_LEFT			5 
.................... #define _SCROLL_RIGHT_CARRY		6 
.................... #define _SCROLL_RIGHT			7 
.................... #define _START_SCROLL			8 
.................... #define _STOP_SCROLL			9 
....................  
....................  
.................... #define PARAM_SET_SCROLL_FREQ	_COMMAND_BASE + 1 
.................... #define PARAM_SET_UART_SPEED	_COMMAND_BASE + 2 
.................... #define PARAM_SET_SCREEN		_COMMAND_BASE + 3 
.................... #define PARAM_SET_COL			_COMMAND_BASE + 4 
....................  
.................... #define DISABLED			0 
.................... #define ENABLED				(DISABLED + 1) 
....................  
.................... /* STATUS*/ 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... /* LEDS */ 
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define SET_74154_TIME		1 
.................... #define SET_74573_TIME		0 
.................... #define SCREEN_WIDTH		16 
.................... #define COLOR_COUNT			3 
.................... #define SCREEN				(COLOR_COUNT * SCREEN_WIDTH) 
....................  
.................... /* TIMER */ 
.................... // 76 && 256 -> 1Hz 
.................... #define DEFAULT_TIMER_COUNT	76 
.................... #define DEFAULT_TIMER_DIV	RTCC_DIV_256 
.................... #define DEFAULT_PING_COUNT	38 // ping every 500ms 
.................... #define PING_PONG_COUNT		50 
....................  
.................... /****** FUNCTIONS ******/ 
....................  
.................... /* LEDS */ 
.................... void clear(void); 
.................... void set_red(byte color); 
.................... void set_green(byte color); 
.................... void set_blue(byte color); 
.................... void set_col(byte col); 
.................... void get_col(void); 
.................... void scrollUp(void); 
.................... void scrollUpCarry(void); 
.................... void scrollDown(void); 
.................... void scrollDownCarry(void); 
.................... void scrollLeft(void); 
.................... void scrollLeftCarry(void); 
.................... void scrollRight(void); 
.................... void scrollRightCarry(void); 
.................... void setScreen(byte * buffer); 
.................... void getScreen(void); 
.................... void clearScreen(void); 
.................... void stopScroll(void); 
.................... void startScroll(void); 
.................... void setUARTSpeed(byte speed); 
.................... void setScrollFreq(byte freq); 
.................... void ping(void); 
.................... void pong(void); 
....................  
.................... /* TIMER */ 
.................... byte matrix[SCREEN] = {	0x00, 0x00, 0xFF, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0x00}; 
*
04CB:  BCF    03.5
04CC:  CLRF   28
04CD:  CLRF   29
04CE:  MOVLW  FF
04CF:  MOVWF  2A
04D0:  CLRF   2B
04D1:  CLRF   2C
04D2:  CLRF   2D
04D3:  CLRF   2E
04D4:  CLRF   2F
04D5:  CLRF   30
04D6:  CLRF   31
04D7:  CLRF   32
04D8:  CLRF   33
04D9:  CLRF   34
04DA:  CLRF   35
04DB:  CLRF   36
04DC:  CLRF   37
04DD:  CLRF   38
04DE:  CLRF   39
04DF:  CLRF   3A
04E0:  CLRF   3B
04E1:  CLRF   3C
04E2:  CLRF   3D
04E3:  CLRF   3E
04E4:  CLRF   3F
04E5:  CLRF   40
04E6:  CLRF   41
04E7:  CLRF   42
04E8:  CLRF   43
04E9:  CLRF   44
04EA:  CLRF   45
04EB:  CLRF   46
04EC:  CLRF   47
04ED:  CLRF   48
04EE:  CLRF   49
04EF:  CLRF   4A
04F0:  CLRF   4B
04F1:  CLRF   4C
04F2:  CLRF   4D
04F3:  CLRF   4E
04F4:  CLRF   4F
04F5:  CLRF   50
04F6:  CLRF   51
04F7:  CLRF   52
04F8:  CLRF   53
04F9:  CLRF   54
04FA:  CLRF   55
04FB:  CLRF   56
04FC:  CLRF   57
....................  
.................... /****** IMPLEMENTATION ******/ 
.................... byte timer_div = DEFAULT_TIMER_DIV; 
04FD:  MOVLW  07
04FE:  MOVWF  58
.................... byte timer_count = DEFAULT_TIMER_COUNT; 
04FF:  MOVLW  4C
0500:  MOVWF  59
.................... byte int_count = DEFAULT_TIMER_COUNT; 
0501:  MOVWF  5A
.................... byte int_ping_count = DEFAULT_PING_COUNT; 
0502:  MOVLW  26
0503:  MOVWF  5B
.................... byte ping_count = DEFAULT_PING_COUNT; 
0504:  MOVWF  5C
.................... byte scroll = DISABLED; 
0505:  CLRF   5D
.................... byte scroll_type = SCROLL_NONE; 
0506:  CLRF   5E
.................... byte do_reset = PING_PONG_COUNT; 
0507:  MOVLW  32
0508:  MOVWF  5F
.................... byte actual_col = 0; 
0509:  CLRF   60
.................... byte buffer[SCREEN]; 
.................... byte buffer_idx = 0; 
050A:  CLRF   61
.................... byte status = _COMMAND_BASE; 
050B:  CLRF   62
.................... byte column = 0; 
050C:  CLRF   63
....................  
.................... /* INTERRUPT */ 
.................... #INT_RDA 
.................... void recv_rs232(void) 
.................... { 
.................... 	int recv = 0; 
*
00B1:  BSF    03.5
00B2:  CLRF   56
.................... 	//disable_interrupts(GLOBAL); 
.................... 	LINK_ENA 
00B3:  BCF    08.2
00B4:  BCF    03.5
00B5:  BSF    08.2
.................... 	recv = getc(); 
00B6:  BTFSS  0C.5
00B7:  GOTO   0B6
00B8:  MOVF   1A,W
00B9:  BSF    03.5
00BA:  MOVWF  56
....................  
.................... 	if (status == 0x01) 
00BB:  BCF    03.5
00BC:  DECFSZ 62,W
00BD:  GOTO   0D0
.................... 	{ 
.................... 		status = 0x02; 
00BE:  MOVLW  02
00BF:  MOVWF  62
.................... 		matrix[column * 3] = recv; 
00C0:  MOVF   63,W
00C1:  BSF    03.5
00C2:  MOVWF  57
00C3:  MOVLW  03
00C4:  MOVWF  58
00C5:  BCF    03.5
00C6:  CALL   069
00C7:  MOVLW  28
00C8:  ADDWF  78,W
00C9:  MOVWF  04
00CA:  BCF    03.7
00CB:  BSF    03.5
00CC:  MOVF   56,W
00CD:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x02) 
00CE:  GOTO   2A8
00CF:  BCF    03.5
00D0:  MOVF   62,W
00D1:  SUBLW  02
00D2:  BTFSS  03.2
00D3:  GOTO   0E7
.................... 	{ 
.................... 		status = 0x03; 
00D4:  MOVLW  03
00D5:  MOVWF  62
.................... 		matrix[column * 3 + 1] = recv; 
00D6:  MOVF   63,W
00D7:  BSF    03.5
00D8:  MOVWF  57
00D9:  MOVLW  03
00DA:  MOVWF  58
00DB:  BCF    03.5
00DC:  CALL   069
00DD:  MOVLW  01
00DE:  ADDWF  78,W
00DF:  ADDLW  28
00E0:  MOVWF  04
00E1:  BCF    03.7
00E2:  BSF    03.5
00E3:  MOVF   56,W
00E4:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x03) 
00E5:  GOTO   2A8
00E6:  BCF    03.5
00E7:  MOVF   62,W
00E8:  SUBLW  03
00E9:  BTFSS  03.2
00EA:  GOTO   0FD
.................... 	{ 
.................... 		status = 0x00; 
00EB:  CLRF   62
.................... 		matrix[column * 3 + 2] = recv; 
00EC:  MOVF   63,W
00ED:  BSF    03.5
00EE:  MOVWF  57
00EF:  MOVLW  03
00F0:  MOVWF  58
00F1:  BCF    03.5
00F2:  CALL   069
00F3:  MOVLW  02
00F4:  ADDWF  78,W
00F5:  ADDLW  28
00F6:  MOVWF  04
00F7:  BCF    03.7
00F8:  BSF    03.5
00F9:  MOVF   56,W
00FA:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0) 
00FB:  GOTO   2A8
00FC:  BCF    03.5
00FD:  MOVF   62,F
00FE:  BTFSS  03.2
00FF:  GOTO   2A7
.................... 	{ 
.................... 		// SET COLUMN (0100 ABCD) + R + G + B 
.................... 		if ((recv & 0xF0) == 0x40) 
0100:  BSF    03.5
0101:  MOVF   56,W
0102:  ANDLW  F0
0103:  SUBLW  40
0104:  BTFSS  03.2
0105:  GOTO   10D
.................... 		{ 
.................... 			column = recv & 0x0F; 
0106:  MOVF   56,W
0107:  ANDLW  0F
0108:  BCF    03.5
0109:  MOVWF  63
.................... 			status = 0x01; 
010A:  MOVLW  01
010B:  MOVWF  62
010C:  BSF    03.5
.................... 		} 
.................... 		// CLEAR SCREEN (0000 0000) 
.................... 		if (recv == 0x00) 
010D:  MOVF   56,F
010E:  BTFSS  03.2
010F:  GOTO   11D
.................... 			clearScreen(); 
.................... 		// GET SCREEN (0101 1010) 
.................... 		if (recv == 0x5A) 
*
011D:  MOVF   56,W
011E:  SUBLW  5A
011F:  BTFSS  03.2
0120:  GOTO   140
.................... 			getScreen(); 
.................... 		// SET UART SPEED (0000 1ABC) 
.................... 		if ((recv & 0xF8) == 0x08) 
*
0140:  MOVF   56,W
0141:  ANDLW  F8
0142:  SUBLW  08
0143:  BTFSS  03.2
0144:  GOTO   19B
.................... 			setUARTSpeed(recv & 0x07); 
0145:  MOVF   56,W
0146:  ANDLW  07
0147:  MOVWF  57
0148:  MOVF   57,W
0149:  MOVWF  58
.................... 		// SET SCROLL FREQ (0010 ABCD) 
.................... 		if ((recv & 0xF0) == 0x20) 
*
019B:  MOVF   56,W
019C:  ANDLW  F0
019D:  SUBLW  20
019E:  BTFSS  03.2
019F:  GOTO   25B
.................... 			setScrollFreq(recv & 0x0F); 
01A0:  MOVF   56,W
01A1:  ANDLW  0F
01A2:  MOVWF  57
01A3:  MOVF   57,W
01A4:  MOVWF  58
.................... 		// SCROLL (0001 ABCD) 
.................... 		if ((recv & 0xF0) == 0x10) 
*
025B:  MOVF   56,W
025C:  ANDLW  F0
025D:  SUBLW  10
025E:  BTFSS  03.2
025F:  GOTO   2A8
.................... 		{ 
.................... 			switch (recv & 0x0F) 
.................... 			{ 
0260:  MOVF   56,W
0261:  ANDLW  0F
0262:  BCF    03.5
0263:  BTFSC  03.2
0264:  GOTO   281
0265:  XORLW  01
0266:  BTFSC  03.2
0267:  GOTO   285
0268:  XORLW  03
0269:  BTFSC  03.2
026A:  GOTO   289
026B:  XORLW  01
026C:  BTFSC  03.2
026D:  GOTO   28D
026E:  XORLW  07
026F:  BTFSC  03.2
0270:  GOTO   291
0271:  XORLW  01
0272:  BTFSC  03.2
0273:  GOTO   295
0274:  XORLW  03
0275:  BTFSC  03.2
0276:  GOTO   299
0277:  XORLW  01
0278:  BTFSC  03.2
0279:  GOTO   29D
027A:  XORLW  0F
027B:  BTFSC  03.2
027C:  GOTO   2A1
027D:  XORLW  01
027E:  BTFSC  03.2
027F:  GOTO   2A3
0280:  GOTO   2A5
.................... 				case _SCROLL_DOWN_CARRY: 
.................... 					scroll_type = SCROLL_DOWN_CARRY; 
0281:  MOVLW  08
0282:  MOVWF  5E
.................... 					startScroll(); 
0283:  CALL   090
.................... 					break; 
0284:  GOTO   2A7
.................... 				case _SCROLL_DOWN: 
.................... 					scroll_type = SCROLL_DOWN; 
0285:  MOVLW  04
0286:  MOVWF  5E
.................... 					startScroll(); 
0287:  CALL   090
.................... 					break; 
0288:  GOTO   2A7
.................... 				case _SCROLL_UP_CARRY: 
.................... 					scroll_type = SCROLL_UP_CARRY; 
0289:  MOVLW  07
028A:  MOVWF  5E
.................... 					startScroll(); 
028B:  CALL   090
.................... 					break; 
028C:  GOTO   2A7
.................... 				case _SCROLL_UP: 
.................... 					scroll_type = SCROLL_UP; 
028D:  MOVLW  03
028E:  MOVWF  5E
.................... 					startScroll(); 
028F:  CALL   090
.................... 					break; 
0290:  GOTO   2A7
.................... 				case _SCROLL_LEFT_CARRY: 
.................... 					scroll_type = SCROLL_LEFT_CARRY; 
0291:  MOVLW  06
0292:  MOVWF  5E
.................... 					startScroll(); 
0293:  CALL   090
.................... 					break; 
0294:  GOTO   2A7
.................... 				case _SCROLL_LEFT: 
.................... 					scroll_type = SCROLL_LEFT; 
0295:  MOVLW  02
0296:  MOVWF  5E
.................... 					startScroll(); 
0297:  CALL   090
.................... 					break; 
0298:  GOTO   2A7
.................... 				case _SCROLL_RIGHT_CARRY: 
.................... 					scroll_type = SCROLL_RIGHT_CARRY; 
0299:  MOVLW  05
029A:  MOVWF  5E
.................... 					startScroll(); 
029B:  CALL   090
.................... 					break; 
029C:  GOTO   2A7
.................... 				case _SCROLL_RIGHT: 
.................... 					scroll_type = SCROLL_RIGHT; 
029D:  MOVLW  01
029E:  MOVWF  5E
.................... 					startScroll(); 
029F:  CALL   090
.................... 					break; 
02A0:  GOTO   2A7
.................... 				case _START_SCROLL: 
.................... 					startScroll(); 
02A1:  CALL   090
.................... 					break; 
02A2:  GOTO   2A7
.................... 				case _STOP_SCROLL: 
.................... 					stopScroll(); 
02A3:  CALL   0AF
.................... 					break; 
02A4:  GOTO   2A7
.................... 				default: 
.................... 					stopScroll(); 
02A5:  CALL   0AF
.................... 					break; 
02A6:  GOTO   2A7
02A7:  BSF    03.5
.................... 			} 
.................... 		} 
.................... 	} 
....................  
.................... /*	if (status == 0) 
.................... 	{ 
.................... 		// Es un comando 
.................... 		switch (recv) 
.................... 		{ 
.................... 			// SCREEN parameters left 
.................... 			case _SET_SCREEN: 
.................... 				status = PARAM_SET_SCREEN; 
.................... 				buffer_idx = 0; 
.................... 				break; 
.................... 			case _SET_COL: 
.................... 				status = PARAM_SET_COL; 
.................... 				break; 
.................... 			// No parameters 
.................... 			case _PONG: 
.................... 				pong(); 
.................... 				break; 
.................... 			case _GET_SCREEN: 
.................... 				getScreen(); 
.................... 				break; 
.................... 			case _GET_COL: 
.................... 				get_col(); 
.................... 				break; 
.................... 			default: 
.................... 				break; 
.................... 		} 
.................... 	} 
.................... 	else if (PARAM_SET_SCREEN == status) 
.................... 	{ 
.................... 		// Es un dato 
.................... 		if (buffer_idx >= SCREEN) 
.................... 		{ 
.................... 			// Buffer full -> flush to screen 
.................... 			setScreen(buffer); 
.................... 			buffer_idx = 0; 
.................... 			status = _COMMAND_BASE; 
.................... 		} 
.................... 		else 
.................... 			buffer[buffer_idx++] = recv; 
.................... 	} 
.................... */ 
.................... 	//enable_interrupts(GLOBAL); 
.................... 	return; 
.................... } 
....................  
02A8:  BCF    03.5
02A9:  BCF    0C.5
02AA:  BCF    0A.3
02AB:  BCF    0A.4
02AC:  GOTO   023
.................... #INT_RTCC 
.................... void clock(void) 
.................... { 
.................... 	LINK_DIS 
02AD:  BSF    03.5
02AE:  BCF    08.2
02AF:  BCF    03.5
02B0:  BCF    08.2
.................... /* 
.................... 	if(0 == (--int_ping_count)) 
.................... 	{ 
.................... 		ping(); 
.................... 		int_ping_count = ping_count; 
.................... 		if (0 == do_reset--) 
.................... 		{ 
.................... 			printf("\r\n# Ping timeout - check drivers#\r\n"); 
.................... 			reset_cpu(); 
.................... 		} 
.................... 	} 
.................... */ 
.................... 	if((scroll == ENABLED) && (0 == (--int_count))) 
02B1:  DECFSZ 5D,W
02B2:  GOTO   416
02B3:  DECFSZ 5A,F
02B4:  GOTO   416
.................... 	{ 
.................... 		switch (scroll_type) 
.................... 		{ 
02B5:  MOVF   5E,W
02B6:  XORLW  01
02B7:  BTFSC  03.2
02B8:  GOTO   2CF
02B9:  XORLW  03
02BA:  BTFSC  03.2
02BB:  GOTO   2F6
02BC:  XORLW  01
02BD:  BTFSC  03.2
02BE:  GOTO   32A
02BF:  XORLW  07
02C0:  BTFSC  03.2
02C1:  GOTO   344
02C2:  XORLW  01
02C3:  BTFSC  03.2
02C4:  GOTO   35C
02C5:  XORLW  03
02C6:  BTFSC  03.2
02C7:  GOTO   39F
02C8:  XORLW  01
02C9:  BTFSC  03.2
02CA:  GOTO   3E2
02CB:  XORLW  0F
02CC:  BTFSC  03.2
02CD:  GOTO   3FA
02CE:  GOTO   412
.................... 			case SCROLL_RIGHT: 
.................... 				scrollRight(); 
.................... 				break; 
*
02F5:  GOTO   414
.................... 			case SCROLL_LEFT: 
.................... 				scrollLeft(); 
.................... 				break; 
*
0328:  BCF    03.5
0329:  GOTO   414
.................... 			case SCROLL_UP: 
.................... 				scrollUp(); 
.................... 				break; 
*
0342:  BCF    03.5
0343:  GOTO   414
.................... 			case SCROLL_DOWN: 
.................... 				scrollDown(); 
.................... 				break; 
*
035A:  BCF    03.5
035B:  GOTO   414
.................... 			case SCROLL_RIGHT_CARRY: 
.................... 				scrollRightCarry(); 
.................... 				break; 
*
039E:  GOTO   414
.................... 			case SCROLL_LEFT_CARRY: 
.................... 				scrollLeftCarry(); 
.................... 				break; 
*
03E0:  BCF    03.5
03E1:  GOTO   414
.................... 			case SCROLL_UP_CARRY: 
.................... 				scrollUpCarry(); 
.................... 				break; 
*
03F8:  BCF    03.5
03F9:  GOTO   414
.................... 			case SCROLL_DOWN_CARRY: 
.................... 				scrollDownCarry(); 
.................... 				break; 
*
0410:  BCF    03.5
0411:  GOTO   414
.................... 			default: 
.................... 				stopScroll(); 
0412:  CALL   0AF
.................... 				break; 
0413:  GOTO   414
.................... 		} 
.................... 		int_count = timer_count; 
0414:  MOVF   59,W
0415:  MOVWF  5A
.................... 	} 
.................... } 
....................  
.................... /* MAIN */ 
0416:  BCF    0B.2
0417:  BCF    0A.3
0418:  BCF    0A.4
0419:  GOTO   023
.................... void main(void) 
.................... { 
*
04BA:  CLRF   04
04BB:  BCF    03.7
04BC:  MOVLW  1F
04BD:  ANDWF  03,F
04BE:  MOVLW  0A
04BF:  BSF    03.5
04C0:  MOVWF  19
04C1:  MOVLW  A6
04C2:  MOVWF  18
04C3:  MOVLW  90
04C4:  BCF    03.5
04C5:  MOVWF  18
04C6:  BSF    03.5
04C7:  BSF    1F.0
04C8:  BSF    1F.1
04C9:  BSF    1F.2
04CA:  BCF    1F.3
.................... 	int i; 
.................... 	unsigned byte alive = 0; 
*
050D:  BSF    03.5
050E:  CLRF   51
....................  
.................... 	set_tris_a(0x00); 
050F:  MOVLW  00
0510:  MOVWF  05
.................... 	set_tris_b(0x00); 
0511:  MOVWF  06
.................... 	set_tris_d(0x00); 
0512:  MOVWF  08
....................  
.................... 	output_a(0x00); 
0513:  CLRF   05
0514:  BCF    03.5
0515:  CLRF   05
.................... 	output_b(0xFF); 
0516:  BSF    03.5
0517:  CLRF   06
0518:  MOVLW  FF
0519:  BCF    03.5
051A:  MOVWF  06
.................... 	output_d(0x00); 
051B:  BSF    03.5
051C:  CLRF   08
051D:  BCF    03.5
051E:  CLRF   08
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
051F:  BSF    03.5
0520:  CLRF   50
0521:  MOVF   50,W
0522:  SUBLW  2F
0523:  BTFSS  03.0
0524:  GOTO   52C
.................... 		buffer[i] = 0; 
0525:  MOVLW  A0
0526:  ADDWF  50,W
0527:  MOVWF  04
0528:  BCF    03.7
0529:  CLRF   00
052A:  INCF   50,F
052B:  GOTO   521
....................  
.................... 	status = 0; //means waiting for a command 
052C:  BCF    03.5
052D:  CLRF   62
.................... 	// scroll? 
.................... 	scroll = DISABLED; 
052E:  CLRF   5D
.................... 	scroll_type = SCROLL_NONE; 
052F:  CLRF   5E
.................... 	// watch dog 
.................... 	do_reset = PING_PONG_COUNT; 
0530:  MOVLW  32
0531:  MOVWF  5F
.................... 	ping_count = DEFAULT_PING_COUNT; 
0532:  MOVLW  26
0533:  MOVWF  5C
.................... 	// reset timer0 
.................... 	set_rtcc(0); 
0534:  CLRF   01
.................... 	timer_div = RTCC_DIV_256; 
0535:  MOVLW  07
0536:  MOVWF  58
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0537:  MOVF   58,W
0538:  MOVWF  77
0539:  BTFSS  58.3
053A:  GOTO   544
053B:  MOVLW  07
053C:  CLRF   01
053D:  MOVLW  81
053E:  MOVWF  04
053F:  BCF    03.7
0540:  MOVF   00,W
0541:  ANDLW  C0
0542:  IORLW  0F
0543:  MOVWF  00
0544:  CLRWDT
0545:  MOVLW  81
0546:  MOVWF  04
0547:  MOVF   00,W
0548:  ANDLW  C0
0549:  IORWF  77,W
054A:  MOVWF  00
.................... 	//timer interrupt 
.................... 	enable_interrupts (INT_RTCC); 
054B:  BSF    0B.5
.................... 	//serial interrupt 
.................... 	enable_interrupts(INT_RDA); 
054C:  BSF    03.5
054D:  BSF    0C.5
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
054E:  MOVLW  C0
054F:  BCF    03.5
0550:  IORWF  0B,F
....................  
.................... 	printf("\r\nInitializing Fleds (ver %s)\r\n", _VERSION_); 
0551:  BSF    03.5
0552:  CLRF   52
0553:  MOVF   52,W
0554:  BCF    03.5
0555:  CALL   03C
0556:  BSF    03.5
0557:  INCF   52,F
0558:  MOVWF  77
0559:  BCF    03.5
055A:  BTFSS  0C.4
055B:  GOTO   55A
055C:  MOVWF  19
055D:  MOVLW  1A
055E:  BSF    03.5
055F:  SUBWF  52,W
0560:  BTFSS  03.2
0561:  GOTO   553
0562:  CLRF   53
0563:  MOVF   53,W
0564:  BCF    03.5
0565:  CALL   060
0566:  IORLW  00
0567:  BTFSC  03.2
0568:  GOTO   572
0569:  BSF    03.5
056A:  INCF   53,F
056B:  BCF    03.5
056C:  BTFSS  0C.4
056D:  GOTO   56C
056E:  MOVWF  19
056F:  BSF    03.5
0570:  GOTO   563
0571:  BCF    03.5
0572:  MOVLW  29
0573:  BTFSS  0C.4
0574:  GOTO   573
0575:  MOVWF  19
0576:  MOVLW  0D
0577:  BTFSS  0C.4
0578:  GOTO   577
0579:  MOVWF  19
057A:  MOVLW  0A
057B:  BTFSS  0C.4
057C:  GOTO   57B
057D:  MOVWF  19
....................  
....................  
.................... 	clear(); 
057E:  GOTO   41A
....................  
.................... 	set_col(0); 
057F:  BSF    03.5
0580:  CLRF   53
0581:  BCF    03.5
0582:  CALL   454
.................... 	while(1) 
.................... 	{ 
.................... 		actual_col = 0; 
0583:  CLRF   60
.................... 		for (i = 0; i < SCREEN; i+=3) 
0584:  BSF    03.5
0585:  CLRF   50
0586:  MOVF   50,W
0587:  SUBLW  2F
0588:  BTFSS  03.0
0589:  GOTO   5B8
.................... 		{ 
.................... 			COL_DIS 
058A:  BCF    08.1
058B:  BCF    03.5
058C:  BSF    08.1
.................... 			set_red(matrix[i]); 
058D:  MOVLW  28
058E:  BSF    03.5
058F:  ADDWF  50,W
0590:  MOVWF  04
0591:  BCF    03.7
0592:  MOVF   00,W
0593:  MOVWF  52
0594:  MOVWF  53
0595:  BCF    03.5
0596:  GOTO   469
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_green(matrix[i+1]); 
0597:  MOVLW  01
0598:  BSF    03.5
0599:  ADDWF  50,W
059A:  ADDLW  28
059B:  MOVWF  04
059C:  BCF    03.7
059D:  MOVF   00,W
059E:  MOVWF  53
059F:  MOVWF  54
05A0:  BCF    03.5
05A1:  GOTO   484
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_blue(matrix[i+2]); 
05A2:  MOVLW  02
05A3:  BSF    03.5
05A4:  ADDWF  50,W
05A5:  ADDLW  28
05A6:  MOVWF  04
05A7:  BCF    03.7
05A8:  MOVF   00,W
05A9:  MOVWF  53
05AA:  MOVWF  54
05AB:  BCF    03.5
05AC:  GOTO   49F
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_col(actual_col++); 
05AD:  MOVF   60,W
05AE:  INCF   60,F
05AF:  BSF    03.5
05B0:  MOVWF  52
05B1:  MOVWF  53
05B2:  BCF    03.5
05B3:  CALL   454
.................... 		} 
05B4:  MOVLW  03
05B5:  BSF    03.5
05B6:  ADDWF  50,F
05B7:  GOTO   586
.................... 		if (0 == alive) 
05B8:  MOVF   51,F
05B9:  BTFSS  03.2
05BA:  GOTO   5BF
.................... 			STATUS_ENA 
05BB:  BCF    08.3
05BC:  BCF    03.5
05BD:  BSF    08.3
05BE:  BSF    03.5
.................... 		if (128 == alive++) 
05BF:  MOVF   51,W
05C0:  INCF   51,F
05C1:  SUBLW  80
05C2:  BTFSS  03.2
05C3:  GOTO   5C8
.................... 			STATUS_DIS 
05C4:  BCF    08.3
05C5:  BCF    03.5
05C6:  BCF    08.3
05C7:  BSF    03.5
.................... 	} 
05C8:  BCF    03.5
05C9:  GOTO   583
....................  
....................  	return; 
.................... } 
....................  
.................... /* LEDS */ 
.................... void set_col(byte col) 
.................... { 
05CA:  SLEEP
.................... 	if (col < 16) 
*
0454:  BSF    03.5
0455:  MOVF   53,W
0456:  SUBLW  0F
0457:  BTFSS  03.0
0458:  GOTO   467
.................... 	{ 
.................... 		output_a(col); 
0459:  CLRF   05
045A:  MOVF   53,W
045B:  BCF    03.5
045C:  MOVWF  05
.................... 		COL_ENA 
045D:  BSF    03.5
045E:  BCF    08.1
045F:  BCF    03.5
0460:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
0461:  MOVLW  01
0462:  BSF    03.5
0463:  MOVWF  54
0464:  BCF    03.5
0465:  GOTO   43A
0466:  BSF    03.5
.................... 		//COL_DIS 
.................... 	} 
.................... 	return; 
.................... } 
0467:  BCF    03.5
0468:  RETLW  00
....................  
.................... void get_col(void) 
.................... { 
.................... 	putchar('<'); 
.................... 	putchar(actual_col); 
.................... 	putchar('>'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
041A:  BSF    03.5
041B:  BCF    08.7
041C:  BCF    03.5
041D:  BSF    08.7
.................... 	G_ENA 
041E:  BSF    03.5
041F:  BCF    08.6
0420:  BCF    03.5
0421:  BSF    08.6
.................... 	B_ENA 
0422:  BSF    03.5
0423:  BCF    08.5
0424:  BCF    03.5
0425:  BSF    08.5
.................... 	output_b(0xFF); 
0426:  BSF    03.5
0427:  CLRF   06
0428:  MOVLW  FF
0429:  BCF    03.5
042A:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
042B:  BSF    03.5
042C:  BCF    08.7
042D:  BCF    03.5
042E:  BCF    08.7
.................... 	G_DIS 
042F:  BSF    03.5
0430:  BCF    08.6
0431:  BCF    03.5
0432:  BCF    08.6
.................... 	B_DIS 
0433:  BSF    03.5
0434:  BCF    08.5
0435:  BCF    03.5
0436:  BCF    08.5
.................... 	return; 
.................... } 
0437:  BCF    0A.3
0438:  BCF    0A.4
0439:  GOTO   57F (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
*
0469:  BSF    03.5
046A:  BCF    08.6
046B:  BCF    03.5
046C:  BCF    08.6
.................... 	B_DIS 
046D:  BSF    03.5
046E:  BCF    08.5
046F:  BCF    03.5
0470:  BCF    08.5
.................... 	output_b(0xFF - color); 
0471:  BSF    03.5
0472:  MOVF   53,W
0473:  SUBLW  FF
0474:  MOVWF  54
0475:  CLRF   06
0476:  MOVF   54,W
0477:  BCF    03.5
0478:  MOVWF  06
.................... 	R_ENA 
0479:  BSF    03.5
047A:  BCF    08.7
047B:  BCF    03.5
047C:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
047D:  BSF    03.5
047E:  BCF    08.7
047F:  BCF    03.5
0480:  BCF    08.7
.................... 	return; 
.................... } 
0481:  BCF    0A.3
0482:  BCF    0A.4
0483:  GOTO   597 (RETURN)
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
0484:  BSF    03.5
0485:  BCF    08.6
0486:  BCF    03.5
0487:  BCF    08.6
.................... 	B_DIS 
0488:  BSF    03.5
0489:  BCF    08.5
048A:  BCF    03.5
048B:  BCF    08.5
.................... 	output_b(0xFF - color); 
048C:  BSF    03.5
048D:  MOVF   54,W
048E:  SUBLW  FF
048F:  MOVWF  55
0490:  CLRF   06
0491:  MOVF   55,W
0492:  BCF    03.5
0493:  MOVWF  06
.................... 	G_ENA 
0494:  BSF    03.5
0495:  BCF    08.6
0496:  BCF    03.5
0497:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
0498:  BSF    03.5
0499:  BCF    08.6
049A:  BCF    03.5
049B:  BCF    08.6
.................... 	return; 
.................... } 
049C:  BCF    0A.3
049D:  BCF    0A.4
049E:  GOTO   5A2 (RETURN)
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
049F:  BSF    03.5
04A0:  BCF    08.6
04A1:  BCF    03.5
04A2:  BCF    08.6
.................... 	B_DIS 
04A3:  BSF    03.5
04A4:  BCF    08.5
04A5:  BCF    03.5
04A6:  BCF    08.5
.................... 	output_b(0xFF - color);	 
04A7:  BSF    03.5
04A8:  MOVF   54,W
04A9:  SUBLW  FF
04AA:  MOVWF  55
04AB:  CLRF   06
04AC:  MOVF   55,W
04AD:  BCF    03.5
04AE:  MOVWF  06
.................... 	B_ENA 
04AF:  BSF    03.5
04B0:  BCF    08.5
04B1:  BCF    03.5
04B2:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
04B3:  BSF    03.5
04B4:  BCF    08.5
04B5:  BCF    03.5
04B6:  BCF    08.5
.................... 	return; 
.................... } 
04B7:  BCF    0A.3
04B8:  BCF    0A.4
04B9:  GOTO   5AD (RETURN)
....................  
.................... void scrollUpCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03E2:  BSF    03.5
03E3:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
03E4:  CLRF   56
03E5:  MOVF   56,W
03E6:  SUBLW  2F
03E7:  BTFSS  03.0
03E8:  GOTO   3F8
.................... 		rotate_right(matrix + i, 1); 
03E9:  MOVLW  28
03EA:  ADDWF  56,W
03EB:  MOVWF  57
03EC:  CLRF   58
03ED:  BTFSC  03.0
03EE:  INCF   58,F
03EF:  MOVF   57,W
03F0:  MOVWF  04
03F1:  BCF    03.7
03F2:  BTFSC  58.0
03F3:  BSF    03.7
03F4:  RRF    00,W
03F5:  RRF    00,F
03F6:  INCF   56,F
03F7:  GOTO   3E5
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollUp(void) 
.................... { 
.................... 	byte i = 0; 
*
032A:  BSF    03.5
032B:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
032C:  CLRF   56
032D:  MOVF   56,W
032E:  SUBLW  2F
032F:  BTFSS  03.0
0330:  GOTO   342
.................... 		shift_right(matrix + i, 1, 0); 
0331:  MOVLW  28
0332:  ADDWF  56,W
0333:  MOVWF  57
0334:  CLRF   58
0335:  BTFSC  03.0
0336:  INCF   58,F
0337:  MOVF   57,W
0338:  MOVWF  04
0339:  BCF    03.7
033A:  BTFSC  58.0
033B:  BSF    03.7
033C:  MOVLW  00
033D:  ADDWF  04,F
033E:  BCF    03.0
033F:  RRF    00,F
0340:  INCF   56,F
0341:  GOTO   32D
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDownCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03FA:  BSF    03.5
03FB:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
03FC:  CLRF   56
03FD:  MOVF   56,W
03FE:  SUBLW  2F
03FF:  BTFSS  03.0
0400:  GOTO   410
.................... 		rotate_left(matrix + i, 1); 
0401:  MOVLW  28
0402:  ADDWF  56,W
0403:  MOVWF  57
0404:  CLRF   58
0405:  BTFSC  03.0
0406:  INCF   58,F
0407:  MOVF   57,W
0408:  MOVWF  04
0409:  BCF    03.7
040A:  BTFSC  58.0
040B:  BSF    03.7
040C:  RLF    00,W
040D:  RLF    00,F
040E:  INCF   56,F
040F:  GOTO   3FD
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDown(void) 
.................... { 
.................... 	byte i = 0; 
*
0344:  BSF    03.5
0345:  CLRF   56
.................... 	for(i = 0; i < SCREEN; i++) 
0346:  CLRF   56
0347:  MOVF   56,W
0348:  SUBLW  2F
0349:  BTFSS  03.0
034A:  GOTO   35A
.................... 		shift_left(matrix + i, 1, 0); 
034B:  MOVLW  28
034C:  ADDWF  56,W
034D:  MOVWF  57
034E:  CLRF   58
034F:  BTFSC  03.0
0350:  INCF   58,F
0351:  MOVF   57,W
0352:  MOVWF  04
0353:  BCF    03.7
0354:  BTFSC  58.0
0355:  BSF    03.7
0356:  BCF    03.0
0357:  RLF    00,F
0358:  INCF   56,F
0359:  GOTO   347
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeft(void) 
.................... { 
.................... 	byte i = 0; 
*
02F6:  BSF    03.5
02F7:  CLRF   56
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
02F8:  CLRF   56
02F9:  MOVF   56,W
02FA:  SUBLW  2C
02FB:  BTFSS  03.0
02FC:  GOTO   317
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
02FD:  MOVLW  28
02FE:  ADDWF  56,W
02FF:  MOVWF  78
0300:  CLRF   7A
0301:  BTFSC  03.0
0302:  INCF   7A,F
0303:  MOVF   78,W
0304:  MOVWF  57
0305:  MOVF   7A,W
0306:  MOVWF  58
0307:  MOVLW  03
0308:  ADDWF  56,W
0309:  ADDLW  28
030A:  MOVWF  04
030B:  BCF    03.7
030C:  MOVF   00,W
030D:  MOVWF  5A
030E:  MOVF   57,W
030F:  MOVWF  04
0310:  BCF    03.7
0311:  BTFSC  58.0
0312:  BSF    03.7
0313:  MOVF   5A,W
0314:  MOVWF  00
.................... 	} 
0315:  INCF   56,F
0316:  GOTO   2F9
.................... 	// clear last column 
.................... 	matrix[i] = 0; 
0317:  MOVLW  28
0318:  ADDWF  56,W
0319:  MOVWF  04
031A:  BCF    03.7
031B:  CLRF   00
.................... 	matrix[i+1] = 0; 
031C:  MOVLW  01
031D:  ADDWF  56,W
031E:  ADDLW  28
031F:  MOVWF  04
0320:  BCF    03.7
0321:  CLRF   00
.................... 	matrix[i+2] = 0; 
0322:  MOVLW  02
0323:  ADDWF  56,W
0324:  ADDLW  28
0325:  MOVWF  04
0326:  BCF    03.7
0327:  CLRF   00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeftCarry(void) 
.................... { 
.................... 	byte i = 0, r, g, b; 
*
039F:  BSF    03.5
03A0:  CLRF   56
....................  
.................... 	// Backup first column 
.................... 	r = matrix[0]; 
03A1:  BCF    03.5
03A2:  MOVF   28,W
03A3:  BSF    03.5
03A4:  MOVWF  57
.................... 	g = matrix[1]; 
03A5:  BCF    03.5
03A6:  MOVF   29,W
03A7:  BSF    03.5
03A8:  MOVWF  58
.................... 	b = matrix[2]; 
03A9:  BCF    03.5
03AA:  MOVF   2A,W
03AB:  BSF    03.5
03AC:  MOVWF  59
....................  
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
03AD:  CLRF   56
03AE:  MOVF   56,W
03AF:  SUBLW  2C
03B0:  BTFSS  03.0
03B1:  GOTO   3CC
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
03B2:  MOVLW  28
03B3:  ADDWF  56,W
03B4:  MOVWF  78
03B5:  CLRF   7A
03B6:  BTFSC  03.0
03B7:  INCF   7A,F
03B8:  MOVF   78,W
03B9:  MOVWF  5A
03BA:  MOVF   7A,W
03BB:  MOVWF  5B
03BC:  MOVLW  03
03BD:  ADDWF  56,W
03BE:  ADDLW  28
03BF:  MOVWF  04
03C0:  BCF    03.7
03C1:  MOVF   00,W
03C2:  MOVWF  5D
03C3:  MOVF   5A,W
03C4:  MOVWF  04
03C5:  BCF    03.7
03C6:  BTFSC  5B.0
03C7:  BSF    03.7
03C8:  MOVF   5D,W
03C9:  MOVWF  00
.................... 	} 
03CA:  INCF   56,F
03CB:  GOTO   3AE
.................... 	// set last column 
.................... 	matrix[i] = r; 
03CC:  MOVLW  28
03CD:  ADDWF  56,W
03CE:  MOVWF  04
03CF:  BCF    03.7
03D0:  MOVF   57,W
03D1:  MOVWF  00
.................... 	matrix[i+1] = g; 
03D2:  MOVLW  01
03D3:  ADDWF  56,W
03D4:  ADDLW  28
03D5:  MOVWF  04
03D6:  BCF    03.7
03D7:  MOVF   58,W
03D8:  MOVWF  00
.................... 	matrix[i+2] = b; 
03D9:  MOVLW  02
03DA:  ADDWF  56,W
03DB:  ADDLW  28
03DC:  MOVWF  04
03DD:  BCF    03.7
03DE:  MOVF   59,W
03DF:  MOVWF  00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRight(void) 
.................... { 
.................... 	byte i = SCREEN-1; 
*
02CF:  MOVLW  2F
02D0:  BSF    03.5
02D1:  MOVWF  56
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
02D2:  MOVWF  56
02D3:  MOVF   56,W
02D4:  SUBLW  02
02D5:  BTFSC  03.0
02D6:  GOTO   2F1
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
02D7:  MOVLW  28
02D8:  ADDWF  56,W
02D9:  MOVWF  78
02DA:  CLRF   7A
02DB:  BTFSC  03.0
02DC:  INCF   7A,F
02DD:  MOVF   78,W
02DE:  MOVWF  57
02DF:  MOVF   7A,W
02E0:  MOVWF  58
02E1:  MOVLW  03
02E2:  SUBWF  56,W
02E3:  ADDLW  28
02E4:  MOVWF  04
02E5:  BCF    03.7
02E6:  MOVF   00,W
02E7:  MOVWF  5A
02E8:  MOVF   57,W
02E9:  MOVWF  04
02EA:  BCF    03.7
02EB:  BTFSC  58.0
02EC:  BSF    03.7
02ED:  MOVF   5A,W
02EE:  MOVWF  00
.................... 	} 
02EF:  DECF   56,F
02F0:  GOTO   2D3
.................... 	// set last column 
.................... 	matrix[0] = 0; 
02F1:  BCF    03.5
02F2:  CLRF   28
.................... 	matrix[1] = 0; 
02F3:  CLRF   29
.................... 	matrix[2] = 0; 
02F4:  CLRF   2A
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRightCarry(void) 
.................... { 
.................... 	byte i = SCREEN-1, r, g, b; 
*
035C:  MOVLW  2F
035D:  BSF    03.5
035E:  MOVWF  56
....................  
.................... 	// Backup first column 
.................... 	r = matrix[i-2]; 
035F:  MOVLW  02
0360:  SUBWF  56,W
0361:  ADDLW  28
0362:  MOVWF  04
0363:  BCF    03.7
0364:  MOVF   00,W
0365:  MOVWF  57
.................... 	g = matrix[i-1]; 
0366:  MOVLW  01
0367:  SUBWF  56,W
0368:  ADDLW  28
0369:  MOVWF  04
036A:  BCF    03.7
036B:  MOVF   00,W
036C:  MOVWF  58
.................... 	b = matrix[i]; 
036D:  MOVLW  28
036E:  ADDWF  56,W
036F:  MOVWF  04
0370:  BCF    03.7
0371:  MOVF   00,W
0372:  MOVWF  59
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
0373:  MOVLW  2F
0374:  MOVWF  56
0375:  MOVF   56,W
0376:  SUBLW  02
0377:  BTFSC  03.0
0378:  GOTO   393
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
0379:  MOVLW  28
037A:  ADDWF  56,W
037B:  MOVWF  78
037C:  CLRF   7A
037D:  BTFSC  03.0
037E:  INCF   7A,F
037F:  MOVF   78,W
0380:  MOVWF  5A
0381:  MOVF   7A,W
0382:  MOVWF  5B
0383:  MOVLW  03
0384:  SUBWF  56,W
0385:  ADDLW  28
0386:  MOVWF  04
0387:  BCF    03.7
0388:  MOVF   00,W
0389:  MOVWF  5D
038A:  MOVF   5A,W
038B:  MOVWF  04
038C:  BCF    03.7
038D:  BTFSC  5B.0
038E:  BSF    03.7
038F:  MOVF   5D,W
0390:  MOVWF  00
.................... 	} 
0391:  DECF   56,F
0392:  GOTO   375
.................... 	// set last column 
.................... 	matrix[0] = r; 
0393:  MOVF   57,W
0394:  BCF    03.5
0395:  MOVWF  28
.................... 	matrix[1] = g; 
0396:  BSF    03.5
0397:  MOVF   58,W
0398:  BCF    03.5
0399:  MOVWF  29
.................... 	matrix[2] = b; 
039A:  BSF    03.5
039B:  MOVF   59,W
039C:  BCF    03.5
039D:  MOVWF  2A
....................  
.................... 	return; 
.................... } 
....................  
.................... void clearScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0110:  CLRF   57
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
0111:  CLRF   57
0112:  MOVF   57,W
0113:  SUBLW  2F
0114:  BTFSS  03.0
0115:  GOTO   11D
.................... 	{ 
.................... 		matrix[i] = 0; 
0116:  MOVLW  28
0117:  ADDWF  57,W
0118:  MOVWF  04
0119:  BCF    03.7
011A:  CLRF   00
.................... 	} 
011B:  INCF   57,F
011C:  GOTO   112
.................... 	return; 
.................... } 
....................  
.................... void setScreen(byte * buffer) 
.................... { 
.................... 	byte i = 0; 
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
.................... 	{ 
.................... 		matrix[i] = buffer[i]; 
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void getScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0121:  CLRF   57
.................... 	 
.................... 	putchar('['); 
0122:  MOVLW  5B
0123:  BCF    03.5
0124:  BTFSS  0C.4
0125:  GOTO   124
0126:  MOVWF  19
.................... 	for(i = 0; i < SCREEN; i++) 
0127:  BSF    03.5
0128:  CLRF   57
0129:  MOVF   57,W
012A:  SUBLW  2F
012B:  BTFSS  03.0
012C:  GOTO   13A
.................... 	{ 
.................... 		putchar(matrix[i]); 
012D:  MOVLW  28
012E:  ADDWF  57,W
012F:  MOVWF  04
0130:  BCF    03.7
0131:  MOVF   00,W
0132:  MOVWF  58
0133:  BCF    03.5
0134:  BTFSS  0C.4
0135:  GOTO   134
0136:  MOVWF  19
.................... 	} 
0137:  BSF    03.5
0138:  INCF   57,F
0139:  GOTO   129
.................... 	putchar(']'); 
013A:  MOVLW  5D
013B:  BCF    03.5
013C:  BTFSS  0C.4
013D:  GOTO   13C
013E:  MOVWF  19
013F:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void stopScroll(void) 
.................... { 
.................... 	scroll = DISABLED; 
*
00AF:  CLRF   5D
.................... 	return; 
.................... } 
00B0:  RETLW  00
....................  
.................... void startScroll(void) 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
*
0090:  BCF    0B.6
0091:  BCF    0B.7
0092:  BTFSC  0B.7
0093:  GOTO   091
.................... 	scroll = ENABLED; 
0094:  MOVLW  01
0095:  MOVWF  5D
.................... 	set_rtcc(0); 
0096:  CLRF   01
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0097:  MOVF   58,W
0098:  MOVWF  77
0099:  BTFSS  58.3
009A:  GOTO   0A4
009B:  MOVLW  07
009C:  CLRF   01
009D:  MOVLW  81
009E:  MOVWF  04
009F:  BCF    03.7
00A0:  MOVF   00,W
00A1:  ANDLW  C0
00A2:  IORLW  0F
00A3:  MOVWF  00
00A4:  CLRWDT
00A5:  MOVLW  81
00A6:  MOVWF  04
00A7:  MOVF   00,W
00A8:  ANDLW  C0
00A9:  IORWF  77,W
00AA:  MOVWF  00
.................... 	enable_interrupts(INT_RTCC); 
00AB:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
00AC:  MOVLW  C0
00AD:  IORWF  0B,F
.................... 	return; 
.................... } 
00AE:  RETLW  00
....................  
.................... void setUARTSpeed(byte speed) 
.................... { 
.................... 	switch(speed) 
.................... 	{ 
*
014A:  MOVF   58,W
014B:  BCF    03.5
014C:  BTFSC  03.2
014D:  GOTO   164
014E:  XORLW  01
014F:  BTFSC  03.2
0150:  GOTO   16A
0151:  XORLW  03
0152:  BTFSC  03.2
0153:  GOTO   170
0154:  XORLW  01
0155:  BTFSC  03.2
0156:  GOTO   176
0157:  XORLW  07
0158:  BTFSC  03.2
0159:  GOTO   17C
015A:  XORLW  01
015B:  BTFSC  03.2
015C:  GOTO   182
015D:  XORLW  03
015E:  BTFSC  03.2
015F:  GOTO   188
0160:  XORLW  01
0161:  BTFSC  03.2
0162:  GOTO   18E
0163:  GOTO   195
.................... 		case B1200: 
.................... 			setup_uart(1200); 
0164:  MOVLW  FF
0165:  BSF    03.5
0166:  MOVWF  19
0167:  MOVLW  A2
0168:  MOVWF  18
.................... 			break; 
0169:  GOTO   19B
.................... 		case B2400: 
.................... 			setup_uart(2400); 
016A:  MOVLW  81
016B:  BSF    03.5
016C:  MOVWF  19
016D:  MOVLW  A2
016E:  MOVWF  18
.................... 			break; 
016F:  GOTO   19B
.................... 		case B4800: 
.................... 			setup_uart(4800); 
0170:  MOVLW  40
0171:  BSF    03.5
0172:  MOVWF  19
0173:  MOVLW  A2
0174:  MOVWF  18
.................... 			break; 
0175:  GOTO   19B
.................... 		case B9600: 
.................... 			setup_uart(9600); 
0176:  MOVLW  81
0177:  BSF    03.5
0178:  MOVWF  19
0179:  MOVLW  A6
017A:  MOVWF  18
.................... 			break; 
017B:  GOTO   19B
.................... 		case B19200: 
.................... 			setup_uart(19200); 
017C:  MOVLW  40
017D:  BSF    03.5
017E:  MOVWF  19
017F:  MOVLW  A6
0180:  MOVWF  18
.................... 			break; 
0181:  GOTO   19B
.................... 		case B38400: 
.................... 			setup_uart(38400); 
0182:  MOVLW  20
0183:  BSF    03.5
0184:  MOVWF  19
0185:  MOVLW  A6
0186:  MOVWF  18
.................... 			break; 
0187:  GOTO   19B
.................... 		case B57600: 
.................... 			setup_uart(57600); 
0188:  MOVLW  15
0189:  BSF    03.5
018A:  MOVWF  19
018B:  MOVLW  A6
018C:  MOVWF  18
.................... 			break; 
018D:  GOTO   19B
.................... 		case B115200: 
.................... 			setup_uart(115200); 
018E:  MOVLW  0A
018F:  BSF    03.5
0190:  MOVWF  19
0191:  MOVLW  A6
0192:  MOVWF  18
.................... 			break; 
0193:  GOTO   19B
0194:  BCF    03.5
.................... 		default: 
.................... 			setup_uart(4800); 
0195:  MOVLW  40
0196:  BSF    03.5
0197:  MOVWF  19
0198:  MOVLW  A2
0199:  MOVWF  18
.................... 			break; 
019A:  GOTO   19B
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void setScrollFreq(byte freq) 
.................... { 
.................... 	//global interrupt 
.................... 	disable_interrupts(GLOBAL); 
*
01A5:  BCF    03.5
01A6:  BCF    0B.6
01A7:  BCF    0B.7
01A8:  BTFSC  0B.7
01A9:  GOTO   1A7
.................... 	set_rtcc(0); 
01AA:  CLRF   01
....................  
.................... 	switch(freq) 
.................... 	{ 
01AB:  BSF    03.5
01AC:  MOVF   58,W
01AD:  BCF    03.5
01AE:  BTFSC  03.2
01AF:  GOTO   1DE
01B0:  XORLW  01
01B1:  BTFSC  03.2
01B2:  GOTO   1E5
01B3:  XORLW  03
01B4:  BTFSC  03.2
01B5:  GOTO   1EC
01B6:  XORLW  01
01B7:  BTFSC  03.2
01B8:  GOTO   1F3
01B9:  XORLW  07
01BA:  BTFSC  03.2
01BB:  GOTO   1FA
01BC:  XORLW  01
01BD:  BTFSC  03.2
01BE:  GOTO   200
01BF:  XORLW  03
01C0:  BTFSC  03.2
01C1:  GOTO   207
01C2:  XORLW  01
01C3:  BTFSC  03.2
01C4:  GOTO   20E
01C5:  XORLW  0F
01C6:  BTFSC  03.2
01C7:  GOTO   215
01C8:  XORLW  01
01C9:  BTFSC  03.2
01CA:  GOTO   21C
01CB:  XORLW  03
01CC:  BTFSC  03.2
01CD:  GOTO   223
01CE:  XORLW  01
01CF:  BTFSC  03.2
01D0:  GOTO   22A
01D1:  XORLW  07
01D2:  BTFSC  03.2
01D3:  GOTO   231
01D4:  XORLW  01
01D5:  BTFSC  03.2
01D6:  GOTO   238
01D7:  XORLW  03
01D8:  BTFSC  03.2
01D9:  GOTO   23F
01DA:  XORLW  01
01DB:  BTFSC  03.2
01DC:  GOTO   246
01DD:  GOTO   24D
.................... 		case 0: 
.................... 			timer_div = RTCC_DIV_64; 
01DE:  MOVLW  05
01DF:  MOVWF  58
.................... 			timer_count = 1; 
01E0:  MOVLW  01
01E1:  MOVWF  59
.................... 			ping_count = 229; 
01E2:  MOVLW  E5
01E3:  MOVWF  5C
.................... 			break; 
01E4:  GOTO   254
.................... 		case 1: 
.................... 			timer_div = RTCC_DIV_128; 
01E5:  MOVLW  06
01E6:  MOVWF  58
.................... 			timer_count = 1; 
01E7:  MOVLW  01
01E8:  MOVWF  59
.................... 			ping_count = 115; 
01E9:  MOVLW  73
01EA:  MOVWF  5C
.................... 			break; 
01EB:  GOTO   254
.................... 		case 2: 
.................... 			timer_div = RTCC_DIV_64; 
01EC:  MOVLW  05
01ED:  MOVWF  58
.................... 			timer_count = 3; 
01EE:  MOVLW  03
01EF:  MOVWF  59
.................... 			ping_count = 230; 
01F0:  MOVLW  E6
01F1:  MOVWF  5C
.................... 			break; 
01F2:  GOTO   254
.................... 		case 3: 
.................... 			timer_div = RTCC_DIV_256; 
01F3:  MOVLW  07
01F4:  MOVWF  58
.................... 			timer_count = 1; 
01F5:  MOVLW  01
01F6:  MOVWF  59
.................... 			ping_count = 57; 
01F7:  MOVLW  39
01F8:  MOVWF  5C
.................... 			break; 
01F9:  GOTO   254
.................... 		case 4: 
.................... 			timer_div = RTCC_DIV_64; 
01FA:  MOVLW  05
01FB:  MOVWF  58
.................... 			timer_count = 5; 
01FC:  MOVWF  59
.................... 			ping_count = 229; 
01FD:  MOVLW  E5
01FE:  MOVWF  5C
.................... 			break; 
01FF:  GOTO   254
.................... 		case 5: 
.................... 			timer_div = RTCC_DIV_128; 
0200:  MOVLW  06
0201:  MOVWF  58
.................... 			timer_count = 3; 
0202:  MOVLW  03
0203:  MOVWF  59
.................... 			ping_count = 115; 
0204:  MOVLW  73
0205:  MOVWF  5C
.................... 			break; 
0206:  GOTO   254
.................... 		case 6: 
.................... 			timer_div = RTCC_DIV_64; 
0207:  MOVLW  05
0208:  MOVWF  58
.................... 			timer_count = 7; 
0209:  MOVLW  07
020A:  MOVWF  59
.................... 			ping_count = 231; 
020B:  MOVLW  E7
020C:  MOVWF  5C
.................... 			break; 
020D:  GOTO   254
.................... 		case 7: 
.................... 			timer_div = RTCC_DIV_256; 
020E:  MOVLW  07
020F:  MOVWF  58
.................... 			timer_count = 2; 
0210:  MOVLW  02
0211:  MOVWF  59
.................... 			ping_count = 57; 
0212:  MOVLW  39
0213:  MOVWF  5C
.................... 			break; 
0214:  GOTO   254
.................... 		case 8: 
.................... 			timer_div = RTCC_DIV_64; 
0215:  MOVLW  05
0216:  MOVWF  58
.................... 			timer_count = 9; 
0217:  MOVLW  09
0218:  MOVWF  59
.................... 			ping_count = 230; 
0219:  MOVLW  E6
021A:  MOVWF  5C
.................... 			break; 
021B:  GOTO   254
.................... 		case 9: 
.................... 			timer_div = RTCC_DIV_256; 
021C:  MOVLW  07
021D:  MOVWF  58
.................... 			timer_count = 3; 
021E:  MOVLW  03
021F:  MOVWF  59
.................... 			ping_count = 56; 
0220:  MOVLW  38
0221:  MOVWF  5C
.................... 			break; 
0222:  GOTO   254
.................... 		case 10: 
.................... 			timer_div = RTCC_DIV_64; 
0223:  MOVLW  05
0224:  MOVWF  58
.................... 			timer_count = 17; 
0225:  MOVLW  11
0226:  MOVWF  59
.................... 			ping_count = 230; 
0227:  MOVLW  E6
0228:  MOVWF  5C
.................... 			break; 
0229:  GOTO   254
.................... 		case 11: 
.................... 			timer_div = RTCC_DIV_256; 
022A:  MOVLW  07
022B:  MOVWF  58
.................... 			timer_count = 5; 
022C:  MOVLW  05
022D:  MOVWF  59
.................... 			ping_count = 56; 
022E:  MOVLW  38
022F:  MOVWF  5C
.................... 			break; 
0230:  GOTO   254
.................... 		case 12: 
.................... 			timer_div = RTCC_DIV_256; 
0231:  MOVLW  07
0232:  MOVWF  58
.................... 			timer_count = 8; 
0233:  MOVLW  08
0234:  MOVWF  59
.................... 			ping_count = 60; 
0235:  MOVLW  3C
0236:  MOVWF  5C
.................... 			break; 
0237:  GOTO   254
.................... 		case 13: 
.................... 			timer_div = RTCC_DIV_256; 
0238:  MOVLW  07
0239:  MOVWF  58
.................... 			timer_count = 9; 
023A:  MOVLW  09
023B:  MOVWF  59
.................... 			ping_count = 54; 
023C:  MOVLW  36
023D:  MOVWF  5C
.................... 			break; 
023E:  GOTO   254
.................... 		case 14: 
.................... 			timer_div = RTCC_DIV_256; 
023F:  MOVLW  07
0240:  MOVWF  58
.................... 			timer_count = 14; 
0241:  MOVLW  0E
0242:  MOVWF  59
.................... 			ping_count = 53; 
0243:  MOVLW  35
0244:  MOVWF  5C
.................... 			break; 
0245:  GOTO   254
.................... 		case 15: 
.................... 			timer_div = RTCC_DIV_256; 
0246:  MOVLW  07
0247:  MOVWF  58
.................... 			timer_count = 76; 
0248:  MOVLW  4C
0249:  MOVWF  59
.................... 			ping_count = 57; 
024A:  MOVLW  39
024B:  MOVWF  5C
.................... 			break; 
024C:  GOTO   254
.................... 		default: 
.................... 			timer_div = DEFAULT_TIMER_DIV; 
024D:  MOVLW  07
024E:  MOVWF  58
.................... 			timer_count = DEFAULT_TIMER_COUNT; 
024F:  MOVLW  4C
0250:  MOVWF  59
.................... 			ping_count = DEFAULT_PING_COUNT; 
0251:  MOVLW  26
0252:  MOVWF  5C
.................... 			break; 
0253:  GOTO   254
.................... 	} 
....................  
.................... 	// Reset counters 
.................... 	int_count = timer_count; 
0254:  MOVF   59,W
0255:  MOVWF  5A
.................... 	int_ping_count = ping_count; 
0256:  MOVF   5C,W
0257:  MOVWF  5B
....................  
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
0258:  MOVLW  C0
0259:  IORWF  0B,F
025A:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void ping(void) 
.................... { 
....................  
.................... 	putchar('?'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void pong(void) 
.................... { 
.................... 	// do not do reset! 
.................... 	do_reset = ping_count; 
....................  
.................... 	return; 
.................... } 

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG

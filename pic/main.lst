CCS PCM C Compiler, Version 4.023, 25097               27-Nov-08 16:41

               Filename: main.lst

               ROM used: 2253 words (28%)
                         Largest free fragment is 2048
               RAM used: 78 (21%) at main() level
                         89 (24%) worst case
               Stack:    5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   079
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   294
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   0AF
.................... #define _VERSION_ "0.52" 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT,NOPUT 
.................... #use delay(clock=20000000, restart_wdt) 
*
03F7:  MOVLW  69
03F8:  MOVWF  04
03F9:  BCF    03.7
03FA:  MOVF   00,W
03FB:  BTFSC  03.2
03FC:  GOTO   40E
03FD:  MOVLW  06
03FE:  MOVWF  78
03FF:  MOVLW  BF
0400:  MOVWF  77
0401:  CLRWDT
0402:  DECFSZ 77,F
0403:  GOTO   401
0404:  DECFSZ 78,F
0405:  GOTO   3FF
0406:  MOVLW  7A
0407:  MOVWF  77
0408:  DECFSZ 77,F
0409:  GOTO   408
040A:  GOTO   40B
040B:  CLRWDT
040C:  DECFSZ 00,F
040D:  GOTO   3FD
040E:  BCF    0A.3
040F:  BCF    0A.4
0410:  GOTO   421 (RETURN)
.................... #use rs232(baud=115200, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... /****** DEFINITIONS ******/ 
.................... typedef enum {B1200 = 0, B2400, B4800, B9600, B19200,  
.................... 				B38400, B57600, B115200} bouds; 
....................  
.................... typedef enum {SCROLL_NONE = 0, SCROLL_RIGHT, SCROLL_LEFT, 
.................... 			SCROLL_UP, SCROLL_DOWN, SCROLL_RIGHT_CARRY, 
.................... 			SCROLL_LEFT_CARRY, SCROLL_UP_CARRY, 
.................... 			SCROLL_DOWN_CARRY} scrolls; 
....................  
.................... #define _SCROLL_DOWN_CARRY		0 
.................... #define _SCROLL_DOWN			1 
.................... #define _SCROLL_UP_CARRY		2 
.................... #define _SCROLL_UP				3 
.................... #define _SCROLL_LEFT_CARRY		4 
.................... #define _SCROLL_LEFT			5 
.................... #define _SCROLL_RIGHT_CARRY		6 
.................... #define _SCROLL_RIGHT			7 
.................... #define _START_SCROLL			8 
.................... #define _STOP_SCROLL			9 
....................  
.................... #define DISABLED			0 
.................... #define ENABLED				(DISABLED + 1) 
....................  
.................... /* STATUS*/ 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... /* LEDS */ 
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define SET_74154_TIME		1 
.................... #define SET_74573_TIME		0 
.................... #define SCREEN_WIDTH		16 
.................... #define COLOR_COUNT			3 
.................... #define SCREEN				(COLOR_COUNT * SCREEN_WIDTH) 
....................  
.................... #define SET_ACTUAL_COLUMN(r,g,b) matrix[(actual_col * 3)]=r;matrix[(actual_col * 3) + 1]=g;matrix[(actual_col * 3) + 2]=b; 
....................  
.................... /* TIMER */ 
.................... // 76 && 256 -> 1Hz 
.................... #define DEFAULT_TIMER_COUNT	76 
.................... #define DEFAULT_TIMER_DIV	RTCC_DIV_256 
.................... #define DEFAULT_PING_COUNT	38 // ping every 500ms 
.................... #define PING_PONG_COUNT		50 
....................  
.................... /****** FUNCTIONS ******/ 
....................  
.................... /* LEDS */ 
.................... void clear(void); 
.................... void set_red(byte color); 
.................... void set_green(byte color); 
.................... void set_blue(byte color); 
.................... void set_col(byte col); 
.................... void get_col(void); 
.................... void scrollUp(void); 
.................... void scrollUpCarry(void); 
.................... void scrollDown(void); 
.................... void scrollDownCarry(void); 
.................... void scrollLeft(void); 
.................... void scrollLeftCarry(void); 
.................... void scrollRight(void); 
.................... void scrollRightCarry(void); 
.................... void setScreen(byte * buffer); 
.................... void getScreen(void); 
.................... void clearScreen(void); 
.................... void stopScroll(void); 
.................... void startScroll(void); 
.................... void setUARTSpeed(byte speed); 
.................... void setScrollFreq(byte freq); 
.................... void ping(void); 
.................... void pong(void); 
.................... void showSplashScreen(void); 
....................  
.................... /* TIMER */ 
.................... byte matrix[SCREEN]; 
....................  
.................... /****** IMPLEMENTATION ******/ 
.................... byte timer_div = DEFAULT_TIMER_DIV; 
*
088A:  MOVLW  07
088B:  BCF    03.5
088C:  MOVWF  59
.................... byte timer_count = DEFAULT_TIMER_COUNT; 
088D:  MOVLW  4C
088E:  MOVWF  5A
.................... byte int_count = DEFAULT_TIMER_COUNT; 
088F:  MOVWF  5B
.................... byte int_ping_count = DEFAULT_PING_COUNT; 
0890:  MOVLW  26
0891:  MOVWF  5C
.................... byte ping_count = DEFAULT_PING_COUNT; 
0892:  MOVWF  5D
.................... byte scroll = DISABLED; 
0893:  CLRF   5E
.................... byte scroll_type = SCROLL_NONE; 
0894:  CLRF   5F
.................... byte do_reset = PING_PONG_COUNT; 
0895:  MOVLW  32
0896:  MOVWF  60
.................... byte actual_col = 0; 
0897:  CLRF   61
.................... byte status = 0; 
0898:  CLRF   62
.................... byte column = 0; 
0899:  CLRF   63
....................  
.................... /* INTERRUPT */ 
.................... #INT_RDA 
.................... void recv_rs232(void) 
.................... { 
.................... 	int recv = 0; 
*
00AF:  CLRF   6B
.................... 	//disable_interrupts(GLOBAL); 
.................... 	LINK_ENA 
00B0:  BSF    03.5
00B1:  BCF    08.2
00B2:  BCF    03.5
00B3:  BSF    08.2
.................... 	recv = getc(); 
00B4:  BTFSS  0C.5
00B5:  GOTO   0B4
00B6:  MOVF   1A,W
00B7:  MOVWF  6B
....................  
.................... 	if (status == 0x01) 
00B8:  DECFSZ 62,W
00B9:  GOTO   0C8
.................... 	{ 
.................... 		status = 0x02; 
00BA:  MOVLW  02
00BB:  MOVWF  62
.................... 		matrix[column * 3] = recv; 
00BC:  MOVF   63,W
00BD:  MOVWF  6C
00BE:  MOVLW  03
00BF:  MOVWF  6D
00C0:  CALL   069
00C1:  MOVLW  29
00C2:  ADDWF  78,W
00C3:  MOVWF  04
00C4:  BCF    03.7
00C5:  MOVF   6B,W
00C6:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x02) 
00C7:  GOTO   290
00C8:  MOVF   62,W
00C9:  SUBLW  02
00CA:  BTFSS  03.2
00CB:  GOTO   0DB
.................... 	{ 
.................... 		status = 0x03; 
00CC:  MOVLW  03
00CD:  MOVWF  62
.................... 		matrix[column * 3 + 1] = recv; 
00CE:  MOVF   63,W
00CF:  MOVWF  6C
00D0:  MOVLW  03
00D1:  MOVWF  6D
00D2:  CALL   069
00D3:  MOVLW  01
00D4:  ADDWF  78,W
00D5:  ADDLW  29
00D6:  MOVWF  04
00D7:  BCF    03.7
00D8:  MOVF   6B,W
00D9:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x03) 
00DA:  GOTO   290
00DB:  MOVF   62,W
00DC:  SUBLW  03
00DD:  BTFSS  03.2
00DE:  GOTO   0ED
.................... 	{ 
.................... 		status = 0x00; 
00DF:  CLRF   62
.................... 		matrix[column * 3 + 2] = recv; 
00E0:  MOVF   63,W
00E1:  MOVWF  6C
00E2:  MOVLW  03
00E3:  MOVWF  6D
00E4:  CALL   069
00E5:  MOVLW  02
00E6:  ADDWF  78,W
00E7:  ADDLW  29
00E8:  MOVWF  04
00E9:  BCF    03.7
00EA:  MOVF   6B,W
00EB:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0) 
00EC:  GOTO   290
00ED:  MOVF   62,F
00EE:  BTFSS  03.2
00EF:  GOTO   290
.................... 	{ 
.................... 		// SET COLUMN (0100 ABCD) + R + G + B 
.................... 		if ((recv & 0xF0) == 0x40) 
00F0:  MOVF   6B,W
00F1:  ANDLW  F0
00F2:  SUBLW  40
00F3:  BTFSS  03.2
00F4:  GOTO   0FA
.................... 		{ 
.................... 			column = recv & 0x0F; 
00F5:  MOVF   6B,W
00F6:  ANDLW  0F
00F7:  MOVWF  63
.................... 			status = 0x01; 
00F8:  MOVLW  01
00F9:  MOVWF  62
.................... 		} 
.................... 		// CLEAR SCREEN (0000 0000) 
.................... 		if (recv == 0x00) 
00FA:  MOVF   6B,F
00FB:  BTFSS  03.2
00FC:  GOTO   10A
.................... 			clearScreen(); 
.................... 		// GET SCREEN (0101 1010) 
.................... 		if (recv == 0x5A) 
*
010A:  MOVF   6B,W
010B:  SUBLW  5A
010C:  BTFSS  03.2
010D:  GOTO   128
.................... 			getScreen(); 
.................... 		// PONG RECV (0111 1110) 
.................... 		if (recv == 0x7E) 
*
0128:  MOVF   6B,W
0129:  SUBLW  7E
012A:  BTFSS  03.2
012B:  GOTO   12E
.................... 			pong(); 
.................... 		// SET UART SPEED (0000 1ABC) 
.................... 		if ((recv & 0xF8) == 0x08) 
*
012E:  MOVF   6B,W
012F:  ANDLW  F8
0130:  SUBLW  08
0131:  BTFSS  03.2
0132:  GOTO   189
.................... 			setUARTSpeed(recv & 0x07); 
0133:  MOVF   6B,W
0134:  ANDLW  07
0135:  MOVWF  6C
0136:  MOVF   6C,W
0137:  MOVWF  6D
.................... 		// SET SCROLL FREQ (0010 ABCD) 
.................... 		if ((recv & 0xF0) == 0x20) 
*
0189:  MOVF   6B,W
018A:  ANDLW  F0
018B:  SUBLW  20
018C:  BTFSS  03.2
018D:  GOTO   245
.................... 			setScrollFreq(recv & 0x0F); 
018E:  MOVF   6B,W
018F:  ANDLW  0F
0190:  MOVWF  6C
0191:  MOVF   6C,W
0192:  MOVWF  6D
.................... 		// SCROLL (0001 ABCD) 
.................... 		if ((recv & 0xF0) == 0x10) 
*
0245:  MOVF   6B,W
0246:  ANDLW  F0
0247:  SUBLW  10
0248:  BTFSS  03.2
0249:  GOTO   290
.................... 		{ 
.................... 			switch (recv & 0x0F) 
.................... 			{ 
024A:  MOVF   6B,W
024B:  ANDLW  0F
024C:  BTFSC  03.2
024D:  GOTO   26A
024E:  XORLW  01
024F:  BTFSC  03.2
0250:  GOTO   26E
0251:  XORLW  03
0252:  BTFSC  03.2
0253:  GOTO   272
0254:  XORLW  01
0255:  BTFSC  03.2
0256:  GOTO   276
0257:  XORLW  07
0258:  BTFSC  03.2
0259:  GOTO   27A
025A:  XORLW  01
025B:  BTFSC  03.2
025C:  GOTO   27E
025D:  XORLW  03
025E:  BTFSC  03.2
025F:  GOTO   282
0260:  XORLW  01
0261:  BTFSC  03.2
0262:  GOTO   286
0263:  XORLW  0F
0264:  BTFSC  03.2
0265:  GOTO   28A
0266:  XORLW  01
0267:  BTFSC  03.2
0268:  GOTO   28C
0269:  GOTO   28E
.................... 				case _SCROLL_DOWN_CARRY: 
.................... 					scroll_type = SCROLL_DOWN_CARRY; 
026A:  MOVLW  08
026B:  MOVWF  5F
.................... 					startScroll(); 
026C:  CALL   08E
.................... 					break; 
026D:  GOTO   290
.................... 				case _SCROLL_DOWN: 
.................... 					scroll_type = SCROLL_DOWN; 
026E:  MOVLW  04
026F:  MOVWF  5F
.................... 					startScroll(); 
0270:  CALL   08E
.................... 					break; 
0271:  GOTO   290
.................... 				case _SCROLL_UP_CARRY: 
.................... 					scroll_type = SCROLL_UP_CARRY; 
0272:  MOVLW  07
0273:  MOVWF  5F
.................... 					startScroll(); 
0274:  CALL   08E
.................... 					break; 
0275:  GOTO   290
.................... 				case _SCROLL_UP: 
.................... 					scroll_type = SCROLL_UP; 
0276:  MOVLW  03
0277:  MOVWF  5F
.................... 					startScroll(); 
0278:  CALL   08E
.................... 					break; 
0279:  GOTO   290
.................... 				case _SCROLL_LEFT_CARRY: 
.................... 					scroll_type = SCROLL_LEFT_CARRY; 
027A:  MOVLW  06
027B:  MOVWF  5F
.................... 					startScroll(); 
027C:  CALL   08E
.................... 					break; 
027D:  GOTO   290
.................... 				case _SCROLL_LEFT: 
.................... 					scroll_type = SCROLL_LEFT; 
027E:  MOVLW  02
027F:  MOVWF  5F
.................... 					startScroll(); 
0280:  CALL   08E
.................... 					break; 
0281:  GOTO   290
.................... 				case _SCROLL_RIGHT_CARRY: 
.................... 					scroll_type = SCROLL_RIGHT_CARRY; 
0282:  MOVLW  05
0283:  MOVWF  5F
.................... 					startScroll(); 
0284:  CALL   08E
.................... 					break; 
0285:  GOTO   290
.................... 				case _SCROLL_RIGHT: 
.................... 					scroll_type = SCROLL_RIGHT; 
0286:  MOVLW  01
0287:  MOVWF  5F
.................... 					startScroll(); 
0288:  CALL   08E
.................... 					break; 
0289:  GOTO   290
.................... 				case _START_SCROLL: 
.................... 					startScroll(); 
028A:  CALL   08E
.................... 					break; 
028B:  GOTO   290
.................... 				case _STOP_SCROLL: 
.................... 					stopScroll(); 
028C:  CALL   0AD
.................... 					break; 
028D:  GOTO   290
.................... 				default: 
.................... 					stopScroll(); 
028E:  CALL   0AD
.................... 					break; 
028F:  GOTO   290
.................... 			} 
.................... 		} 
.................... 	} 
....................  
.................... 	//enable_interrupts(GLOBAL); 
.................... 	return; 
.................... } 
....................  
0290:  BCF    0C.5
0291:  BCF    0A.3
0292:  BCF    0A.4
0293:  GOTO   023
.................... #INT_RTCC 
.................... void clock(void) 
.................... { 
.................... 	LINK_DIS 
0294:  BSF    03.5
0295:  BCF    08.2
0296:  BCF    03.5
0297:  BCF    08.2
.................... /* 
.................... 	if(0 == (--int_ping_count)) 
.................... 	{ 
.................... 		ping(); 
.................... 		int_ping_count = ping_count; 
.................... 		if (0 == do_reset--) 
.................... 		{ 
.................... 			printf("\r\n# Ping timeout - check drivers#\r\n"); 
.................... 			reset_cpu(); 
.................... 		} 
.................... 	} 
.................... */ 
.................... 	if((scroll == ENABLED) && (0 == (--int_count))) 
0298:  DECFSZ 5E,W
0299:  GOTO   3D3
029A:  DECFSZ 5B,F
029B:  GOTO   3D3
.................... 	{ 
.................... 		switch (scroll_type) 
.................... 		{ 
029C:  MOVF   5F,W
029D:  XORLW  01
029E:  BTFSC  03.2
029F:  GOTO   2B6
02A0:  XORLW  03
02A1:  BTFSC  03.2
02A2:  GOTO   2D7
02A3:  XORLW  01
02A4:  BTFSC  03.2
02A5:  GOTO   305
02A6:  XORLW  07
02A7:  BTFSC  03.2
02A8:  GOTO   31D
02A9:  XORLW  01
02AA:  BTFSC  03.2
02AB:  GOTO   333
02AC:  XORLW  03
02AD:  BTFSC  03.2
02AE:  GOTO   36C
02AF:  XORLW  01
02B0:  BTFSC  03.2
02B1:  GOTO   3A3
02B2:  XORLW  0F
02B3:  BTFSC  03.2
02B4:  GOTO   3B9
02B5:  GOTO   3CF
.................... 			case SCROLL_RIGHT: 
.................... 				scrollRight(); 
.................... 				break; 
*
02D6:  GOTO   3D1
.................... 			case SCROLL_LEFT: 
.................... 				scrollLeft(); 
.................... 				break; 
*
0304:  GOTO   3D1
.................... 			case SCROLL_UP: 
.................... 				scrollUp(); 
.................... 				break; 
*
031C:  GOTO   3D1
.................... 			case SCROLL_DOWN: 
.................... 				scrollDown(); 
.................... 				break; 
*
0332:  GOTO   3D1
.................... 			case SCROLL_RIGHT_CARRY: 
.................... 				scrollRightCarry(); 
.................... 				break; 
*
036B:  GOTO   3D1
.................... 			case SCROLL_LEFT_CARRY: 
.................... 				scrollLeftCarry(); 
.................... 				break; 
*
03A2:  GOTO   3D1
.................... 			case SCROLL_UP_CARRY: 
.................... 				scrollUpCarry(); 
.................... 				break; 
*
03B8:  GOTO   3D1
.................... 			case SCROLL_DOWN_CARRY: 
.................... 				scrollDownCarry(); 
.................... 				break; 
*
03CE:  GOTO   3D1
.................... 			default: 
.................... 				stopScroll(); 
03CF:  CALL   0AD
.................... 				break; 
03D0:  GOTO   3D1
.................... 		} 
.................... 		int_count = timer_count; 
03D1:  MOVF   5A,W
03D2:  MOVWF  5B
.................... 	} 
.................... } 
....................  
03D3:  BCF    0B.2
03D4:  BCF    0A.3
03D5:  BCF    0A.4
03D6:  GOTO   023
.................... void showScreen(void) 
.................... { 
.................... 	int i; 
.................... 	actual_col = 0; 
*
0800:  CLRF   61
.................... 	for (i = 0; i < SCREEN; i+=3) 
0801:  CLRF   66
0802:  MOVF   66,W
0803:  SUBLW  2F
0804:  BTFSS  03.0
0805:  GOTO   076
.................... 	{ 
.................... 		COL_DIS 
0806:  BSF    03.5
0807:  BCF    08.1
0808:  BCF    03.5
0809:  BSF    08.1
.................... 		set_red(matrix[i]); 
080A:  MOVLW  29
080B:  ADDWF  66,W
080C:  MOVWF  04
080D:  BCF    03.7
080E:  MOVF   00,W
080F:  MOVWF  67
0810:  MOVF   67,W
0811:  MOVWF  68
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_green(matrix[i+1]); 
*
082A:  MOVLW  01
082B:  ADDWF  66,W
082C:  ADDLW  29
082D:  MOVWF  04
082E:  BCF    03.7
082F:  MOVF   00,W
0830:  MOVWF  68
0831:  MOVF   68,W
0832:  MOVWF  69
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_blue(matrix[i+2]); 
*
084B:  MOVLW  02
084C:  ADDWF  66,W
084D:  ADDLW  29
084E:  MOVWF  04
084F:  BCF    03.7
0850:  MOVF   00,W
0851:  MOVWF  68
0852:  MOVF   68,W
0853:  MOVWF  69
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_col(actual_col++); 
*
086C:  MOVF   61,W
086D:  INCF   61,F
086E:  MOVWF  67
086F:  MOVWF  68
0870:  BCF    0A.3
0871:  CALL   411
0872:  BSF    0A.3
.................... 	} 
0873:  MOVLW  03
0874:  ADDWF  66,F
0875:  GOTO   002
.................... 	return; 
.................... } 
0876:  BSF    0A.3
0877:  BCF    0A.4
0878:  GOTO   10F (RETURN)
....................  
.................... /* MAIN */ 
.................... void main(void) 
.................... { 
0879:  CLRF   04
087A:  BCF    03.7
087B:  MOVLW  1F
087C:  ANDWF  03,F
087D:  MOVLW  0A
087E:  BSF    03.5
087F:  MOVWF  19
0880:  MOVLW  A6
0881:  MOVWF  18
0882:  MOVLW  90
0883:  BCF    03.5
0884:  MOVWF  18
0885:  BSF    03.5
0886:  BSF    1F.0
0887:  BSF    1F.1
0888:  BSF    1F.2
0889:  BCF    1F.3
.................... 	int i; 
.................... 	unsigned byte alive = 0; 
*
089A:  CLRF   65
....................  
.................... 	set_tris_a(0x00); 
089B:  MOVLW  00
089C:  BSF    03.5
089D:  MOVWF  05
.................... 	set_tris_b(0x00); 
089E:  MOVWF  06
.................... 	set_tris_d(0x00); 
089F:  MOVWF  08
....................  
.................... 	output_a(0x00); 
08A0:  CLRF   05
08A1:  BCF    03.5
08A2:  CLRF   05
.................... 	output_b(0xFF); 
08A3:  BSF    03.5
08A4:  CLRF   06
08A5:  MOVLW  FF
08A6:  BCF    03.5
08A7:  MOVWF  06
.................... 	output_d(0x00); 
08A8:  BSF    03.5
08A9:  CLRF   08
08AA:  BCF    03.5
08AB:  CLRF   08
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
08AC:  CLRF   64
08AD:  MOVF   64,W
08AE:  SUBLW  2F
08AF:  BTFSS  03.0
08B0:  GOTO   0B8
.................... 		matrix[i] = 0; 
08B1:  MOVLW  29
08B2:  ADDWF  64,W
08B3:  MOVWF  04
08B4:  BCF    03.7
08B5:  CLRF   00
08B6:  INCF   64,F
08B7:  GOTO   0AD
....................  
.................... 	status = 0; //means waiting for a command 
08B8:  CLRF   62
.................... 	// scroll? 
.................... 	scroll = DISABLED; 
08B9:  CLRF   5E
.................... 	scroll_type = SCROLL_NONE; 
08BA:  CLRF   5F
.................... 	// watch dog 
.................... 	do_reset = PING_PONG_COUNT; 
08BB:  MOVLW  32
08BC:  MOVWF  60
.................... 	ping_count = DEFAULT_PING_COUNT; 
08BD:  MOVLW  26
08BE:  MOVWF  5D
.................... 	// reset timer0 
.................... 	set_rtcc(0); 
08BF:  CLRF   01
.................... 	timer_div = RTCC_DIV_256; 
08C0:  MOVLW  07
08C1:  MOVWF  59
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
08C2:  MOVF   59,W
08C3:  MOVWF  77
08C4:  BTFSS  59.3
08C5:  GOTO   0CF
08C6:  MOVLW  07
08C7:  CLRF   01
08C8:  MOVLW  81
08C9:  MOVWF  04
08CA:  BCF    03.7
08CB:  MOVF   00,W
08CC:  ANDLW  C0
08CD:  IORLW  0F
08CE:  MOVWF  00
08CF:  CLRWDT
08D0:  MOVLW  81
08D1:  MOVWF  04
08D2:  MOVF   00,W
08D3:  ANDLW  C0
08D4:  IORWF  77,W
08D5:  MOVWF  00
.................... 	//timer interrupt 
.................... 	enable_interrupts (INT_RTCC); 
08D6:  BSF    0B.5
.................... 	//serial interrupt 
.................... 	enable_interrupts(INT_RDA); 
08D7:  BSF    03.5
08D8:  BSF    0C.5
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
08D9:  MOVLW  C0
08DA:  BCF    03.5
08DB:  IORWF  0B,F
....................  
.................... 	printf("\r\nInitializing Fleds (ver %s)\r\n", _VERSION_); 
08DC:  CLRF   66
08DD:  MOVF   66,W
08DE:  BCF    0A.3
08DF:  CALL   03C
08E0:  BSF    0A.3
08E1:  INCF   66,F
08E2:  MOVWF  77
08E3:  MOVF   77,W
08E4:  BTFSS  0C.4
08E5:  GOTO   0E4
08E6:  MOVWF  19
08E7:  MOVLW  1A
08E8:  SUBWF  66,W
08E9:  BTFSS  03.2
08EA:  GOTO   0DD
08EB:  CLRF   67
08EC:  MOVF   67,W
08ED:  BCF    0A.3
08EE:  CALL   060
08EF:  BSF    0A.3
08F0:  IORLW  00
08F1:  BTFSC  03.2
08F2:  GOTO   0F8
08F3:  INCF   67,F
08F4:  BTFSS  0C.4
08F5:  GOTO   0F4
08F6:  MOVWF  19
08F7:  GOTO   0EC
08F8:  MOVLW  29
08F9:  BTFSS  0C.4
08FA:  GOTO   0F9
08FB:  MOVWF  19
08FC:  MOVLW  0D
08FD:  BTFSS  0C.4
08FE:  GOTO   0FD
08FF:  MOVWF  19
0900:  MOVLW  0A
0901:  BTFSS  0C.4
0902:  GOTO   101
0903:  MOVWF  19
....................  
.................... 	clear(); 
0904:  BCF    0A.3
0905:  GOTO   3D7
0906:  BSF    0A.3
....................  
.................... 	showSplashScreen(); 
0907:  BCF    0A.3
0908:  GOTO   426
0909:  BSF    0A.3
....................  
.................... 	set_col(0); 
090A:  CLRF   68
090B:  BCF    0A.3
090C:  CALL   411
090D:  BSF    0A.3
.................... 	while(1) 
.................... 	{ 
.................... 		showScreen(); 
090E:  GOTO   000
.................... 		// Red led -> Alive! 
.................... 		if (0 == alive) 
090F:  MOVF   65,F
0910:  BTFSS  03.2
0911:  GOTO   116
.................... 			STATUS_ENA 
0912:  BSF    03.5
0913:  BCF    08.3
0914:  BCF    03.5
0915:  BSF    08.3
.................... 		if (128 == alive++) 
0916:  MOVF   65,W
0917:  INCF   65,F
0918:  SUBLW  80
0919:  BTFSS  03.2
091A:  GOTO   11F
.................... 			STATUS_DIS 
091B:  BSF    03.5
091C:  BCF    08.3
091D:  BCF    03.5
091E:  BCF    08.3
.................... 	} 
091F:  GOTO   10E
....................  
....................  	return; 
.................... } 
....................  
.................... /* LEDS */ 
.................... void set_col(byte col) 
.................... { 
0920:  SLEEP
.................... 	if (col < 16) 
*
0411:  MOVF   68,W
0412:  SUBLW  0F
0413:  BTFSS  03.0
0414:  GOTO   425
.................... 	{ 
.................... 		output_a(col); 
0415:  BSF    03.5
0416:  CLRF   05
0417:  BCF    03.5
0418:  MOVF   68,W
0419:  MOVWF  05
.................... 		COL_ENA 
041A:  BSF    03.5
041B:  BCF    08.1
041C:  BCF    03.5
041D:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
041E:  MOVLW  01
041F:  MOVWF  69
0420:  GOTO   3F7
.................... 		COL_DIS 
0421:  BSF    03.5
0422:  BCF    08.1
0423:  BCF    03.5
0424:  BSF    08.1
.................... 	} 
.................... 	return; 
.................... } 
0425:  RETLW  00
....................  
.................... void get_col(void) 
.................... { 
.................... 	putchar('<'); 
.................... 	putchar(actual_col); 
.................... 	putchar('>'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
03D7:  BSF    03.5
03D8:  BCF    08.7
03D9:  BCF    03.5
03DA:  BSF    08.7
.................... 	G_ENA 
03DB:  BSF    03.5
03DC:  BCF    08.6
03DD:  BCF    03.5
03DE:  BSF    08.6
.................... 	B_ENA 
03DF:  BSF    03.5
03E0:  BCF    08.5
03E1:  BCF    03.5
03E2:  BSF    08.5
.................... 	output_b(0xFF); 
03E3:  BSF    03.5
03E4:  CLRF   06
03E5:  MOVLW  FF
03E6:  BCF    03.5
03E7:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
03E8:  BSF    03.5
03E9:  BCF    08.7
03EA:  BCF    03.5
03EB:  BCF    08.7
.................... 	G_DIS 
03EC:  BSF    03.5
03ED:  BCF    08.6
03EE:  BCF    03.5
03EF:  BCF    08.6
.................... 	B_DIS 
03F0:  BSF    03.5
03F1:  BCF    08.5
03F2:  BCF    03.5
03F3:  BCF    08.5
.................... 	return; 
.................... } 
03F4:  BSF    0A.3
03F5:  BCF    0A.4
03F6:  GOTO   106 (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
*
0812:  BSF    03.5
0813:  BCF    08.6
0814:  BCF    03.5
0815:  BCF    08.6
.................... 	B_DIS 
0816:  BSF    03.5
0817:  BCF    08.5
0818:  BCF    03.5
0819:  BCF    08.5
.................... 	output_b(0xFF - color); 
081A:  MOVF   68,W
081B:  SUBLW  FF
081C:  MOVWF  69
081D:  BSF    03.5
081E:  CLRF   06
081F:  BCF    03.5
0820:  MOVF   69,W
0821:  MOVWF  06
.................... 	R_ENA 
0822:  BSF    03.5
0823:  BCF    08.7
0824:  BCF    03.5
0825:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
0826:  BSF    03.5
0827:  BCF    08.7
0828:  BCF    03.5
0829:  BCF    08.7
.................... 	return; 
.................... } 
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
*
0833:  BSF    03.5
0834:  BCF    08.6
0835:  BCF    03.5
0836:  BCF    08.6
.................... 	B_DIS 
0837:  BSF    03.5
0838:  BCF    08.5
0839:  BCF    03.5
083A:  BCF    08.5
.................... 	output_b(0xFF - color); 
083B:  MOVF   69,W
083C:  SUBLW  FF
083D:  MOVWF  6A
083E:  BSF    03.5
083F:  CLRF   06
0840:  BCF    03.5
0841:  MOVF   6A,W
0842:  MOVWF  06
.................... 	G_ENA 
0843:  BSF    03.5
0844:  BCF    08.6
0845:  BCF    03.5
0846:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
0847:  BSF    03.5
0848:  BCF    08.6
0849:  BCF    03.5
084A:  BCF    08.6
.................... 	return; 
.................... } 
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
*
0854:  BSF    03.5
0855:  BCF    08.6
0856:  BCF    03.5
0857:  BCF    08.6
.................... 	B_DIS 
0858:  BSF    03.5
0859:  BCF    08.5
085A:  BCF    03.5
085B:  BCF    08.5
.................... 	output_b(0xFF - color);	 
085C:  MOVF   69,W
085D:  SUBLW  FF
085E:  MOVWF  6A
085F:  BSF    03.5
0860:  CLRF   06
0861:  BCF    03.5
0862:  MOVF   6A,W
0863:  MOVWF  06
.................... 	B_ENA 
0864:  BSF    03.5
0865:  BCF    08.5
0866:  BCF    03.5
0867:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
0868:  BSF    03.5
0869:  BCF    08.5
086A:  BCF    03.5
086B:  BCF    08.5
.................... 	return; 
.................... } 
....................  
.................... void scrollUpCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03A3:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
03A4:  CLRF   6B
03A5:  MOVF   6B,W
03A6:  SUBLW  2F
03A7:  BTFSS  03.0
03A8:  GOTO   3B8
.................... 		rotate_right(matrix + i, 1); 
03A9:  MOVLW  29
03AA:  ADDWF  6B,W
03AB:  MOVWF  6C
03AC:  CLRF   6D
03AD:  BTFSC  03.0
03AE:  INCF   6D,F
03AF:  MOVF   6C,W
03B0:  MOVWF  04
03B1:  BCF    03.7
03B2:  BTFSC  6D.0
03B3:  BSF    03.7
03B4:  RRF    00,W
03B5:  RRF    00,F
03B6:  INCF   6B,F
03B7:  GOTO   3A5
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollUp(void) 
.................... { 
.................... 	byte i = 0; 
*
0305:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
0306:  CLRF   6B
0307:  MOVF   6B,W
0308:  SUBLW  2F
0309:  BTFSS  03.0
030A:  GOTO   31C
.................... 		shift_right(matrix + i, 1, 0); 
030B:  MOVLW  29
030C:  ADDWF  6B,W
030D:  MOVWF  6C
030E:  CLRF   6D
030F:  BTFSC  03.0
0310:  INCF   6D,F
0311:  MOVF   6C,W
0312:  MOVWF  04
0313:  BCF    03.7
0314:  BTFSC  6D.0
0315:  BSF    03.7
0316:  MOVLW  00
0317:  ADDWF  04,F
0318:  BCF    03.0
0319:  RRF    00,F
031A:  INCF   6B,F
031B:  GOTO   307
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDownCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03B9:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
03BA:  CLRF   6B
03BB:  MOVF   6B,W
03BC:  SUBLW  2F
03BD:  BTFSS  03.0
03BE:  GOTO   3CE
.................... 		rotate_left(matrix + i, 1); 
03BF:  MOVLW  29
03C0:  ADDWF  6B,W
03C1:  MOVWF  6C
03C2:  CLRF   6D
03C3:  BTFSC  03.0
03C4:  INCF   6D,F
03C5:  MOVF   6C,W
03C6:  MOVWF  04
03C7:  BCF    03.7
03C8:  BTFSC  6D.0
03C9:  BSF    03.7
03CA:  RLF    00,W
03CB:  RLF    00,F
03CC:  INCF   6B,F
03CD:  GOTO   3BB
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDown(void) 
.................... { 
.................... 	byte i = 0; 
*
031D:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
031E:  CLRF   6B
031F:  MOVF   6B,W
0320:  SUBLW  2F
0321:  BTFSS  03.0
0322:  GOTO   332
.................... 		shift_left(matrix + i, 1, 0); 
0323:  MOVLW  29
0324:  ADDWF  6B,W
0325:  MOVWF  6C
0326:  CLRF   6D
0327:  BTFSC  03.0
0328:  INCF   6D,F
0329:  MOVF   6C,W
032A:  MOVWF  04
032B:  BCF    03.7
032C:  BTFSC  6D.0
032D:  BSF    03.7
032E:  BCF    03.0
032F:  RLF    00,F
0330:  INCF   6B,F
0331:  GOTO   31F
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeft(void) 
.................... { 
.................... 	byte i = 0; 
*
02D7:  CLRF   6B
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
02D8:  CLRF   6B
02D9:  MOVF   6B,W
02DA:  SUBLW  2C
02DB:  BTFSS  03.0
02DC:  GOTO   2F3
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
02DD:  MOVLW  29
02DE:  ADDWF  6B,W
02DF:  MOVWF  78
02E0:  CLRF   7A
02E1:  BTFSC  03.0
02E2:  INCF   7A,F
02E3:  MOVLW  03
02E4:  ADDWF  6B,W
02E5:  ADDLW  29
02E6:  MOVWF  04
02E7:  BCF    03.7
02E8:  MOVF   00,W
02E9:  MOVWF  6F
02EA:  MOVF   78,W
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  BTFSC  7A.0
02EE:  BSF    03.7
02EF:  MOVF   6F,W
02F0:  MOVWF  00
.................... 	} 
02F1:  INCF   6B,F
02F2:  GOTO   2D9
.................... 	// clear last column 
.................... 	matrix[i] = 0; 
02F3:  MOVLW  29
02F4:  ADDWF  6B,W
02F5:  MOVWF  04
02F6:  BCF    03.7
02F7:  CLRF   00
.................... 	matrix[i+1] = 0; 
02F8:  MOVLW  01
02F9:  ADDWF  6B,W
02FA:  ADDLW  29
02FB:  MOVWF  04
02FC:  BCF    03.7
02FD:  CLRF   00
.................... 	matrix[i+2] = 0; 
02FE:  MOVLW  02
02FF:  ADDWF  6B,W
0300:  ADDLW  29
0301:  MOVWF  04
0302:  BCF    03.7
0303:  CLRF   00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeftCarry(void) 
.................... { 
.................... 	byte i = 0, r, g, b; 
*
036C:  CLRF   6B
....................  
.................... 	// Backup first column 
.................... 	r = matrix[0]; 
036D:  MOVF   29,W
036E:  MOVWF  6C
.................... 	g = matrix[1]; 
036F:  MOVF   2A,W
0370:  MOVWF  6D
.................... 	b = matrix[2]; 
0371:  MOVF   2B,W
0372:  MOVWF  6E
....................  
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
0373:  CLRF   6B
0374:  MOVF   6B,W
0375:  SUBLW  2C
0376:  BTFSS  03.0
0377:  GOTO   38E
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
0378:  MOVLW  29
0379:  ADDWF  6B,W
037A:  MOVWF  78
037B:  CLRF   7A
037C:  BTFSC  03.0
037D:  INCF   7A,F
037E:  MOVLW  03
037F:  ADDWF  6B,W
0380:  ADDLW  29
0381:  MOVWF  04
0382:  BCF    03.7
0383:  MOVF   00,W
0384:  MOVWF  72
0385:  MOVF   78,W
0386:  MOVWF  04
0387:  BCF    03.7
0388:  BTFSC  7A.0
0389:  BSF    03.7
038A:  MOVF   72,W
038B:  MOVWF  00
.................... 	} 
038C:  INCF   6B,F
038D:  GOTO   374
.................... 	// set last column 
.................... 	matrix[i] = r; 
038E:  MOVLW  29
038F:  ADDWF  6B,W
0390:  MOVWF  04
0391:  BCF    03.7
0392:  MOVF   6C,W
0393:  MOVWF  00
.................... 	matrix[i+1] = g; 
0394:  MOVLW  01
0395:  ADDWF  6B,W
0396:  ADDLW  29
0397:  MOVWF  04
0398:  BCF    03.7
0399:  MOVF   6D,W
039A:  MOVWF  00
.................... 	matrix[i+2] = b; 
039B:  MOVLW  02
039C:  ADDWF  6B,W
039D:  ADDLW  29
039E:  MOVWF  04
039F:  BCF    03.7
03A0:  MOVF   6E,W
03A1:  MOVWF  00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRight(void) 
.................... { 
.................... 	byte i = SCREEN-1; 
*
02B6:  MOVLW  2F
02B7:  MOVWF  6B
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
02B8:  MOVWF  6B
02B9:  MOVF   6B,W
02BA:  SUBLW  02
02BB:  BTFSC  03.0
02BC:  GOTO   2D3
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
02BD:  MOVLW  29
02BE:  ADDWF  6B,W
02BF:  MOVWF  78
02C0:  CLRF   7A
02C1:  BTFSC  03.0
02C2:  INCF   7A,F
02C3:  MOVLW  03
02C4:  SUBWF  6B,W
02C5:  ADDLW  29
02C6:  MOVWF  04
02C7:  BCF    03.7
02C8:  MOVF   00,W
02C9:  MOVWF  6F
02CA:  MOVF   78,W
02CB:  MOVWF  04
02CC:  BCF    03.7
02CD:  BTFSC  7A.0
02CE:  BSF    03.7
02CF:  MOVF   6F,W
02D0:  MOVWF  00
.................... 	} 
02D1:  DECF   6B,F
02D2:  GOTO   2B9
.................... 	// set last column 
.................... 	matrix[0] = 0; 
02D3:  CLRF   29
.................... 	matrix[1] = 0; 
02D4:  CLRF   2A
.................... 	matrix[2] = 0; 
02D5:  CLRF   2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRightCarry(void) 
.................... { 
.................... 	byte i = SCREEN-1, r, g, b; 
*
0333:  MOVLW  2F
0334:  MOVWF  6B
....................  
.................... 	// Backup first column 
.................... 	r = matrix[i-2]; 
0335:  MOVLW  02
0336:  SUBWF  6B,W
0337:  ADDLW  29
0338:  MOVWF  04
0339:  BCF    03.7
033A:  MOVF   00,W
033B:  MOVWF  6C
.................... 	g = matrix[i-1]; 
033C:  MOVLW  01
033D:  SUBWF  6B,W
033E:  ADDLW  29
033F:  MOVWF  04
0340:  BCF    03.7
0341:  MOVF   00,W
0342:  MOVWF  6D
.................... 	b = matrix[i]; 
0343:  MOVLW  29
0344:  ADDWF  6B,W
0345:  MOVWF  04
0346:  BCF    03.7
0347:  MOVF   00,W
0348:  MOVWF  6E
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
0349:  MOVLW  2F
034A:  MOVWF  6B
034B:  MOVF   6B,W
034C:  SUBLW  02
034D:  BTFSC  03.0
034E:  GOTO   365
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
034F:  MOVLW  29
0350:  ADDWF  6B,W
0351:  MOVWF  78
0352:  CLRF   7A
0353:  BTFSC  03.0
0354:  INCF   7A,F
0355:  MOVLW  03
0356:  SUBWF  6B,W
0357:  ADDLW  29
0358:  MOVWF  04
0359:  BCF    03.7
035A:  MOVF   00,W
035B:  MOVWF  72
035C:  MOVF   78,W
035D:  MOVWF  04
035E:  BCF    03.7
035F:  BTFSC  7A.0
0360:  BSF    03.7
0361:  MOVF   72,W
0362:  MOVWF  00
.................... 	} 
0363:  DECF   6B,F
0364:  GOTO   34B
.................... 	// set last column 
.................... 	matrix[0] = r; 
0365:  MOVF   6C,W
0366:  MOVWF  29
.................... 	matrix[1] = g; 
0367:  MOVF   6D,W
0368:  MOVWF  2A
.................... 	matrix[2] = b; 
0369:  MOVF   6E,W
036A:  MOVWF  2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void clearScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
00FD:  CLRF   6C
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
00FE:  CLRF   6C
00FF:  MOVF   6C,W
0100:  SUBLW  2F
0101:  BTFSS  03.0
0102:  GOTO   10A
.................... 	{ 
.................... 		matrix[i] = 0; 
0103:  MOVLW  29
0104:  ADDWF  6C,W
0105:  MOVWF  04
0106:  BCF    03.7
0107:  CLRF   00
.................... 	} 
0108:  INCF   6C,F
0109:  GOTO   0FF
.................... 	return; 
.................... } 
....................  
.................... void setScreen(byte * buffer) 
.................... { 
.................... 	byte i = 0; 
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
.................... 	{ 
.................... 		matrix[i] = buffer[i]; 
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void getScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
010E:  CLRF   6C
.................... 	 
.................... 	putchar('['); 
010F:  MOVLW  5B
0110:  BTFSS  0C.4
0111:  GOTO   110
0112:  MOVWF  19
.................... 	for(i = 0; i < SCREEN; i++) 
0113:  CLRF   6C
0114:  MOVF   6C,W
0115:  SUBLW  2F
0116:  BTFSS  03.0
0117:  GOTO   124
.................... 	{ 
.................... 		putchar(matrix[i]); 
0118:  MOVLW  29
0119:  ADDWF  6C,W
011A:  MOVWF  04
011B:  BCF    03.7
011C:  MOVF   00,W
011D:  MOVWF  6D
011E:  MOVF   6D,W
011F:  BTFSS  0C.4
0120:  GOTO   11F
0121:  MOVWF  19
.................... 	} 
0122:  INCF   6C,F
0123:  GOTO   114
.................... 	putchar(']'); 
0124:  MOVLW  5D
0125:  BTFSS  0C.4
0126:  GOTO   125
0127:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void stopScroll(void) 
.................... { 
.................... 	scroll = DISABLED; 
*
00AD:  CLRF   5E
.................... 	return; 
.................... } 
00AE:  RETLW  00
....................  
.................... void startScroll(void) 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
*
008E:  BCF    0B.6
008F:  BCF    0B.7
0090:  BTFSC  0B.7
0091:  GOTO   08F
.................... 	scroll = ENABLED; 
0092:  MOVLW  01
0093:  MOVWF  5E
.................... 	set_rtcc(0); 
0094:  CLRF   01
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0095:  MOVF   59,W
0096:  MOVWF  77
0097:  BTFSS  59.3
0098:  GOTO   0A2
0099:  MOVLW  07
009A:  CLRF   01
009B:  MOVLW  81
009C:  MOVWF  04
009D:  BCF    03.7
009E:  MOVF   00,W
009F:  ANDLW  C0
00A0:  IORLW  0F
00A1:  MOVWF  00
00A2:  CLRWDT
00A3:  MOVLW  81
00A4:  MOVWF  04
00A5:  MOVF   00,W
00A6:  ANDLW  C0
00A7:  IORWF  77,W
00A8:  MOVWF  00
.................... 	enable_interrupts(INT_RTCC); 
00A9:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
00AA:  MOVLW  C0
00AB:  IORWF  0B,F
.................... 	return; 
.................... } 
00AC:  RETLW  00
....................  
.................... void setUARTSpeed(byte speed) 
.................... { 
.................... 	switch(speed) 
.................... 	{ 
*
0138:  MOVF   6D,W
0139:  BTFSC  03.2
013A:  GOTO   151
013B:  XORLW  01
013C:  BTFSC  03.2
013D:  GOTO   157
013E:  XORLW  03
013F:  BTFSC  03.2
0140:  GOTO   15D
0141:  XORLW  01
0142:  BTFSC  03.2
0143:  GOTO   163
0144:  XORLW  07
0145:  BTFSC  03.2
0146:  GOTO   169
0147:  XORLW  01
0148:  BTFSC  03.2
0149:  GOTO   16F
014A:  XORLW  03
014B:  BTFSC  03.2
014C:  GOTO   175
014D:  XORLW  01
014E:  BTFSC  03.2
014F:  GOTO   17B
0150:  GOTO   182
.................... 		case B1200: 
.................... 			setup_uart(1200); 
0151:  MOVLW  FF
0152:  BSF    03.5
0153:  MOVWF  19
0154:  MOVLW  A2
0155:  MOVWF  18
.................... 			break; 
0156:  GOTO   188
.................... 		case B2400: 
.................... 			setup_uart(2400); 
0157:  MOVLW  81
0158:  BSF    03.5
0159:  MOVWF  19
015A:  MOVLW  A2
015B:  MOVWF  18
.................... 			break; 
015C:  GOTO   188
.................... 		case B4800: 
.................... 			setup_uart(4800); 
015D:  MOVLW  40
015E:  BSF    03.5
015F:  MOVWF  19
0160:  MOVLW  A2
0161:  MOVWF  18
.................... 			break; 
0162:  GOTO   188
.................... 		case B9600: 
.................... 			setup_uart(9600); 
0163:  MOVLW  81
0164:  BSF    03.5
0165:  MOVWF  19
0166:  MOVLW  A6
0167:  MOVWF  18
.................... 			break; 
0168:  GOTO   188
.................... 		case B19200: 
.................... 			setup_uart(19200); 
0169:  MOVLW  40
016A:  BSF    03.5
016B:  MOVWF  19
016C:  MOVLW  A6
016D:  MOVWF  18
.................... 			break; 
016E:  GOTO   188
.................... 		case B38400: 
.................... 			setup_uart(38400); 
016F:  MOVLW  20
0170:  BSF    03.5
0171:  MOVWF  19
0172:  MOVLW  A6
0173:  MOVWF  18
.................... 			break; 
0174:  GOTO   188
.................... 		case B57600: 
.................... 			setup_uart(57600); 
0175:  MOVLW  15
0176:  BSF    03.5
0177:  MOVWF  19
0178:  MOVLW  A6
0179:  MOVWF  18
.................... 			break; 
017A:  GOTO   188
.................... 		case B115200: 
.................... 			setup_uart(115200); 
017B:  MOVLW  0A
017C:  BSF    03.5
017D:  MOVWF  19
017E:  MOVLW  A6
017F:  MOVWF  18
.................... 			break; 
0180:  GOTO   188
0181:  BCF    03.5
.................... 		default: 
.................... 			setup_uart(4800); 
0182:  MOVLW  40
0183:  BSF    03.5
0184:  MOVWF  19
0185:  MOVLW  A2
0186:  MOVWF  18
.................... 			break; 
0187:  GOTO   188
0188:  BCF    03.5
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void setScrollFreq(byte freq) 
.................... { 
.................... 	//global interrupt 
.................... 	disable_interrupts(GLOBAL); 
*
0193:  BCF    0B.6
0194:  BCF    0B.7
0195:  BTFSC  0B.7
0196:  GOTO   194
.................... 	set_rtcc(0); 
0197:  CLRF   01
....................  
.................... 	switch(freq) 
.................... 	{ 
0198:  MOVF   6D,W
0199:  BTFSC  03.2
019A:  GOTO   1C9
019B:  XORLW  01
019C:  BTFSC  03.2
019D:  GOTO   1D0
019E:  XORLW  03
019F:  BTFSC  03.2
01A0:  GOTO   1D7
01A1:  XORLW  01
01A2:  BTFSC  03.2
01A3:  GOTO   1DE
01A4:  XORLW  07
01A5:  BTFSC  03.2
01A6:  GOTO   1E5
01A7:  XORLW  01
01A8:  BTFSC  03.2
01A9:  GOTO   1EB
01AA:  XORLW  03
01AB:  BTFSC  03.2
01AC:  GOTO   1F2
01AD:  XORLW  01
01AE:  BTFSC  03.2
01AF:  GOTO   1F9
01B0:  XORLW  0F
01B1:  BTFSC  03.2
01B2:  GOTO   200
01B3:  XORLW  01
01B4:  BTFSC  03.2
01B5:  GOTO   207
01B6:  XORLW  03
01B7:  BTFSC  03.2
01B8:  GOTO   20E
01B9:  XORLW  01
01BA:  BTFSC  03.2
01BB:  GOTO   215
01BC:  XORLW  07
01BD:  BTFSC  03.2
01BE:  GOTO   21C
01BF:  XORLW  01
01C0:  BTFSC  03.2
01C1:  GOTO   223
01C2:  XORLW  03
01C3:  BTFSC  03.2
01C4:  GOTO   22A
01C5:  XORLW  01
01C6:  BTFSC  03.2
01C7:  GOTO   231
01C8:  GOTO   238
.................... 		case 0: 
.................... 			timer_div = RTCC_DIV_64; 
01C9:  MOVLW  05
01CA:  MOVWF  59
.................... 			timer_count = 1; 
01CB:  MOVLW  01
01CC:  MOVWF  5A
.................... 			ping_count = 229; 
01CD:  MOVLW  E5
01CE:  MOVWF  5D
.................... 			break; 
01CF:  GOTO   23F
.................... 		case 1: 
.................... 			timer_div = RTCC_DIV_128; 
01D0:  MOVLW  06
01D1:  MOVWF  59
.................... 			timer_count = 1; 
01D2:  MOVLW  01
01D3:  MOVWF  5A
.................... 			ping_count = 115; 
01D4:  MOVLW  73
01D5:  MOVWF  5D
.................... 			break; 
01D6:  GOTO   23F
.................... 		case 2: 
.................... 			timer_div = RTCC_DIV_64; 
01D7:  MOVLW  05
01D8:  MOVWF  59
.................... 			timer_count = 3; 
01D9:  MOVLW  03
01DA:  MOVWF  5A
.................... 			ping_count = 230; 
01DB:  MOVLW  E6
01DC:  MOVWF  5D
.................... 			break; 
01DD:  GOTO   23F
.................... 		case 3: 
.................... 			timer_div = RTCC_DIV_256; 
01DE:  MOVLW  07
01DF:  MOVWF  59
.................... 			timer_count = 1; 
01E0:  MOVLW  01
01E1:  MOVWF  5A
.................... 			ping_count = 57; 
01E2:  MOVLW  39
01E3:  MOVWF  5D
.................... 			break; 
01E4:  GOTO   23F
.................... 		case 4: 
.................... 			timer_div = RTCC_DIV_64; 
01E5:  MOVLW  05
01E6:  MOVWF  59
.................... 			timer_count = 5; 
01E7:  MOVWF  5A
.................... 			ping_count = 229; 
01E8:  MOVLW  E5
01E9:  MOVWF  5D
.................... 			break; 
01EA:  GOTO   23F
.................... 		case 5: 
.................... 			timer_div = RTCC_DIV_128; 
01EB:  MOVLW  06
01EC:  MOVWF  59
.................... 			timer_count = 3; 
01ED:  MOVLW  03
01EE:  MOVWF  5A
.................... 			ping_count = 115; 
01EF:  MOVLW  73
01F0:  MOVWF  5D
.................... 			break; 
01F1:  GOTO   23F
.................... 		case 6: 
.................... 			timer_div = RTCC_DIV_64; 
01F2:  MOVLW  05
01F3:  MOVWF  59
.................... 			timer_count = 7; 
01F4:  MOVLW  07
01F5:  MOVWF  5A
.................... 			ping_count = 231; 
01F6:  MOVLW  E7
01F7:  MOVWF  5D
.................... 			break; 
01F8:  GOTO   23F
.................... 		case 7: 
.................... 			timer_div = RTCC_DIV_256; 
01F9:  MOVLW  07
01FA:  MOVWF  59
.................... 			timer_count = 2; 
01FB:  MOVLW  02
01FC:  MOVWF  5A
.................... 			ping_count = 57; 
01FD:  MOVLW  39
01FE:  MOVWF  5D
.................... 			break; 
01FF:  GOTO   23F
.................... 		case 8: 
.................... 			timer_div = RTCC_DIV_64; 
0200:  MOVLW  05
0201:  MOVWF  59
.................... 			timer_count = 9; 
0202:  MOVLW  09
0203:  MOVWF  5A
.................... 			ping_count = 230; 
0204:  MOVLW  E6
0205:  MOVWF  5D
.................... 			break; 
0206:  GOTO   23F
.................... 		case 9: 
.................... 			timer_div = RTCC_DIV_256; 
0207:  MOVLW  07
0208:  MOVWF  59
.................... 			timer_count = 3; 
0209:  MOVLW  03
020A:  MOVWF  5A
.................... 			ping_count = 56; 
020B:  MOVLW  38
020C:  MOVWF  5D
.................... 			break; 
020D:  GOTO   23F
.................... 		case 10: 
.................... 			timer_div = RTCC_DIV_64; 
020E:  MOVLW  05
020F:  MOVWF  59
.................... 			timer_count = 17; 
0210:  MOVLW  11
0211:  MOVWF  5A
.................... 			ping_count = 230; 
0212:  MOVLW  E6
0213:  MOVWF  5D
.................... 			break; 
0214:  GOTO   23F
.................... 		case 11: 
.................... 			timer_div = RTCC_DIV_256; 
0215:  MOVLW  07
0216:  MOVWF  59
.................... 			timer_count = 5; 
0217:  MOVLW  05
0218:  MOVWF  5A
.................... 			ping_count = 56; 
0219:  MOVLW  38
021A:  MOVWF  5D
.................... 			break; 
021B:  GOTO   23F
.................... 		case 12: 
.................... 			timer_div = RTCC_DIV_256; 
021C:  MOVLW  07
021D:  MOVWF  59
.................... 			timer_count = 8; 
021E:  MOVLW  08
021F:  MOVWF  5A
.................... 			ping_count = 60; 
0220:  MOVLW  3C
0221:  MOVWF  5D
.................... 			break; 
0222:  GOTO   23F
.................... 		case 13: 
.................... 			timer_div = RTCC_DIV_256; 
0223:  MOVLW  07
0224:  MOVWF  59
.................... 			timer_count = 9; 
0225:  MOVLW  09
0226:  MOVWF  5A
.................... 			ping_count = 54; 
0227:  MOVLW  36
0228:  MOVWF  5D
.................... 			break; 
0229:  GOTO   23F
.................... 		case 14: 
.................... 			timer_div = RTCC_DIV_256; 
022A:  MOVLW  07
022B:  MOVWF  59
.................... 			timer_count = 14; 
022C:  MOVLW  0E
022D:  MOVWF  5A
.................... 			ping_count = 53; 
022E:  MOVLW  35
022F:  MOVWF  5D
.................... 			break; 
0230:  GOTO   23F
.................... 		case 15: 
.................... 			timer_div = RTCC_DIV_256; 
0231:  MOVLW  07
0232:  MOVWF  59
.................... 			timer_count = 76; 
0233:  MOVLW  4C
0234:  MOVWF  5A
.................... 			ping_count = 57; 
0235:  MOVLW  39
0236:  MOVWF  5D
.................... 			break; 
0237:  GOTO   23F
.................... 		default: 
.................... 			timer_div = DEFAULT_TIMER_DIV; 
0238:  MOVLW  07
0239:  MOVWF  59
.................... 			timer_count = DEFAULT_TIMER_COUNT; 
023A:  MOVLW  4C
023B:  MOVWF  5A
.................... 			ping_count = DEFAULT_PING_COUNT; 
023C:  MOVLW  26
023D:  MOVWF  5D
.................... 			break; 
023E:  GOTO   23F
.................... 	} 
....................  
.................... 	// Reset counters 
.................... 	int_count = timer_count; 
023F:  MOVF   5A,W
0240:  MOVWF  5B
.................... 	int_ping_count = ping_count; 
0241:  MOVF   5D,W
0242:  MOVWF  5C
....................  
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
0243:  MOVLW  C0
0244:  IORWF  0B,F
....................  
.................... 	return; 
.................... } 
....................  
.................... void ping(void) 
.................... { 
....................  
.................... 	putchar('?'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void pong(void) 
.................... { 
.................... 	// do not do reset! 
.................... 	do_reset = ping_count; 
*
012C:  MOVF   5D,W
012D:  MOVWF  60
....................  
.................... 	return; 
.................... } 
....................  
.................... void showSplashScreen(void) 
.................... { 
.................... 	actual_col = 0; 
*
0426:  CLRF   61
0427:  CLRF   28
0428:  BTFSC  0B.7
0429:  BSF    28.7
042A:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x3F, 0x0, 0x0); 
042B:  MOVF   61,W
042C:  MOVWF  6C
042D:  MOVLW  03
042E:  MOVWF  6D
042F:  CALL   069
0430:  BTFSC  28.7
0431:  BSF    0B.7
0432:  MOVLW  29
0433:  ADDWF  78,W
0434:  MOVWF  04
0435:  BCF    03.7
0436:  MOVLW  3F
0437:  MOVWF  00
0438:  CLRF   28
0439:  BTFSC  0B.7
043A:  BSF    28.7
043B:  BCF    0B.7
043C:  MOVF   61,W
043D:  MOVWF  6C
043E:  MOVLW  03
043F:  MOVWF  6D
0440:  CALL   069
0441:  BTFSC  28.7
0442:  BSF    0B.7
0443:  MOVLW  01
0444:  ADDWF  78,W
0445:  ADDLW  29
0446:  MOVWF  04
0447:  BCF    03.7
0448:  CLRF   00
0449:  CLRF   28
044A:  BTFSC  0B.7
044B:  BSF    28.7
044C:  BCF    0B.7
044D:  MOVF   61,W
044E:  MOVWF  6C
044F:  MOVLW  03
0450:  MOVWF  6D
0451:  CALL   069
0452:  BTFSC  28.7
0453:  BSF    0B.7
0454:  MOVLW  02
0455:  ADDWF  78,W
0456:  ADDLW  29
0457:  MOVWF  04
0458:  BCF    03.7
0459:  CLRF   00
.................... 	set_col(actual_col++); 
045A:  MOVF   61,W
045B:  INCF   61,F
045C:  MOVWF  66
045D:  MOVWF  68
045E:  CALL   411
045F:  CLRF   28
0460:  BTFSC  0B.7
0461:  BSF    28.7
0462:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x5, 0x0, 0x0); 
0463:  MOVF   61,W
0464:  MOVWF  6C
0465:  MOVLW  03
0466:  MOVWF  6D
0467:  CALL   069
0468:  BTFSC  28.7
0469:  BSF    0B.7
046A:  MOVLW  29
046B:  ADDWF  78,W
046C:  MOVWF  04
046D:  BCF    03.7
046E:  MOVLW  05
046F:  MOVWF  00
0470:  CLRF   28
0471:  BTFSC  0B.7
0472:  BSF    28.7
0473:  BCF    0B.7
0474:  MOVF   61,W
0475:  MOVWF  6C
0476:  MOVLW  03
0477:  MOVWF  6D
0478:  CALL   069
0479:  BTFSC  28.7
047A:  BSF    0B.7
047B:  MOVLW  01
047C:  ADDWF  78,W
047D:  ADDLW  29
047E:  MOVWF  04
047F:  BCF    03.7
0480:  CLRF   00
0481:  CLRF   28
0482:  BTFSC  0B.7
0483:  BSF    28.7
0484:  BCF    0B.7
0485:  MOVF   61,W
0486:  MOVWF  6C
0487:  MOVLW  03
0488:  MOVWF  6D
0489:  CALL   069
048A:  BTFSC  28.7
048B:  BSF    0B.7
048C:  MOVLW  02
048D:  ADDWF  78,W
048E:  ADDLW  29
048F:  MOVWF  04
0490:  BCF    03.7
0491:  CLRF   00
.................... 	set_col(actual_col++); 
0492:  MOVF   61,W
0493:  INCF   61,F
0494:  MOVWF  66
0495:  MOVWF  68
0496:  CALL   411
0497:  CLRF   28
0498:  BTFSC  0B.7
0499:  BSF    28.7
049A:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x1, 0x0, 0xF0); 
049B:  MOVF   61,W
049C:  MOVWF  6C
049D:  MOVLW  03
049E:  MOVWF  6D
049F:  CALL   069
04A0:  BTFSC  28.7
04A1:  BSF    0B.7
04A2:  MOVLW  29
04A3:  ADDWF  78,W
04A4:  MOVWF  04
04A5:  BCF    03.7
04A6:  MOVLW  01
04A7:  MOVWF  00
04A8:  CLRF   28
04A9:  BTFSC  0B.7
04AA:  BSF    28.7
04AB:  BCF    0B.7
04AC:  MOVF   61,W
04AD:  MOVWF  6C
04AE:  MOVLW  03
04AF:  MOVWF  6D
04B0:  CALL   069
04B1:  BTFSC  28.7
04B2:  BSF    0B.7
04B3:  MOVLW  01
04B4:  ADDWF  78,W
04B5:  ADDLW  29
04B6:  MOVWF  04
04B7:  BCF    03.7
04B8:  CLRF   00
04B9:  CLRF   28
04BA:  BTFSC  0B.7
04BB:  BSF    28.7
04BC:  BCF    0B.7
04BD:  MOVF   61,W
04BE:  MOVWF  6C
04BF:  MOVLW  03
04C0:  MOVWF  6D
04C1:  CALL   069
04C2:  BTFSC  28.7
04C3:  BSF    0B.7
04C4:  MOVLW  02
04C5:  ADDWF  78,W
04C6:  ADDLW  29
04C7:  MOVWF  04
04C8:  BCF    03.7
04C9:  MOVLW  F0
04CA:  MOVWF  00
.................... 	set_col(actual_col++); 
04CB:  MOVF   61,W
04CC:  INCF   61,F
04CD:  MOVWF  66
04CE:  MOVWF  68
04CF:  CALL   411
04D0:  CLRF   28
04D1:  BTFSC  0B.7
04D2:  BSF    28.7
04D3:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x80); 
04D4:  MOVF   61,W
04D5:  MOVWF  6C
04D6:  MOVLW  03
04D7:  MOVWF  6D
04D8:  CALL   069
04D9:  BTFSC  28.7
04DA:  BSF    0B.7
04DB:  MOVLW  29
04DC:  ADDWF  78,W
04DD:  MOVWF  04
04DE:  BCF    03.7
04DF:  CLRF   00
04E0:  CLRF   28
04E1:  BTFSC  0B.7
04E2:  BSF    28.7
04E3:  BCF    0B.7
04E4:  MOVF   61,W
04E5:  MOVWF  6C
04E6:  MOVLW  03
04E7:  MOVWF  6D
04E8:  CALL   069
04E9:  BTFSC  28.7
04EA:  BSF    0B.7
04EB:  MOVLW  01
04EC:  ADDWF  78,W
04ED:  ADDLW  29
04EE:  MOVWF  04
04EF:  BCF    03.7
04F0:  CLRF   00
04F1:  CLRF   28
04F2:  BTFSC  0B.7
04F3:  BSF    28.7
04F4:  BCF    0B.7
04F5:  MOVF   61,W
04F6:  MOVWF  6C
04F7:  MOVLW  03
04F8:  MOVWF  6D
04F9:  CALL   069
04FA:  BTFSC  28.7
04FB:  BSF    0B.7
04FC:  MOVLW  02
04FD:  ADDWF  78,W
04FE:  ADDLW  29
04FF:  MOVWF  04
0500:  BCF    03.7
0501:  MOVLW  80
0502:  MOVWF  00
.................... 	set_col(actual_col++); 
0503:  MOVF   61,W
0504:  INCF   61,F
0505:  MOVWF  66
0506:  MOVWF  68
0507:  CALL   411
0508:  CLRF   28
0509:  BTFSC  0B.7
050A:  BSF    28.7
050B:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x3E, 0x0); 
050C:  MOVF   61,W
050D:  MOVWF  6C
050E:  MOVLW  03
050F:  MOVWF  6D
0510:  CALL   069
0511:  BTFSC  28.7
0512:  BSF    0B.7
0513:  MOVLW  29
0514:  ADDWF  78,W
0515:  MOVWF  04
0516:  BCF    03.7
0517:  CLRF   00
0518:  CLRF   28
0519:  BTFSC  0B.7
051A:  BSF    28.7
051B:  BCF    0B.7
051C:  MOVF   61,W
051D:  MOVWF  6C
051E:  MOVLW  03
051F:  MOVWF  6D
0520:  CALL   069
0521:  BTFSC  28.7
0522:  BSF    0B.7
0523:  MOVLW  01
0524:  ADDWF  78,W
0525:  ADDLW  29
0526:  MOVWF  04
0527:  BCF    03.7
0528:  MOVLW  3E
0529:  MOVWF  00
052A:  CLRF   28
052B:  BTFSC  0B.7
052C:  BSF    28.7
052D:  BCF    0B.7
052E:  MOVF   61,W
052F:  MOVWF  6C
0530:  MOVLW  03
0531:  MOVWF  6D
0532:  CALL   069
0533:  BTFSC  28.7
0534:  BSF    0B.7
0535:  MOVLW  02
0536:  ADDWF  78,W
0537:  ADDLW  29
0538:  MOVWF  04
0539:  BCF    03.7
053A:  CLRF   00
.................... 	set_col(actual_col++); 
053B:  MOVF   61,W
053C:  INCF   61,F
053D:  MOVWF  66
053E:  MOVWF  68
053F:  CALL   411
0540:  CLRF   28
0541:  BTFSC  0B.7
0542:  BSF    28.7
0543:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x0); 
0544:  MOVF   61,W
0545:  MOVWF  6C
0546:  MOVLW  03
0547:  MOVWF  6D
0548:  CALL   069
0549:  BTFSC  28.7
054A:  BSF    0B.7
054B:  MOVLW  29
054C:  ADDWF  78,W
054D:  MOVWF  04
054E:  BCF    03.7
054F:  CLRF   00
0550:  CLRF   28
0551:  BTFSC  0B.7
0552:  BSF    28.7
0553:  BCF    0B.7
0554:  MOVF   61,W
0555:  MOVWF  6C
0556:  MOVLW  03
0557:  MOVWF  6D
0558:  CALL   069
0559:  BTFSC  28.7
055A:  BSF    0B.7
055B:  MOVLW  01
055C:  ADDWF  78,W
055D:  ADDLW  29
055E:  MOVWF  04
055F:  BCF    03.7
0560:  MOVLW  2A
0561:  MOVWF  00
0562:  CLRF   28
0563:  BTFSC  0B.7
0564:  BSF    28.7
0565:  BCF    0B.7
0566:  MOVF   61,W
0567:  MOVWF  6C
0568:  MOVLW  03
0569:  MOVWF  6D
056A:  CALL   069
056B:  BTFSC  28.7
056C:  BSF    0B.7
056D:  MOVLW  02
056E:  ADDWF  78,W
056F:  ADDLW  29
0570:  MOVWF  04
0571:  BCF    03.7
0572:  CLRF   00
.................... 	set_col(actual_col++); 
0573:  MOVF   61,W
0574:  INCF   61,F
0575:  MOVWF  66
0576:  MOVWF  68
0577:  CALL   411
0578:  CLRF   28
0579:  BTFSC  0B.7
057A:  BSF    28.7
057B:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x0); 
057C:  MOVF   61,W
057D:  MOVWF  6C
057E:  MOVLW  03
057F:  MOVWF  6D
0580:  CALL   069
0581:  BTFSC  28.7
0582:  BSF    0B.7
0583:  MOVLW  29
0584:  ADDWF  78,W
0585:  MOVWF  04
0586:  BCF    03.7
0587:  CLRF   00
0588:  CLRF   28
0589:  BTFSC  0B.7
058A:  BSF    28.7
058B:  BCF    0B.7
058C:  MOVF   61,W
058D:  MOVWF  6C
058E:  MOVLW  03
058F:  MOVWF  6D
0590:  CALL   069
0591:  BTFSC  28.7
0592:  BSF    0B.7
0593:  MOVLW  01
0594:  ADDWF  78,W
0595:  ADDLW  29
0596:  MOVWF  04
0597:  BCF    03.7
0598:  CLRF   00
0599:  CLRF   28
059A:  BTFSC  0B.7
059B:  BSF    28.7
059C:  BCF    0B.7
059D:  MOVF   61,W
059E:  MOVWF  6C
059F:  MOVLW  03
05A0:  MOVWF  6D
05A1:  CALL   069
05A2:  BTFSC  28.7
05A3:  BSF    0B.7
05A4:  MOVLW  02
05A5:  ADDWF  78,W
05A6:  ADDLW  29
05A7:  MOVWF  04
05A8:  BCF    03.7
05A9:  CLRF   00
.................... 	set_col(actual_col++); 
05AA:  MOVF   61,W
05AB:  INCF   61,F
05AC:  MOVWF  66
05AD:  MOVWF  68
05AE:  CALL   411
05AF:  CLRF   28
05B0:  BTFSC  0B.7
05B1:  BSF    28.7
05B2:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0xF0, 0xF0, 0x0); 
05B3:  MOVF   61,W
05B4:  MOVWF  6C
05B5:  MOVLW  03
05B6:  MOVWF  6D
05B7:  CALL   069
05B8:  BTFSC  28.7
05B9:  BSF    0B.7
05BA:  MOVLW  29
05BB:  ADDWF  78,W
05BC:  MOVWF  04
05BD:  BCF    03.7
05BE:  MOVLW  F0
05BF:  MOVWF  00
05C0:  CLRF   28
05C1:  BTFSC  0B.7
05C2:  BSF    28.7
05C3:  BCF    0B.7
05C4:  MOVF   61,W
05C5:  MOVWF  6C
05C6:  MOVLW  03
05C7:  MOVWF  6D
05C8:  CALL   069
05C9:  BTFSC  28.7
05CA:  BSF    0B.7
05CB:  MOVLW  01
05CC:  ADDWF  78,W
05CD:  ADDLW  29
05CE:  MOVWF  04
05CF:  BCF    03.7
05D0:  MOVLW  F0
05D1:  MOVWF  00
05D2:  CLRF   28
05D3:  BTFSC  0B.7
05D4:  BSF    28.7
05D5:  BCF    0B.7
05D6:  MOVF   61,W
05D7:  MOVWF  6C
05D8:  MOVLW  03
05D9:  MOVWF  6D
05DA:  CALL   069
05DB:  BTFSC  28.7
05DC:  BSF    0B.7
05DD:  MOVLW  02
05DE:  ADDWF  78,W
05DF:  ADDLW  29
05E0:  MOVWF  04
05E1:  BCF    03.7
05E2:  CLRF   00
.................... 	set_col(actual_col++); 
05E3:  MOVF   61,W
05E4:  INCF   61,F
05E5:  MOVWF  66
05E6:  MOVWF  68
05E7:  CALL   411
05E8:  CLRF   28
05E9:  BTFSC  0B.7
05EA:  BSF    28.7
05EB:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x90, 0x90, 0x0); 
05EC:  MOVF   61,W
05ED:  MOVWF  6C
05EE:  MOVLW  03
05EF:  MOVWF  6D
05F0:  CALL   069
05F1:  BTFSC  28.7
05F2:  BSF    0B.7
05F3:  MOVLW  29
05F4:  ADDWF  78,W
05F5:  MOVWF  04
05F6:  BCF    03.7
05F7:  MOVLW  90
05F8:  MOVWF  00
05F9:  CLRF   28
05FA:  BTFSC  0B.7
05FB:  BSF    28.7
05FC:  BCF    0B.7
05FD:  MOVF   61,W
05FE:  MOVWF  6C
05FF:  MOVLW  03
0600:  MOVWF  6D
0601:  CALL   069
0602:  BTFSC  28.7
0603:  BSF    0B.7
0604:  MOVLW  01
0605:  ADDWF  78,W
0606:  ADDLW  29
0607:  MOVWF  04
0608:  BCF    03.7
0609:  MOVLW  90
060A:  MOVWF  00
060B:  CLRF   28
060C:  BTFSC  0B.7
060D:  BSF    28.7
060E:  BCF    0B.7
060F:  MOVF   61,W
0610:  MOVWF  6C
0611:  MOVLW  03
0612:  MOVWF  6D
0613:  CALL   069
0614:  BTFSC  28.7
0615:  BSF    0B.7
0616:  MOVLW  02
0617:  ADDWF  78,W
0618:  ADDLW  29
0619:  MOVWF  04
061A:  BCF    03.7
061B:  CLRF   00
.................... 	set_col(actual_col++); 
061C:  MOVF   61,W
061D:  INCF   61,F
061E:  MOVWF  66
061F:  MOVWF  68
0620:  CALL   411
0621:  CLRF   28
0622:  BTFSC  0B.7
0623:  BSF    28.7
0624:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x60, 0x60, 0x0); 
0625:  MOVF   61,W
0626:  MOVWF  6C
0627:  MOVLW  03
0628:  MOVWF  6D
0629:  CALL   069
062A:  BTFSC  28.7
062B:  BSF    0B.7
062C:  MOVLW  29
062D:  ADDWF  78,W
062E:  MOVWF  04
062F:  BCF    03.7
0630:  MOVLW  60
0631:  MOVWF  00
0632:  CLRF   28
0633:  BTFSC  0B.7
0634:  BSF    28.7
0635:  BCF    0B.7
0636:  MOVF   61,W
0637:  MOVWF  6C
0638:  MOVLW  03
0639:  MOVWF  6D
063A:  CALL   069
063B:  BTFSC  28.7
063C:  BSF    0B.7
063D:  MOVLW  01
063E:  ADDWF  78,W
063F:  ADDLW  29
0640:  MOVWF  04
0641:  BCF    03.7
0642:  MOVLW  60
0643:  MOVWF  00
0644:  CLRF   28
0645:  BTFSC  0B.7
0646:  BSF    28.7
0647:  BCF    0B.7
0648:  MOVF   61,W
0649:  MOVWF  6C
064A:  MOVLW  03
064B:  MOVWF  6D
064C:  CALL   069
064D:  BTFSC  28.7
064E:  BSF    0B.7
064F:  MOVLW  02
0650:  ADDWF  78,W
0651:  ADDLW  29
0652:  MOVWF  04
0653:  BCF    03.7
0654:  CLRF   00
.................... 	set_col(actual_col++); 
0655:  MOVF   61,W
0656:  INCF   61,F
0657:  MOVWF  66
0658:  MOVWF  68
0659:  CALL   411
065A:  CLRF   28
065B:  BTFSC  0B.7
065C:  BSF    28.7
065D:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x4, 0x4); 
065E:  MOVF   61,W
065F:  MOVWF  6C
0660:  MOVLW  03
0661:  MOVWF  6D
0662:  CALL   069
0663:  BTFSC  28.7
0664:  BSF    0B.7
0665:  MOVLW  29
0666:  ADDWF  78,W
0667:  MOVWF  04
0668:  BCF    03.7
0669:  CLRF   00
066A:  CLRF   28
066B:  BTFSC  0B.7
066C:  BSF    28.7
066D:  BCF    0B.7
066E:  MOVF   61,W
066F:  MOVWF  6C
0670:  MOVLW  03
0671:  MOVWF  6D
0672:  CALL   069
0673:  BTFSC  28.7
0674:  BSF    0B.7
0675:  MOVLW  01
0676:  ADDWF  78,W
0677:  ADDLW  29
0678:  MOVWF  04
0679:  BCF    03.7
067A:  MOVLW  04
067B:  MOVWF  00
067C:  CLRF   28
067D:  BTFSC  0B.7
067E:  BSF    28.7
067F:  BCF    0B.7
0680:  MOVF   61,W
0681:  MOVWF  6C
0682:  MOVLW  03
0683:  MOVWF  6D
0684:  CALL   069
0685:  BTFSC  28.7
0686:  BSF    0B.7
0687:  MOVLW  02
0688:  ADDWF  78,W
0689:  ADDLW  29
068A:  MOVWF  04
068B:  BCF    03.7
068C:  MOVLW  04
068D:  MOVWF  00
.................... 	set_col(actual_col++); 
068E:  MOVF   61,W
068F:  INCF   61,F
0690:  MOVWF  66
0691:  MOVWF  68
0692:  CALL   411
0693:  CLRF   28
0694:  BTFSC  0B.7
0695:  BSF    28.7
0696:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x2A); 
0697:  MOVF   61,W
0698:  MOVWF  6C
0699:  MOVLW  03
069A:  MOVWF  6D
069B:  CALL   069
069C:  BTFSC  28.7
069D:  BSF    0B.7
069E:  MOVLW  29
069F:  ADDWF  78,W
06A0:  MOVWF  04
06A1:  BCF    03.7
06A2:  CLRF   00
06A3:  CLRF   28
06A4:  BTFSC  0B.7
06A5:  BSF    28.7
06A6:  BCF    0B.7
06A7:  MOVF   61,W
06A8:  MOVWF  6C
06A9:  MOVLW  03
06AA:  MOVWF  6D
06AB:  CALL   069
06AC:  BTFSC  28.7
06AD:  BSF    0B.7
06AE:  MOVLW  01
06AF:  ADDWF  78,W
06B0:  ADDLW  29
06B1:  MOVWF  04
06B2:  BCF    03.7
06B3:  MOVLW  2A
06B4:  MOVWF  00
06B5:  CLRF   28
06B6:  BTFSC  0B.7
06B7:  BSF    28.7
06B8:  BCF    0B.7
06B9:  MOVF   61,W
06BA:  MOVWF  6C
06BB:  MOVLW  03
06BC:  MOVWF  6D
06BD:  CALL   069
06BE:  BTFSC  28.7
06BF:  BSF    0B.7
06C0:  MOVLW  02
06C1:  ADDWF  78,W
06C2:  ADDLW  29
06C3:  MOVWF  04
06C4:  BCF    03.7
06C5:  MOVLW  2A
06C6:  MOVWF  00
.................... 	set_col(actual_col++); 
06C7:  MOVF   61,W
06C8:  INCF   61,F
06C9:  MOVWF  66
06CA:  MOVWF  68
06CB:  CALL   411
06CC:  CLRF   28
06CD:  BTFSC  0B.7
06CE:  BSF    28.7
06CF:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x2A); 
06D0:  MOVF   61,W
06D1:  MOVWF  6C
06D2:  MOVLW  03
06D3:  MOVWF  6D
06D4:  CALL   069
06D5:  BTFSC  28.7
06D6:  BSF    0B.7
06D7:  MOVLW  29
06D8:  ADDWF  78,W
06D9:  MOVWF  04
06DA:  BCF    03.7
06DB:  CLRF   00
06DC:  CLRF   28
06DD:  BTFSC  0B.7
06DE:  BSF    28.7
06DF:  BCF    0B.7
06E0:  MOVF   61,W
06E1:  MOVWF  6C
06E2:  MOVLW  03
06E3:  MOVWF  6D
06E4:  CALL   069
06E5:  BTFSC  28.7
06E6:  BSF    0B.7
06E7:  MOVLW  01
06E8:  ADDWF  78,W
06E9:  ADDLW  29
06EA:  MOVWF  04
06EB:  BCF    03.7
06EC:  MOVLW  2A
06ED:  MOVWF  00
06EE:  CLRF   28
06EF:  BTFSC  0B.7
06F0:  BSF    28.7
06F1:  BCF    0B.7
06F2:  MOVF   61,W
06F3:  MOVWF  6C
06F4:  MOVLW  03
06F5:  MOVWF  6D
06F6:  CALL   069
06F7:  BTFSC  28.7
06F8:  BSF    0B.7
06F9:  MOVLW  02
06FA:  ADDWF  78,W
06FB:  ADDLW  29
06FC:  MOVWF  04
06FD:  BCF    03.7
06FE:  MOVLW  2A
06FF:  MOVWF  00
.................... 	set_col(actual_col++); 
0700:  MOVF   61,W
0701:  INCF   61,F
0702:  MOVWF  66
0703:  MOVWF  68
0704:  CALL   411
0705:  CLRF   28
0706:  BTFSC  0B.7
0707:  BSF    28.7
0708:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x10, 0x10); 
0709:  MOVF   61,W
070A:  MOVWF  6C
070B:  MOVLW  03
070C:  MOVWF  6D
070D:  CALL   069
070E:  BTFSC  28.7
070F:  BSF    0B.7
0710:  MOVLW  29
0711:  ADDWF  78,W
0712:  MOVWF  04
0713:  BCF    03.7
0714:  CLRF   00
0715:  CLRF   28
0716:  BTFSC  0B.7
0717:  BSF    28.7
0718:  BCF    0B.7
0719:  MOVF   61,W
071A:  MOVWF  6C
071B:  MOVLW  03
071C:  MOVWF  6D
071D:  CALL   069
071E:  BTFSC  28.7
071F:  BSF    0B.7
0720:  MOVLW  01
0721:  ADDWF  78,W
0722:  ADDLW  29
0723:  MOVWF  04
0724:  BCF    03.7
0725:  MOVLW  10
0726:  MOVWF  00
0727:  CLRF   28
0728:  BTFSC  0B.7
0729:  BSF    28.7
072A:  BCF    0B.7
072B:  MOVF   61,W
072C:  MOVWF  6C
072D:  MOVLW  03
072E:  MOVWF  6D
072F:  CALL   069
0730:  BTFSC  28.7
0731:  BSF    0B.7
0732:  MOVLW  02
0733:  ADDWF  78,W
0734:  ADDLW  29
0735:  MOVWF  04
0736:  BCF    03.7
0737:  MOVLW  10
0738:  MOVWF  00
.................... 	set_col(actual_col++); 
0739:  MOVF   61,W
073A:  INCF   61,F
073B:  MOVWF  66
073C:  MOVWF  68
073D:  CALL   411
073E:  CLRF   28
073F:  BTFSC  0B.7
0740:  BSF    28.7
0741:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x0); 
0742:  MOVF   61,W
0743:  MOVWF  6C
0744:  MOVLW  03
0745:  MOVWF  6D
0746:  CALL   069
0747:  BTFSC  28.7
0748:  BSF    0B.7
0749:  MOVLW  29
074A:  ADDWF  78,W
074B:  MOVWF  04
074C:  BCF    03.7
074D:  CLRF   00
074E:  CLRF   28
074F:  BTFSC  0B.7
0750:  BSF    28.7
0751:  BCF    0B.7
0752:  MOVF   61,W
0753:  MOVWF  6C
0754:  MOVLW  03
0755:  MOVWF  6D
0756:  CALL   069
0757:  BTFSC  28.7
0758:  BSF    0B.7
0759:  MOVLW  01
075A:  ADDWF  78,W
075B:  ADDLW  29
075C:  MOVWF  04
075D:  BCF    03.7
075E:  CLRF   00
075F:  CLRF   28
0760:  BTFSC  0B.7
0761:  BSF    28.7
0762:  BCF    0B.7
0763:  MOVF   61,W
0764:  MOVWF  6C
0765:  MOVLW  03
0766:  MOVWF  6D
0767:  CALL   069
0768:  BTFSC  28.7
0769:  BSF    0B.7
076A:  MOVLW  02
076B:  ADDWF  78,W
076C:  ADDLW  29
076D:  MOVWF  04
076E:  BCF    03.7
076F:  CLRF   00
.................... 	set_col(actual_col++); 
0770:  MOVF   61,W
0771:  INCF   61,F
0772:  MOVWF  66
0773:  MOVWF  68
0774:  CALL   411
0775:  CLRF   28
0776:  BTFSC  0B.7
0777:  BSF    28.7
0778:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0xBC, 0x0, 0xBC); 
0779:  MOVF   61,W
077A:  MOVWF  6C
077B:  MOVLW  03
077C:  MOVWF  6D
077D:  CALL   069
077E:  BTFSC  28.7
077F:  BSF    0B.7
0780:  MOVLW  29
0781:  ADDWF  78,W
0782:  MOVWF  04
0783:  BCF    03.7
0784:  MOVLW  BC
0785:  MOVWF  00
0786:  CLRF   28
0787:  BTFSC  0B.7
0788:  BSF    28.7
0789:  BCF    0B.7
078A:  MOVF   61,W
078B:  MOVWF  6C
078C:  MOVLW  03
078D:  MOVWF  6D
078E:  CALL   069
078F:  BTFSC  28.7
0790:  BSF    0B.7
0791:  MOVLW  01
0792:  ADDWF  78,W
0793:  ADDLW  29
0794:  MOVWF  04
0795:  BCF    03.7
0796:  CLRF   00
0797:  CLRF   28
0798:  BTFSC  0B.7
0799:  BSF    28.7
079A:  BCF    0B.7
079B:  MOVF   61,W
079C:  MOVWF  6C
079D:  MOVLW  03
079E:  MOVWF  6D
079F:  CALL   069
07A0:  BTFSC  28.7
07A1:  BSF    0B.7
07A2:  MOVLW  02
07A3:  ADDWF  78,W
07A4:  ADDLW  29
07A5:  MOVWF  04
07A6:  BCF    03.7
07A7:  MOVLW  BC
07A8:  MOVWF  00
.................... 	return; 
.................... } 
07A9:  BSF    0A.3
07AA:  BCF    0A.4
07AB:  GOTO   109 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG

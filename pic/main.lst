CCS PCM C Compiler, Version 4.023, 25097               27-Nov-08 01:43

               Filename: main.lst

               ROM used: 2321 words (28%)
                         Largest free fragment is 2048
               RAM used: 78 (21%) at main() level
                         89 (24%) worst case
               Stack:    5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   079
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   2BC
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   0D7
.................... #define _VERSION_ "0.52" 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT,NOPUT 
.................... #use delay(clock=20000000, restart_wdt) 
*
043B:  MOVLW  69
043C:  MOVWF  04
043D:  BCF    03.7
043E:  MOVF   00,W
043F:  BTFSC  03.2
0440:  GOTO   452
0441:  MOVLW  06
0442:  MOVWF  78
0443:  MOVLW  BF
0444:  MOVWF  77
0445:  CLRWDT
0446:  DECFSZ 77,F
0447:  GOTO   445
0448:  DECFSZ 78,F
0449:  GOTO   443
044A:  MOVLW  7A
044B:  MOVWF  77
044C:  DECFSZ 77,F
044D:  GOTO   44C
044E:  GOTO   44F
044F:  CLRWDT
0450:  DECFSZ 00,F
0451:  GOTO   441
0452:  BCF    0A.3
0453:  BCF    0A.4
0454:  GOTO   465 (RETURN)
.................... #use rs232(baud=115200, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... /****** DEFINITIONS ******/ 
.................... typedef enum {B1200 = 0, B2400, B4800, B9600, B19200,  
.................... 				B38400, B57600, B115200} bouds; 
....................  
.................... typedef enum {SCROLL_NONE = 0, SCROLL_RIGHT, SCROLL_LEFT, 
.................... 			SCROLL_UP, SCROLL_DOWN, SCROLL_RIGHT_CARRY, 
.................... 			SCROLL_LEFT_CARRY, SCROLL_UP_CARRY, 
.................... 			SCROLL_DOWN_CARRY} scrolls; 
....................  
.................... #define _SCROLL_DOWN_CARRY		0 
.................... #define _SCROLL_DOWN			1 
.................... #define _SCROLL_UP_CARRY		2 
.................... #define _SCROLL_UP				3 
.................... #define _SCROLL_LEFT_CARRY		4 
.................... #define _SCROLL_LEFT			5 
.................... #define _SCROLL_RIGHT_CARRY		6 
.................... #define _SCROLL_RIGHT			7 
.................... #define _START_SCROLL			8 
.................... #define _STOP_SCROLL			9 
....................  
.................... #define DISABLED			0 
.................... #define ENABLED				(DISABLED + 1) 
....................  
.................... /* STATUS*/ 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... /* LEDS */ 
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define SET_74154_TIME		1 
.................... #define SET_74573_TIME		0 
.................... #define SCREEN_WIDTH		16 
.................... #define COLOR_COUNT			3 
.................... #define SCREEN				(COLOR_COUNT * SCREEN_WIDTH) 
....................  
.................... #define SET_ACTUAL_COLUMN(r,g,b) matrix[(actual_col * 3)]=r;matrix[(actual_col * 3) + 1]=g;matrix[(actual_col * 3) + 2]=b; 
....................  
.................... /* TIMER */ 
.................... // 76 && 256 -> 1Hz 
.................... #define DEFAULT_TIMER_COUNT	76 
.................... #define DEFAULT_TIMER_DIV	RTCC_DIV_256 
.................... #define DEFAULT_PING_COUNT	38 // ping every 500ms 
.................... #define PING_PONG_COUNT		50 
....................  
.................... /****** FUNCTIONS ******/ 
....................  
.................... /* LEDS */ 
.................... void clear(void); 
.................... void set_red(byte color); 
.................... void set_green(byte color); 
.................... void set_blue(byte color); 
.................... void set_col(byte col); 
.................... void get_col(void); 
.................... void scrollUp(void); 
.................... void scrollUpCarry(void); 
.................... void scrollDown(void); 
.................... void scrollDownCarry(void); 
.................... void scrollLeft(void); 
.................... void scrollLeftCarry(void); 
.................... void scrollRight(void); 
.................... void scrollRightCarry(void); 
.................... void setScreen(byte * buffer); 
.................... void getScreen(void); 
.................... void clearScreen(void); 
.................... void stopScroll(void); 
.................... void startScroll(void); 
.................... void setUARTSpeed(byte speed); 
.................... void setScrollFreq(byte freq); 
.................... void ping(void); 
.................... void pong(void); 
.................... void showSplashScreen(void); 
....................  
.................... /* TIMER */ 
.................... byte matrix[SCREEN]; 
....................  
.................... /****** IMPLEMENTATION ******/ 
.................... byte timer_div = DEFAULT_TIMER_DIV; 
*
088A:  MOVLW  07
088B:  BCF    03.5
088C:  MOVWF  59
.................... byte timer_count = DEFAULT_TIMER_COUNT; 
088D:  MOVLW  4C
088E:  MOVWF  5A
.................... byte int_count = DEFAULT_TIMER_COUNT; 
088F:  MOVWF  5B
.................... byte int_ping_count = DEFAULT_PING_COUNT; 
0890:  MOVLW  26
0891:  MOVWF  5C
.................... byte ping_count = DEFAULT_PING_COUNT; 
0892:  MOVWF  5D
.................... byte scroll = DISABLED; 
0893:  CLRF   5E
.................... byte scroll_type = SCROLL_NONE; 
0894:  CLRF   5F
.................... byte do_reset = PING_PONG_COUNT; 
0895:  MOVLW  32
0896:  MOVWF  60
.................... byte actual_col = 0; 
0897:  CLRF   61
.................... byte status = 0; 
0898:  CLRF   62
.................... byte column = 0; 
0899:  CLRF   63
....................  
.................... /* INTERRUPT */ 
.................... #INT_RDA 
.................... void recv_rs232(void) 
.................... { 
.................... 	int recv = 0; 
*
00D7:  CLRF   6B
.................... 	//disable_interrupts(GLOBAL); 
.................... 	LINK_ENA 
00D8:  BSF    03.5
00D9:  BCF    08.2
00DA:  BCF    03.5
00DB:  BSF    08.2
.................... 	recv = getc(); 
00DC:  BTFSS  0C.5
00DD:  GOTO   0DC
00DE:  MOVF   1A,W
00DF:  MOVWF  6B
....................  
.................... 	if (status == 0x01) 
00E0:  DECFSZ 62,W
00E1:  GOTO   0F0
.................... 	{ 
.................... 		status = 0x02; 
00E2:  MOVLW  02
00E3:  MOVWF  62
.................... 		matrix[column * 3] = recv; 
00E4:  MOVF   63,W
00E5:  MOVWF  6C
00E6:  MOVLW  03
00E7:  MOVWF  6D
00E8:  CALL   091
00E9:  MOVLW  29
00EA:  ADDWF  78,W
00EB:  MOVWF  04
00EC:  BCF    03.7
00ED:  MOVF   6B,W
00EE:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x02) 
00EF:  GOTO   2B8
00F0:  MOVF   62,W
00F1:  SUBLW  02
00F2:  BTFSS  03.2
00F3:  GOTO   103
.................... 	{ 
.................... 		status = 0x03; 
00F4:  MOVLW  03
00F5:  MOVWF  62
.................... 		matrix[column * 3 + 1] = recv; 
00F6:  MOVF   63,W
00F7:  MOVWF  6C
00F8:  MOVLW  03
00F9:  MOVWF  6D
00FA:  CALL   091
00FB:  MOVLW  01
00FC:  ADDWF  78,W
00FD:  ADDLW  29
00FE:  MOVWF  04
00FF:  BCF    03.7
0100:  MOVF   6B,W
0101:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0x03) 
0102:  GOTO   2B8
0103:  MOVF   62,W
0104:  SUBLW  03
0105:  BTFSS  03.2
0106:  GOTO   115
.................... 	{ 
.................... 		status = 0x00; 
0107:  CLRF   62
.................... 		matrix[column * 3 + 2] = recv; 
0108:  MOVF   63,W
0109:  MOVWF  6C
010A:  MOVLW  03
010B:  MOVWF  6D
010C:  CALL   091
010D:  MOVLW  02
010E:  ADDWF  78,W
010F:  ADDLW  29
0110:  MOVWF  04
0111:  BCF    03.7
0112:  MOVF   6B,W
0113:  MOVWF  00
.................... 	} 
.................... 	else if (status == 0) 
0114:  GOTO   2B8
0115:  MOVF   62,F
0116:  BTFSS  03.2
0117:  GOTO   2B8
.................... 	{ 
.................... 		// SET COLUMN (0100 ABCD) + R + G + B 
.................... 		if ((recv & 0xF0) == 0x40) 
0118:  MOVF   6B,W
0119:  ANDLW  F0
011A:  SUBLW  40
011B:  BTFSS  03.2
011C:  GOTO   122
.................... 		{ 
.................... 			column = recv & 0x0F; 
011D:  MOVF   6B,W
011E:  ANDLW  0F
011F:  MOVWF  63
.................... 			status = 0x01; 
0120:  MOVLW  01
0121:  MOVWF  62
.................... 		} 
.................... 		// CLEAR SCREEN (0000 0000) 
.................... 		if (recv == 0x00) 
0122:  MOVF   6B,F
0123:  BTFSS  03.2
0124:  GOTO   132
.................... 			clearScreen(); 
.................... 		// GET SCREEN (0101 1010) 
.................... 		if (recv == 0x5A) 
*
0132:  MOVF   6B,W
0133:  SUBLW  5A
0134:  BTFSS  03.2
0135:  GOTO   150
.................... 			getScreen(); 
.................... 		// PONG RECV (0111 1110) 
.................... 		if (recv == 0x7E) 
*
0150:  MOVF   6B,W
0151:  SUBLW  7E
0152:  BTFSS  03.2
0153:  GOTO   156
.................... 			pong(); 
.................... 		// SET UART SPEED (0000 1ABC) 
.................... 		if ((recv & 0xF8) == 0x08) 
*
0156:  MOVF   6B,W
0157:  ANDLW  F8
0158:  SUBLW  08
0159:  BTFSS  03.2
015A:  GOTO   1B1
.................... 			setUARTSpeed(recv & 0x07); 
015B:  MOVF   6B,W
015C:  ANDLW  07
015D:  MOVWF  6C
015E:  MOVF   6C,W
015F:  MOVWF  6D
.................... 		// SET SCROLL FREQ (0010 ABCD) 
.................... 		if ((recv & 0xF0) == 0x20) 
*
01B1:  MOVF   6B,W
01B2:  ANDLW  F0
01B3:  SUBLW  20
01B4:  BTFSS  03.2
01B5:  GOTO   26D
.................... 			setScrollFreq(recv & 0x0F); 
01B6:  MOVF   6B,W
01B7:  ANDLW  0F
01B8:  MOVWF  6C
01B9:  MOVF   6C,W
01BA:  MOVWF  6D
.................... 		// SCROLL (0001 ABCD) 
.................... 		if ((recv & 0xF0) == 0x10) 
*
026D:  MOVF   6B,W
026E:  ANDLW  F0
026F:  SUBLW  10
0270:  BTFSS  03.2
0271:  GOTO   2B8
.................... 		{ 
.................... 			switch (recv & 0x0F) 
.................... 			{ 
0272:  MOVF   6B,W
0273:  ANDLW  0F
0274:  BTFSC  03.2
0275:  GOTO   292
0276:  XORLW  01
0277:  BTFSC  03.2
0278:  GOTO   296
0279:  XORLW  03
027A:  BTFSC  03.2
027B:  GOTO   29A
027C:  XORLW  01
027D:  BTFSC  03.2
027E:  GOTO   29E
027F:  XORLW  07
0280:  BTFSC  03.2
0281:  GOTO   2A2
0282:  XORLW  01
0283:  BTFSC  03.2
0284:  GOTO   2A6
0285:  XORLW  03
0286:  BTFSC  03.2
0287:  GOTO   2AA
0288:  XORLW  01
0289:  BTFSC  03.2
028A:  GOTO   2AE
028B:  XORLW  0F
028C:  BTFSC  03.2
028D:  GOTO   2B2
028E:  XORLW  01
028F:  BTFSC  03.2
0290:  GOTO   2B4
0291:  GOTO   2B6
.................... 				case _SCROLL_DOWN_CARRY: 
.................... 					scroll_type = SCROLL_DOWN_CARRY; 
0292:  MOVLW  08
0293:  MOVWF  5F
.................... 					startScroll(); 
0294:  CALL   0B6
.................... 					break; 
0295:  GOTO   2B8
.................... 				case _SCROLL_DOWN: 
.................... 					scroll_type = SCROLL_DOWN; 
0296:  MOVLW  04
0297:  MOVWF  5F
.................... 					startScroll(); 
0298:  CALL   0B6
.................... 					break; 
0299:  GOTO   2B8
.................... 				case _SCROLL_UP_CARRY: 
.................... 					scroll_type = SCROLL_UP_CARRY; 
029A:  MOVLW  07
029B:  MOVWF  5F
.................... 					startScroll(); 
029C:  CALL   0B6
.................... 					break; 
029D:  GOTO   2B8
.................... 				case _SCROLL_UP: 
.................... 					scroll_type = SCROLL_UP; 
029E:  MOVLW  03
029F:  MOVWF  5F
.................... 					startScroll(); 
02A0:  CALL   0B6
.................... 					break; 
02A1:  GOTO   2B8
.................... 				case _SCROLL_LEFT_CARRY: 
.................... 					scroll_type = SCROLL_LEFT_CARRY; 
02A2:  MOVLW  06
02A3:  MOVWF  5F
.................... 					startScroll(); 
02A4:  CALL   0B6
.................... 					break; 
02A5:  GOTO   2B8
.................... 				case _SCROLL_LEFT: 
.................... 					scroll_type = SCROLL_LEFT; 
02A6:  MOVLW  02
02A7:  MOVWF  5F
.................... 					startScroll(); 
02A8:  CALL   0B6
.................... 					break; 
02A9:  GOTO   2B8
.................... 				case _SCROLL_RIGHT_CARRY: 
.................... 					scroll_type = SCROLL_RIGHT_CARRY; 
02AA:  MOVLW  05
02AB:  MOVWF  5F
.................... 					startScroll(); 
02AC:  CALL   0B6
.................... 					break; 
02AD:  GOTO   2B8
.................... 				case _SCROLL_RIGHT: 
.................... 					scroll_type = SCROLL_RIGHT; 
02AE:  MOVLW  01
02AF:  MOVWF  5F
.................... 					startScroll(); 
02B0:  CALL   0B6
.................... 					break; 
02B1:  GOTO   2B8
.................... 				case _START_SCROLL: 
.................... 					startScroll(); 
02B2:  CALL   0B6
.................... 					break; 
02B3:  GOTO   2B8
.................... 				case _STOP_SCROLL: 
.................... 					stopScroll(); 
02B4:  CALL   0D5
.................... 					break; 
02B5:  GOTO   2B8
.................... 				default: 
.................... 					stopScroll(); 
02B6:  CALL   0D5
.................... 					break; 
02B7:  GOTO   2B8
.................... 			} 
.................... 		} 
.................... 	} 
....................  
.................... 	//enable_interrupts(GLOBAL); 
.................... 	return; 
.................... } 
....................  
02B8:  BCF    0C.5
02B9:  BCF    0A.3
02BA:  BCF    0A.4
02BB:  GOTO   023
.................... #INT_RTCC 
.................... void clock(void) 
.................... { 
.................... 	LINK_DIS 
02BC:  BSF    03.5
02BD:  BCF    08.2
02BE:  BCF    03.5
02BF:  BCF    08.2
....................  
.................... 	if(0 == (--int_ping_count)) 
02C0:  DECFSZ 5C,F
02C1:  GOTO   2DC
.................... 	{ 
.................... 		ping(); 
.................... 		int_ping_count = ping_count; 
*
02C6:  MOVF   5D,W
02C7:  MOVWF  5C
.................... 		if (0 == do_reset--) 
02C8:  MOVF   60,W
02C9:  DECF   60,F
02CA:  XORLW  00
02CB:  BTFSS  03.2
02CC:  GOTO   2DC
.................... 		{ 
.................... 			printf("\r\n# Ping timeout - check drivers#\r\n"); 
02CD:  CLRF   6B
02CE:  MOVF   6B,W
02CF:  CALL   03C
02D0:  INCF   6B,F
02D1:  MOVWF  77
02D2:  MOVF   77,W
02D3:  BTFSS  0C.4
02D4:  GOTO   2D3
02D5:  MOVWF  19
02D6:  MOVLW  23
02D7:  SUBWF  6B,W
02D8:  BTFSS  03.2
02D9:  GOTO   2CE
.................... 			reset_cpu(); 
02DA:  CLRF   0A
02DB:  GOTO   000
.................... 		} 
.................... 	} 
....................  
.................... 	if((scroll == ENABLED) && (0 == (--int_count))) 
02DC:  DECFSZ 5E,W
02DD:  GOTO   417
02DE:  DECFSZ 5B,F
02DF:  GOTO   417
.................... 	{ 
.................... 		switch (scroll_type) 
.................... 		{ 
02E0:  MOVF   5F,W
02E1:  XORLW  01
02E2:  BTFSC  03.2
02E3:  GOTO   2FA
02E4:  XORLW  03
02E5:  BTFSC  03.2
02E6:  GOTO   31B
02E7:  XORLW  01
02E8:  BTFSC  03.2
02E9:  GOTO   349
02EA:  XORLW  07
02EB:  BTFSC  03.2
02EC:  GOTO   361
02ED:  XORLW  01
02EE:  BTFSC  03.2
02EF:  GOTO   377
02F0:  XORLW  03
02F1:  BTFSC  03.2
02F2:  GOTO   3B0
02F3:  XORLW  01
02F4:  BTFSC  03.2
02F5:  GOTO   3E7
02F6:  XORLW  0F
02F7:  BTFSC  03.2
02F8:  GOTO   3FD
02F9:  GOTO   413
.................... 			case SCROLL_RIGHT: 
.................... 				scrollRight(); 
.................... 				break; 
*
031A:  GOTO   415
.................... 			case SCROLL_LEFT: 
.................... 				scrollLeft(); 
.................... 				break; 
*
0348:  GOTO   415
.................... 			case SCROLL_UP: 
.................... 				scrollUp(); 
.................... 				break; 
*
0360:  GOTO   415
.................... 			case SCROLL_DOWN: 
.................... 				scrollDown(); 
.................... 				break; 
*
0376:  GOTO   415
.................... 			case SCROLL_RIGHT_CARRY: 
.................... 				scrollRightCarry(); 
.................... 				break; 
*
03AF:  GOTO   415
.................... 			case SCROLL_LEFT_CARRY: 
.................... 				scrollLeftCarry(); 
.................... 				break; 
*
03E6:  GOTO   415
.................... 			case SCROLL_UP_CARRY: 
.................... 				scrollUpCarry(); 
.................... 				break; 
*
03FC:  GOTO   415
.................... 			case SCROLL_DOWN_CARRY: 
.................... 				scrollDownCarry(); 
.................... 				break; 
*
0412:  GOTO   415
.................... 			default: 
.................... 				stopScroll(); 
0413:  CALL   0D5
.................... 				break; 
0414:  GOTO   415
.................... 		} 
.................... 		int_count = timer_count; 
0415:  MOVF   5A,W
0416:  MOVWF  5B
.................... 	} 
.................... } 
....................  
0417:  BCF    0B.2
0418:  BCF    0A.3
0419:  BCF    0A.4
041A:  GOTO   023
.................... void showScreen(void) 
.................... { 
.................... 	int i; 
.................... 	actual_col = 0; 
*
0800:  CLRF   61
.................... 	for (i = 0; i < SCREEN; i+=3) 
0801:  CLRF   66
0802:  MOVF   66,W
0803:  SUBLW  2F
0804:  BTFSS  03.0
0805:  GOTO   076
.................... 	{ 
.................... 		COL_DIS 
0806:  BSF    03.5
0807:  BCF    08.1
0808:  BCF    03.5
0809:  BSF    08.1
.................... 		set_red(matrix[i]); 
080A:  MOVLW  29
080B:  ADDWF  66,W
080C:  MOVWF  04
080D:  BCF    03.7
080E:  MOVF   00,W
080F:  MOVWF  67
0810:  MOVF   67,W
0811:  MOVWF  68
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_green(matrix[i+1]); 
*
082A:  MOVLW  01
082B:  ADDWF  66,W
082C:  ADDLW  29
082D:  MOVWF  04
082E:  BCF    03.7
082F:  MOVF   00,W
0830:  MOVWF  68
0831:  MOVF   68,W
0832:  MOVWF  69
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_blue(matrix[i+2]); 
*
084B:  MOVLW  02
084C:  ADDWF  66,W
084D:  ADDLW  29
084E:  MOVWF  04
084F:  BCF    03.7
0850:  MOVF   00,W
0851:  MOVWF  68
0852:  MOVF   68,W
0853:  MOVWF  69
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_col(actual_col++); 
*
086C:  MOVF   61,W
086D:  INCF   61,F
086E:  MOVWF  67
086F:  MOVWF  68
0870:  BCF    0A.3
0871:  CALL   455
0872:  BSF    0A.3
.................... 	} 
0873:  MOVLW  03
0874:  ADDWF  66,F
0875:  GOTO   002
.................... 	return; 
.................... } 
0876:  BSF    0A.3
0877:  BCF    0A.4
0878:  GOTO   10F (RETURN)
....................  
.................... /* MAIN */ 
.................... void main(void) 
.................... { 
0879:  CLRF   04
087A:  BCF    03.7
087B:  MOVLW  1F
087C:  ANDWF  03,F
087D:  MOVLW  0A
087E:  BSF    03.5
087F:  MOVWF  19
0880:  MOVLW  A6
0881:  MOVWF  18
0882:  MOVLW  90
0883:  BCF    03.5
0884:  MOVWF  18
0885:  BSF    03.5
0886:  BSF    1F.0
0887:  BSF    1F.1
0888:  BSF    1F.2
0889:  BCF    1F.3
.................... 	int i; 
.................... 	unsigned byte alive = 0; 
*
089A:  CLRF   65
....................  
.................... 	set_tris_a(0x00); 
089B:  MOVLW  00
089C:  BSF    03.5
089D:  MOVWF  05
.................... 	set_tris_b(0x00); 
089E:  MOVWF  06
.................... 	set_tris_d(0x00); 
089F:  MOVWF  08
....................  
.................... 	output_a(0x00); 
08A0:  CLRF   05
08A1:  BCF    03.5
08A2:  CLRF   05
.................... 	output_b(0xFF); 
08A3:  BSF    03.5
08A4:  CLRF   06
08A5:  MOVLW  FF
08A6:  BCF    03.5
08A7:  MOVWF  06
.................... 	output_d(0x00); 
08A8:  BSF    03.5
08A9:  CLRF   08
08AA:  BCF    03.5
08AB:  CLRF   08
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
08AC:  CLRF   64
08AD:  MOVF   64,W
08AE:  SUBLW  2F
08AF:  BTFSS  03.0
08B0:  GOTO   0B8
.................... 		matrix[i] = 0; 
08B1:  MOVLW  29
08B2:  ADDWF  64,W
08B3:  MOVWF  04
08B4:  BCF    03.7
08B5:  CLRF   00
08B6:  INCF   64,F
08B7:  GOTO   0AD
....................  
.................... 	status = 0; //means waiting for a command 
08B8:  CLRF   62
.................... 	// scroll? 
.................... 	scroll = DISABLED; 
08B9:  CLRF   5E
.................... 	scroll_type = SCROLL_NONE; 
08BA:  CLRF   5F
.................... 	// watch dog 
.................... 	do_reset = PING_PONG_COUNT; 
08BB:  MOVLW  32
08BC:  MOVWF  60
.................... 	ping_count = DEFAULT_PING_COUNT; 
08BD:  MOVLW  26
08BE:  MOVWF  5D
.................... 	// reset timer0 
.................... 	set_rtcc(0); 
08BF:  CLRF   01
.................... 	timer_div = RTCC_DIV_256; 
08C0:  MOVLW  07
08C1:  MOVWF  59
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
08C2:  MOVF   59,W
08C3:  MOVWF  77
08C4:  BTFSS  59.3
08C5:  GOTO   0CF
08C6:  MOVLW  07
08C7:  CLRF   01
08C8:  MOVLW  81
08C9:  MOVWF  04
08CA:  BCF    03.7
08CB:  MOVF   00,W
08CC:  ANDLW  C0
08CD:  IORLW  0F
08CE:  MOVWF  00
08CF:  CLRWDT
08D0:  MOVLW  81
08D1:  MOVWF  04
08D2:  MOVF   00,W
08D3:  ANDLW  C0
08D4:  IORWF  77,W
08D5:  MOVWF  00
.................... 	//timer interrupt 
.................... 	enable_interrupts (INT_RTCC); 
08D6:  BSF    0B.5
.................... 	//serial interrupt 
.................... 	enable_interrupts(INT_RDA); 
08D7:  BSF    03.5
08D8:  BSF    0C.5
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
08D9:  MOVLW  C0
08DA:  BCF    03.5
08DB:  IORWF  0B,F
....................  
.................... 	printf("\r\nInitializing Fleds (ver %s)\r\n", _VERSION_); 
08DC:  CLRF   66
08DD:  MOVF   66,W
08DE:  BCF    0A.3
08DF:  CALL   064
08E0:  BSF    0A.3
08E1:  INCF   66,F
08E2:  MOVWF  77
08E3:  MOVF   77,W
08E4:  BTFSS  0C.4
08E5:  GOTO   0E4
08E6:  MOVWF  19
08E7:  MOVLW  1A
08E8:  SUBWF  66,W
08E9:  BTFSS  03.2
08EA:  GOTO   0DD
08EB:  CLRF   67
08EC:  MOVF   67,W
08ED:  BCF    0A.3
08EE:  CALL   088
08EF:  BSF    0A.3
08F0:  IORLW  00
08F1:  BTFSC  03.2
08F2:  GOTO   0F8
08F3:  INCF   67,F
08F4:  BTFSS  0C.4
08F5:  GOTO   0F4
08F6:  MOVWF  19
08F7:  GOTO   0EC
08F8:  MOVLW  29
08F9:  BTFSS  0C.4
08FA:  GOTO   0F9
08FB:  MOVWF  19
08FC:  MOVLW  0D
08FD:  BTFSS  0C.4
08FE:  GOTO   0FD
08FF:  MOVWF  19
0900:  MOVLW  0A
0901:  BTFSS  0C.4
0902:  GOTO   101
0903:  MOVWF  19
....................  
.................... 	clear(); 
0904:  BCF    0A.3
0905:  GOTO   41B
0906:  BSF    0A.3
....................  
.................... 	showSplashScreen(); 
0907:  BCF    0A.3
0908:  GOTO   46A
0909:  BSF    0A.3
....................  
.................... 	set_col(0); 
090A:  CLRF   68
090B:  BCF    0A.3
090C:  CALL   455
090D:  BSF    0A.3
.................... 	while(1) 
.................... 	{ 
.................... 		showScreen(); 
090E:  GOTO   000
.................... 		// Red led -> Alive! 
.................... 		if (0 == alive) 
090F:  MOVF   65,F
0910:  BTFSS  03.2
0911:  GOTO   116
.................... 			STATUS_ENA 
0912:  BSF    03.5
0913:  BCF    08.3
0914:  BCF    03.5
0915:  BSF    08.3
.................... 		if (128 == alive++) 
0916:  MOVF   65,W
0917:  INCF   65,F
0918:  SUBLW  80
0919:  BTFSS  03.2
091A:  GOTO   11F
.................... 			STATUS_DIS 
091B:  BSF    03.5
091C:  BCF    08.3
091D:  BCF    03.5
091E:  BCF    08.3
.................... 	} 
091F:  GOTO   10E
....................  
....................  	return; 
.................... } 
....................  
.................... /* LEDS */ 
.................... void set_col(byte col) 
.................... { 
0920:  SLEEP
.................... 	if (col < 16) 
*
0455:  MOVF   68,W
0456:  SUBLW  0F
0457:  BTFSS  03.0
0458:  GOTO   469
.................... 	{ 
.................... 		output_a(col); 
0459:  BSF    03.5
045A:  CLRF   05
045B:  BCF    03.5
045C:  MOVF   68,W
045D:  MOVWF  05
.................... 		COL_ENA 
045E:  BSF    03.5
045F:  BCF    08.1
0460:  BCF    03.5
0461:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
0462:  MOVLW  01
0463:  MOVWF  69
0464:  GOTO   43B
.................... 		COL_DIS 
0465:  BSF    03.5
0466:  BCF    08.1
0467:  BCF    03.5
0468:  BSF    08.1
.................... 	} 
.................... 	return; 
.................... } 
0469:  RETLW  00
....................  
.................... void get_col(void) 
.................... { 
.................... 	putchar('<'); 
.................... 	putchar(actual_col); 
.................... 	putchar('>'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
041B:  BSF    03.5
041C:  BCF    08.7
041D:  BCF    03.5
041E:  BSF    08.7
.................... 	G_ENA 
041F:  BSF    03.5
0420:  BCF    08.6
0421:  BCF    03.5
0422:  BSF    08.6
.................... 	B_ENA 
0423:  BSF    03.5
0424:  BCF    08.5
0425:  BCF    03.5
0426:  BSF    08.5
.................... 	output_b(0xFF); 
0427:  BSF    03.5
0428:  CLRF   06
0429:  MOVLW  FF
042A:  BCF    03.5
042B:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
042C:  BSF    03.5
042D:  BCF    08.7
042E:  BCF    03.5
042F:  BCF    08.7
.................... 	G_DIS 
0430:  BSF    03.5
0431:  BCF    08.6
0432:  BCF    03.5
0433:  BCF    08.6
.................... 	B_DIS 
0434:  BSF    03.5
0435:  BCF    08.5
0436:  BCF    03.5
0437:  BCF    08.5
.................... 	return; 
.................... } 
0438:  BSF    0A.3
0439:  BCF    0A.4
043A:  GOTO   106 (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
*
0812:  BSF    03.5
0813:  BCF    08.6
0814:  BCF    03.5
0815:  BCF    08.6
.................... 	B_DIS 
0816:  BSF    03.5
0817:  BCF    08.5
0818:  BCF    03.5
0819:  BCF    08.5
.................... 	output_b(0xFF - color); 
081A:  MOVF   68,W
081B:  SUBLW  FF
081C:  MOVWF  69
081D:  BSF    03.5
081E:  CLRF   06
081F:  BCF    03.5
0820:  MOVF   69,W
0821:  MOVWF  06
.................... 	R_ENA 
0822:  BSF    03.5
0823:  BCF    08.7
0824:  BCF    03.5
0825:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
0826:  BSF    03.5
0827:  BCF    08.7
0828:  BCF    03.5
0829:  BCF    08.7
.................... 	return; 
.................... } 
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
*
0833:  BSF    03.5
0834:  BCF    08.6
0835:  BCF    03.5
0836:  BCF    08.6
.................... 	B_DIS 
0837:  BSF    03.5
0838:  BCF    08.5
0839:  BCF    03.5
083A:  BCF    08.5
.................... 	output_b(0xFF - color); 
083B:  MOVF   69,W
083C:  SUBLW  FF
083D:  MOVWF  6A
083E:  BSF    03.5
083F:  CLRF   06
0840:  BCF    03.5
0841:  MOVF   6A,W
0842:  MOVWF  06
.................... 	G_ENA 
0843:  BSF    03.5
0844:  BCF    08.6
0845:  BCF    03.5
0846:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
0847:  BSF    03.5
0848:  BCF    08.6
0849:  BCF    03.5
084A:  BCF    08.6
.................... 	return; 
.................... } 
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
*
0854:  BSF    03.5
0855:  BCF    08.6
0856:  BCF    03.5
0857:  BCF    08.6
.................... 	B_DIS 
0858:  BSF    03.5
0859:  BCF    08.5
085A:  BCF    03.5
085B:  BCF    08.5
.................... 	output_b(0xFF - color);	 
085C:  MOVF   69,W
085D:  SUBLW  FF
085E:  MOVWF  6A
085F:  BSF    03.5
0860:  CLRF   06
0861:  BCF    03.5
0862:  MOVF   6A,W
0863:  MOVWF  06
.................... 	B_ENA 
0864:  BSF    03.5
0865:  BCF    08.5
0866:  BCF    03.5
0867:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
0868:  BSF    03.5
0869:  BCF    08.5
086A:  BCF    03.5
086B:  BCF    08.5
.................... 	return; 
.................... } 
....................  
.................... void scrollUpCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03E7:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
03E8:  CLRF   6B
03E9:  MOVF   6B,W
03EA:  SUBLW  2F
03EB:  BTFSS  03.0
03EC:  GOTO   3FC
.................... 		rotate_right(matrix + i, 1); 
03ED:  MOVLW  29
03EE:  ADDWF  6B,W
03EF:  MOVWF  6C
03F0:  CLRF   6D
03F1:  BTFSC  03.0
03F2:  INCF   6D,F
03F3:  MOVF   6C,W
03F4:  MOVWF  04
03F5:  BCF    03.7
03F6:  BTFSC  6D.0
03F7:  BSF    03.7
03F8:  RRF    00,W
03F9:  RRF    00,F
03FA:  INCF   6B,F
03FB:  GOTO   3E9
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollUp(void) 
.................... { 
.................... 	byte i = 0; 
*
0349:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
034A:  CLRF   6B
034B:  MOVF   6B,W
034C:  SUBLW  2F
034D:  BTFSS  03.0
034E:  GOTO   360
.................... 		shift_right(matrix + i, 1, 0); 
034F:  MOVLW  29
0350:  ADDWF  6B,W
0351:  MOVWF  6C
0352:  CLRF   6D
0353:  BTFSC  03.0
0354:  INCF   6D,F
0355:  MOVF   6C,W
0356:  MOVWF  04
0357:  BCF    03.7
0358:  BTFSC  6D.0
0359:  BSF    03.7
035A:  MOVLW  00
035B:  ADDWF  04,F
035C:  BCF    03.0
035D:  RRF    00,F
035E:  INCF   6B,F
035F:  GOTO   34B
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDownCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03FD:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
03FE:  CLRF   6B
03FF:  MOVF   6B,W
0400:  SUBLW  2F
0401:  BTFSS  03.0
0402:  GOTO   412
.................... 		rotate_left(matrix + i, 1); 
0403:  MOVLW  29
0404:  ADDWF  6B,W
0405:  MOVWF  6C
0406:  CLRF   6D
0407:  BTFSC  03.0
0408:  INCF   6D,F
0409:  MOVF   6C,W
040A:  MOVWF  04
040B:  BCF    03.7
040C:  BTFSC  6D.0
040D:  BSF    03.7
040E:  RLF    00,W
040F:  RLF    00,F
0410:  INCF   6B,F
0411:  GOTO   3FF
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDown(void) 
.................... { 
.................... 	byte i = 0; 
*
0361:  CLRF   6B
.................... 	for(i = 0; i < SCREEN; i++) 
0362:  CLRF   6B
0363:  MOVF   6B,W
0364:  SUBLW  2F
0365:  BTFSS  03.0
0366:  GOTO   376
.................... 		shift_left(matrix + i, 1, 0); 
0367:  MOVLW  29
0368:  ADDWF  6B,W
0369:  MOVWF  6C
036A:  CLRF   6D
036B:  BTFSC  03.0
036C:  INCF   6D,F
036D:  MOVF   6C,W
036E:  MOVWF  04
036F:  BCF    03.7
0370:  BTFSC  6D.0
0371:  BSF    03.7
0372:  BCF    03.0
0373:  RLF    00,F
0374:  INCF   6B,F
0375:  GOTO   363
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeft(void) 
.................... { 
.................... 	byte i = 0; 
*
031B:  CLRF   6B
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
031C:  CLRF   6B
031D:  MOVF   6B,W
031E:  SUBLW  2C
031F:  BTFSS  03.0
0320:  GOTO   337
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
0321:  MOVLW  29
0322:  ADDWF  6B,W
0323:  MOVWF  78
0324:  CLRF   7A
0325:  BTFSC  03.0
0326:  INCF   7A,F
0327:  MOVLW  03
0328:  ADDWF  6B,W
0329:  ADDLW  29
032A:  MOVWF  04
032B:  BCF    03.7
032C:  MOVF   00,W
032D:  MOVWF  6F
032E:  MOVF   78,W
032F:  MOVWF  04
0330:  BCF    03.7
0331:  BTFSC  7A.0
0332:  BSF    03.7
0333:  MOVF   6F,W
0334:  MOVWF  00
.................... 	} 
0335:  INCF   6B,F
0336:  GOTO   31D
.................... 	// clear last column 
.................... 	matrix[i] = 0; 
0337:  MOVLW  29
0338:  ADDWF  6B,W
0339:  MOVWF  04
033A:  BCF    03.7
033B:  CLRF   00
.................... 	matrix[i+1] = 0; 
033C:  MOVLW  01
033D:  ADDWF  6B,W
033E:  ADDLW  29
033F:  MOVWF  04
0340:  BCF    03.7
0341:  CLRF   00
.................... 	matrix[i+2] = 0; 
0342:  MOVLW  02
0343:  ADDWF  6B,W
0344:  ADDLW  29
0345:  MOVWF  04
0346:  BCF    03.7
0347:  CLRF   00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeftCarry(void) 
.................... { 
.................... 	byte i = 0, r, g, b; 
*
03B0:  CLRF   6B
....................  
.................... 	// Backup first column 
.................... 	r = matrix[0]; 
03B1:  MOVF   29,W
03B2:  MOVWF  6C
.................... 	g = matrix[1]; 
03B3:  MOVF   2A,W
03B4:  MOVWF  6D
.................... 	b = matrix[2]; 
03B5:  MOVF   2B,W
03B6:  MOVWF  6E
....................  
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
03B7:  CLRF   6B
03B8:  MOVF   6B,W
03B9:  SUBLW  2C
03BA:  BTFSS  03.0
03BB:  GOTO   3D2
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
03BC:  MOVLW  29
03BD:  ADDWF  6B,W
03BE:  MOVWF  78
03BF:  CLRF   7A
03C0:  BTFSC  03.0
03C1:  INCF   7A,F
03C2:  MOVLW  03
03C3:  ADDWF  6B,W
03C4:  ADDLW  29
03C5:  MOVWF  04
03C6:  BCF    03.7
03C7:  MOVF   00,W
03C8:  MOVWF  72
03C9:  MOVF   78,W
03CA:  MOVWF  04
03CB:  BCF    03.7
03CC:  BTFSC  7A.0
03CD:  BSF    03.7
03CE:  MOVF   72,W
03CF:  MOVWF  00
.................... 	} 
03D0:  INCF   6B,F
03D1:  GOTO   3B8
.................... 	// set last column 
.................... 	matrix[i] = r; 
03D2:  MOVLW  29
03D3:  ADDWF  6B,W
03D4:  MOVWF  04
03D5:  BCF    03.7
03D6:  MOVF   6C,W
03D7:  MOVWF  00
.................... 	matrix[i+1] = g; 
03D8:  MOVLW  01
03D9:  ADDWF  6B,W
03DA:  ADDLW  29
03DB:  MOVWF  04
03DC:  BCF    03.7
03DD:  MOVF   6D,W
03DE:  MOVWF  00
.................... 	matrix[i+2] = b; 
03DF:  MOVLW  02
03E0:  ADDWF  6B,W
03E1:  ADDLW  29
03E2:  MOVWF  04
03E3:  BCF    03.7
03E4:  MOVF   6E,W
03E5:  MOVWF  00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRight(void) 
.................... { 
.................... 	byte i = SCREEN-1; 
*
02FA:  MOVLW  2F
02FB:  MOVWF  6B
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
02FC:  MOVWF  6B
02FD:  MOVF   6B,W
02FE:  SUBLW  02
02FF:  BTFSC  03.0
0300:  GOTO   317
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
0301:  MOVLW  29
0302:  ADDWF  6B,W
0303:  MOVWF  78
0304:  CLRF   7A
0305:  BTFSC  03.0
0306:  INCF   7A,F
0307:  MOVLW  03
0308:  SUBWF  6B,W
0309:  ADDLW  29
030A:  MOVWF  04
030B:  BCF    03.7
030C:  MOVF   00,W
030D:  MOVWF  6F
030E:  MOVF   78,W
030F:  MOVWF  04
0310:  BCF    03.7
0311:  BTFSC  7A.0
0312:  BSF    03.7
0313:  MOVF   6F,W
0314:  MOVWF  00
.................... 	} 
0315:  DECF   6B,F
0316:  GOTO   2FD
.................... 	// set last column 
.................... 	matrix[0] = 0; 
0317:  CLRF   29
.................... 	matrix[1] = 0; 
0318:  CLRF   2A
.................... 	matrix[2] = 0; 
0319:  CLRF   2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRightCarry(void) 
.................... { 
.................... 	byte i = SCREEN-1, r, g, b; 
*
0377:  MOVLW  2F
0378:  MOVWF  6B
....................  
.................... 	// Backup first column 
.................... 	r = matrix[i-2]; 
0379:  MOVLW  02
037A:  SUBWF  6B,W
037B:  ADDLW  29
037C:  MOVWF  04
037D:  BCF    03.7
037E:  MOVF   00,W
037F:  MOVWF  6C
.................... 	g = matrix[i-1]; 
0380:  MOVLW  01
0381:  SUBWF  6B,W
0382:  ADDLW  29
0383:  MOVWF  04
0384:  BCF    03.7
0385:  MOVF   00,W
0386:  MOVWF  6D
.................... 	b = matrix[i]; 
0387:  MOVLW  29
0388:  ADDWF  6B,W
0389:  MOVWF  04
038A:  BCF    03.7
038B:  MOVF   00,W
038C:  MOVWF  6E
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
038D:  MOVLW  2F
038E:  MOVWF  6B
038F:  MOVF   6B,W
0390:  SUBLW  02
0391:  BTFSC  03.0
0392:  GOTO   3A9
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
0393:  MOVLW  29
0394:  ADDWF  6B,W
0395:  MOVWF  78
0396:  CLRF   7A
0397:  BTFSC  03.0
0398:  INCF   7A,F
0399:  MOVLW  03
039A:  SUBWF  6B,W
039B:  ADDLW  29
039C:  MOVWF  04
039D:  BCF    03.7
039E:  MOVF   00,W
039F:  MOVWF  72
03A0:  MOVF   78,W
03A1:  MOVWF  04
03A2:  BCF    03.7
03A3:  BTFSC  7A.0
03A4:  BSF    03.7
03A5:  MOVF   72,W
03A6:  MOVWF  00
.................... 	} 
03A7:  DECF   6B,F
03A8:  GOTO   38F
.................... 	// set last column 
.................... 	matrix[0] = r; 
03A9:  MOVF   6C,W
03AA:  MOVWF  29
.................... 	matrix[1] = g; 
03AB:  MOVF   6D,W
03AC:  MOVWF  2A
.................... 	matrix[2] = b; 
03AD:  MOVF   6E,W
03AE:  MOVWF  2B
....................  
.................... 	return; 
.................... } 
....................  
.................... void clearScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0125:  CLRF   6C
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
0126:  CLRF   6C
0127:  MOVF   6C,W
0128:  SUBLW  2F
0129:  BTFSS  03.0
012A:  GOTO   132
.................... 	{ 
.................... 		matrix[i] = 0; 
012B:  MOVLW  29
012C:  ADDWF  6C,W
012D:  MOVWF  04
012E:  BCF    03.7
012F:  CLRF   00
.................... 	} 
0130:  INCF   6C,F
0131:  GOTO   127
.................... 	return; 
.................... } 
....................  
.................... void setScreen(byte * buffer) 
.................... { 
.................... 	byte i = 0; 
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
.................... 	{ 
.................... 		matrix[i] = buffer[i]; 
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void getScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0136:  CLRF   6C
.................... 	 
.................... 	putchar('['); 
0137:  MOVLW  5B
0138:  BTFSS  0C.4
0139:  GOTO   138
013A:  MOVWF  19
.................... 	for(i = 0; i < SCREEN; i++) 
013B:  CLRF   6C
013C:  MOVF   6C,W
013D:  SUBLW  2F
013E:  BTFSS  03.0
013F:  GOTO   14C
.................... 	{ 
.................... 		putchar(matrix[i]); 
0140:  MOVLW  29
0141:  ADDWF  6C,W
0142:  MOVWF  04
0143:  BCF    03.7
0144:  MOVF   00,W
0145:  MOVWF  6D
0146:  MOVF   6D,W
0147:  BTFSS  0C.4
0148:  GOTO   147
0149:  MOVWF  19
.................... 	} 
014A:  INCF   6C,F
014B:  GOTO   13C
.................... 	putchar(']'); 
014C:  MOVLW  5D
014D:  BTFSS  0C.4
014E:  GOTO   14D
014F:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void stopScroll(void) 
.................... { 
.................... 	scroll = DISABLED; 
*
00D5:  CLRF   5E
.................... 	return; 
.................... } 
00D6:  RETLW  00
....................  
.................... void startScroll(void) 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
*
00B6:  BCF    0B.6
00B7:  BCF    0B.7
00B8:  BTFSC  0B.7
00B9:  GOTO   0B7
.................... 	scroll = ENABLED; 
00BA:  MOVLW  01
00BB:  MOVWF  5E
.................... 	set_rtcc(0); 
00BC:  CLRF   01
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
00BD:  MOVF   59,W
00BE:  MOVWF  77
00BF:  BTFSS  59.3
00C0:  GOTO   0CA
00C1:  MOVLW  07
00C2:  CLRF   01
00C3:  MOVLW  81
00C4:  MOVWF  04
00C5:  BCF    03.7
00C6:  MOVF   00,W
00C7:  ANDLW  C0
00C8:  IORLW  0F
00C9:  MOVWF  00
00CA:  CLRWDT
00CB:  MOVLW  81
00CC:  MOVWF  04
00CD:  MOVF   00,W
00CE:  ANDLW  C0
00CF:  IORWF  77,W
00D0:  MOVWF  00
.................... 	enable_interrupts(INT_RTCC); 
00D1:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
00D2:  MOVLW  C0
00D3:  IORWF  0B,F
.................... 	return; 
.................... } 
00D4:  RETLW  00
....................  
.................... void setUARTSpeed(byte speed) 
.................... { 
.................... 	switch(speed) 
.................... 	{ 
*
0160:  MOVF   6D,W
0161:  BTFSC  03.2
0162:  GOTO   179
0163:  XORLW  01
0164:  BTFSC  03.2
0165:  GOTO   17F
0166:  XORLW  03
0167:  BTFSC  03.2
0168:  GOTO   185
0169:  XORLW  01
016A:  BTFSC  03.2
016B:  GOTO   18B
016C:  XORLW  07
016D:  BTFSC  03.2
016E:  GOTO   191
016F:  XORLW  01
0170:  BTFSC  03.2
0171:  GOTO   197
0172:  XORLW  03
0173:  BTFSC  03.2
0174:  GOTO   19D
0175:  XORLW  01
0176:  BTFSC  03.2
0177:  GOTO   1A3
0178:  GOTO   1AA
.................... 		case B1200: 
.................... 			setup_uart(1200); 
0179:  MOVLW  FF
017A:  BSF    03.5
017B:  MOVWF  19
017C:  MOVLW  A2
017D:  MOVWF  18
.................... 			break; 
017E:  GOTO   1B0
.................... 		case B2400: 
.................... 			setup_uart(2400); 
017F:  MOVLW  81
0180:  BSF    03.5
0181:  MOVWF  19
0182:  MOVLW  A2
0183:  MOVWF  18
.................... 			break; 
0184:  GOTO   1B0
.................... 		case B4800: 
.................... 			setup_uart(4800); 
0185:  MOVLW  40
0186:  BSF    03.5
0187:  MOVWF  19
0188:  MOVLW  A2
0189:  MOVWF  18
.................... 			break; 
018A:  GOTO   1B0
.................... 		case B9600: 
.................... 			setup_uart(9600); 
018B:  MOVLW  81
018C:  BSF    03.5
018D:  MOVWF  19
018E:  MOVLW  A6
018F:  MOVWF  18
.................... 			break; 
0190:  GOTO   1B0
.................... 		case B19200: 
.................... 			setup_uart(19200); 
0191:  MOVLW  40
0192:  BSF    03.5
0193:  MOVWF  19
0194:  MOVLW  A6
0195:  MOVWF  18
.................... 			break; 
0196:  GOTO   1B0
.................... 		case B38400: 
.................... 			setup_uart(38400); 
0197:  MOVLW  20
0198:  BSF    03.5
0199:  MOVWF  19
019A:  MOVLW  A6
019B:  MOVWF  18
.................... 			break; 
019C:  GOTO   1B0
.................... 		case B57600: 
.................... 			setup_uart(57600); 
019D:  MOVLW  15
019E:  BSF    03.5
019F:  MOVWF  19
01A0:  MOVLW  A6
01A1:  MOVWF  18
.................... 			break; 
01A2:  GOTO   1B0
.................... 		case B115200: 
.................... 			setup_uart(115200); 
01A3:  MOVLW  0A
01A4:  BSF    03.5
01A5:  MOVWF  19
01A6:  MOVLW  A6
01A7:  MOVWF  18
.................... 			break; 
01A8:  GOTO   1B0
01A9:  BCF    03.5
.................... 		default: 
.................... 			setup_uart(4800); 
01AA:  MOVLW  40
01AB:  BSF    03.5
01AC:  MOVWF  19
01AD:  MOVLW  A2
01AE:  MOVWF  18
.................... 			break; 
01AF:  GOTO   1B0
01B0:  BCF    03.5
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void setScrollFreq(byte freq) 
.................... { 
.................... 	//global interrupt 
.................... 	disable_interrupts(GLOBAL); 
*
01BB:  BCF    0B.6
01BC:  BCF    0B.7
01BD:  BTFSC  0B.7
01BE:  GOTO   1BC
.................... 	set_rtcc(0); 
01BF:  CLRF   01
....................  
.................... 	switch(freq) 
.................... 	{ 
01C0:  MOVF   6D,W
01C1:  BTFSC  03.2
01C2:  GOTO   1F1
01C3:  XORLW  01
01C4:  BTFSC  03.2
01C5:  GOTO   1F8
01C6:  XORLW  03
01C7:  BTFSC  03.2
01C8:  GOTO   1FF
01C9:  XORLW  01
01CA:  BTFSC  03.2
01CB:  GOTO   206
01CC:  XORLW  07
01CD:  BTFSC  03.2
01CE:  GOTO   20D
01CF:  XORLW  01
01D0:  BTFSC  03.2
01D1:  GOTO   213
01D2:  XORLW  03
01D3:  BTFSC  03.2
01D4:  GOTO   21A
01D5:  XORLW  01
01D6:  BTFSC  03.2
01D7:  GOTO   221
01D8:  XORLW  0F
01D9:  BTFSC  03.2
01DA:  GOTO   228
01DB:  XORLW  01
01DC:  BTFSC  03.2
01DD:  GOTO   22F
01DE:  XORLW  03
01DF:  BTFSC  03.2
01E0:  GOTO   236
01E1:  XORLW  01
01E2:  BTFSC  03.2
01E3:  GOTO   23D
01E4:  XORLW  07
01E5:  BTFSC  03.2
01E6:  GOTO   244
01E7:  XORLW  01
01E8:  BTFSC  03.2
01E9:  GOTO   24B
01EA:  XORLW  03
01EB:  BTFSC  03.2
01EC:  GOTO   252
01ED:  XORLW  01
01EE:  BTFSC  03.2
01EF:  GOTO   259
01F0:  GOTO   260
.................... 		case 0: 
.................... 			timer_div = RTCC_DIV_64; 
01F1:  MOVLW  05
01F2:  MOVWF  59
.................... 			timer_count = 1; 
01F3:  MOVLW  01
01F4:  MOVWF  5A
.................... 			ping_count = 229; 
01F5:  MOVLW  E5
01F6:  MOVWF  5D
.................... 			break; 
01F7:  GOTO   267
.................... 		case 1: 
.................... 			timer_div = RTCC_DIV_128; 
01F8:  MOVLW  06
01F9:  MOVWF  59
.................... 			timer_count = 1; 
01FA:  MOVLW  01
01FB:  MOVWF  5A
.................... 			ping_count = 115; 
01FC:  MOVLW  73
01FD:  MOVWF  5D
.................... 			break; 
01FE:  GOTO   267
.................... 		case 2: 
.................... 			timer_div = RTCC_DIV_64; 
01FF:  MOVLW  05
0200:  MOVWF  59
.................... 			timer_count = 3; 
0201:  MOVLW  03
0202:  MOVWF  5A
.................... 			ping_count = 230; 
0203:  MOVLW  E6
0204:  MOVWF  5D
.................... 			break; 
0205:  GOTO   267
.................... 		case 3: 
.................... 			timer_div = RTCC_DIV_256; 
0206:  MOVLW  07
0207:  MOVWF  59
.................... 			timer_count = 1; 
0208:  MOVLW  01
0209:  MOVWF  5A
.................... 			ping_count = 57; 
020A:  MOVLW  39
020B:  MOVWF  5D
.................... 			break; 
020C:  GOTO   267
.................... 		case 4: 
.................... 			timer_div = RTCC_DIV_64; 
020D:  MOVLW  05
020E:  MOVWF  59
.................... 			timer_count = 5; 
020F:  MOVWF  5A
.................... 			ping_count = 229; 
0210:  MOVLW  E5
0211:  MOVWF  5D
.................... 			break; 
0212:  GOTO   267
.................... 		case 5: 
.................... 			timer_div = RTCC_DIV_128; 
0213:  MOVLW  06
0214:  MOVWF  59
.................... 			timer_count = 3; 
0215:  MOVLW  03
0216:  MOVWF  5A
.................... 			ping_count = 115; 
0217:  MOVLW  73
0218:  MOVWF  5D
.................... 			break; 
0219:  GOTO   267
.................... 		case 6: 
.................... 			timer_div = RTCC_DIV_64; 
021A:  MOVLW  05
021B:  MOVWF  59
.................... 			timer_count = 7; 
021C:  MOVLW  07
021D:  MOVWF  5A
.................... 			ping_count = 231; 
021E:  MOVLW  E7
021F:  MOVWF  5D
.................... 			break; 
0220:  GOTO   267
.................... 		case 7: 
.................... 			timer_div = RTCC_DIV_256; 
0221:  MOVLW  07
0222:  MOVWF  59
.................... 			timer_count = 2; 
0223:  MOVLW  02
0224:  MOVWF  5A
.................... 			ping_count = 57; 
0225:  MOVLW  39
0226:  MOVWF  5D
.................... 			break; 
0227:  GOTO   267
.................... 		case 8: 
.................... 			timer_div = RTCC_DIV_64; 
0228:  MOVLW  05
0229:  MOVWF  59
.................... 			timer_count = 9; 
022A:  MOVLW  09
022B:  MOVWF  5A
.................... 			ping_count = 230; 
022C:  MOVLW  E6
022D:  MOVWF  5D
.................... 			break; 
022E:  GOTO   267
.................... 		case 9: 
.................... 			timer_div = RTCC_DIV_256; 
022F:  MOVLW  07
0230:  MOVWF  59
.................... 			timer_count = 3; 
0231:  MOVLW  03
0232:  MOVWF  5A
.................... 			ping_count = 56; 
0233:  MOVLW  38
0234:  MOVWF  5D
.................... 			break; 
0235:  GOTO   267
.................... 		case 10: 
.................... 			timer_div = RTCC_DIV_64; 
0236:  MOVLW  05
0237:  MOVWF  59
.................... 			timer_count = 17; 
0238:  MOVLW  11
0239:  MOVWF  5A
.................... 			ping_count = 230; 
023A:  MOVLW  E6
023B:  MOVWF  5D
.................... 			break; 
023C:  GOTO   267
.................... 		case 11: 
.................... 			timer_div = RTCC_DIV_256; 
023D:  MOVLW  07
023E:  MOVWF  59
.................... 			timer_count = 5; 
023F:  MOVLW  05
0240:  MOVWF  5A
.................... 			ping_count = 56; 
0241:  MOVLW  38
0242:  MOVWF  5D
.................... 			break; 
0243:  GOTO   267
.................... 		case 12: 
.................... 			timer_div = RTCC_DIV_256; 
0244:  MOVLW  07
0245:  MOVWF  59
.................... 			timer_count = 8; 
0246:  MOVLW  08
0247:  MOVWF  5A
.................... 			ping_count = 60; 
0248:  MOVLW  3C
0249:  MOVWF  5D
.................... 			break; 
024A:  GOTO   267
.................... 		case 13: 
.................... 			timer_div = RTCC_DIV_256; 
024B:  MOVLW  07
024C:  MOVWF  59
.................... 			timer_count = 9; 
024D:  MOVLW  09
024E:  MOVWF  5A
.................... 			ping_count = 54; 
024F:  MOVLW  36
0250:  MOVWF  5D
.................... 			break; 
0251:  GOTO   267
.................... 		case 14: 
.................... 			timer_div = RTCC_DIV_256; 
0252:  MOVLW  07
0253:  MOVWF  59
.................... 			timer_count = 14; 
0254:  MOVLW  0E
0255:  MOVWF  5A
.................... 			ping_count = 53; 
0256:  MOVLW  35
0257:  MOVWF  5D
.................... 			break; 
0258:  GOTO   267
.................... 		case 15: 
.................... 			timer_div = RTCC_DIV_256; 
0259:  MOVLW  07
025A:  MOVWF  59
.................... 			timer_count = 76; 
025B:  MOVLW  4C
025C:  MOVWF  5A
.................... 			ping_count = 57; 
025D:  MOVLW  39
025E:  MOVWF  5D
.................... 			break; 
025F:  GOTO   267
.................... 		default: 
.................... 			timer_div = DEFAULT_TIMER_DIV; 
0260:  MOVLW  07
0261:  MOVWF  59
.................... 			timer_count = DEFAULT_TIMER_COUNT; 
0262:  MOVLW  4C
0263:  MOVWF  5A
.................... 			ping_count = DEFAULT_PING_COUNT; 
0264:  MOVLW  26
0265:  MOVWF  5D
.................... 			break; 
0266:  GOTO   267
.................... 	} 
....................  
.................... 	// Reset counters 
.................... 	int_count = timer_count; 
0267:  MOVF   5A,W
0268:  MOVWF  5B
.................... 	int_ping_count = ping_count; 
0269:  MOVF   5D,W
026A:  MOVWF  5C
....................  
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
026B:  MOVLW  C0
026C:  IORWF  0B,F
....................  
.................... 	return; 
.................... } 
....................  
.................... void ping(void) 
.................... { 
....................  
.................... 	putchar('?'); 
*
02C2:  MOVLW  3F
02C3:  BTFSS  0C.4
02C4:  GOTO   2C3
02C5:  MOVWF  19
....................  
.................... 	return; 
.................... } 
....................  
.................... void pong(void) 
.................... { 
.................... 	// do not do reset! 
.................... 	do_reset = ping_count; 
*
0154:  MOVF   5D,W
0155:  MOVWF  60
....................  
.................... 	return; 
.................... } 
....................  
.................... void showSplashScreen(void) 
.................... { 
.................... 	actual_col = 0; 
*
046A:  CLRF   61
046B:  CLRF   28
046C:  BTFSC  0B.7
046D:  BSF    28.7
046E:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x3F, 0x0, 0x0); 
046F:  MOVF   61,W
0470:  MOVWF  6C
0471:  MOVLW  03
0472:  MOVWF  6D
0473:  CALL   091
0474:  BTFSC  28.7
0475:  BSF    0B.7
0476:  MOVLW  29
0477:  ADDWF  78,W
0478:  MOVWF  04
0479:  BCF    03.7
047A:  MOVLW  3F
047B:  MOVWF  00
047C:  CLRF   28
047D:  BTFSC  0B.7
047E:  BSF    28.7
047F:  BCF    0B.7
0480:  MOVF   61,W
0481:  MOVWF  6C
0482:  MOVLW  03
0483:  MOVWF  6D
0484:  CALL   091
0485:  BTFSC  28.7
0486:  BSF    0B.7
0487:  MOVLW  01
0488:  ADDWF  78,W
0489:  ADDLW  29
048A:  MOVWF  04
048B:  BCF    03.7
048C:  CLRF   00
048D:  CLRF   28
048E:  BTFSC  0B.7
048F:  BSF    28.7
0490:  BCF    0B.7
0491:  MOVF   61,W
0492:  MOVWF  6C
0493:  MOVLW  03
0494:  MOVWF  6D
0495:  CALL   091
0496:  BTFSC  28.7
0497:  BSF    0B.7
0498:  MOVLW  02
0499:  ADDWF  78,W
049A:  ADDLW  29
049B:  MOVWF  04
049C:  BCF    03.7
049D:  CLRF   00
.................... 	set_col(actual_col++); 
049E:  MOVF   61,W
049F:  INCF   61,F
04A0:  MOVWF  66
04A1:  MOVWF  68
04A2:  CALL   455
04A3:  CLRF   28
04A4:  BTFSC  0B.7
04A5:  BSF    28.7
04A6:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x5, 0x0, 0x0); 
04A7:  MOVF   61,W
04A8:  MOVWF  6C
04A9:  MOVLW  03
04AA:  MOVWF  6D
04AB:  CALL   091
04AC:  BTFSC  28.7
04AD:  BSF    0B.7
04AE:  MOVLW  29
04AF:  ADDWF  78,W
04B0:  MOVWF  04
04B1:  BCF    03.7
04B2:  MOVLW  05
04B3:  MOVWF  00
04B4:  CLRF   28
04B5:  BTFSC  0B.7
04B6:  BSF    28.7
04B7:  BCF    0B.7
04B8:  MOVF   61,W
04B9:  MOVWF  6C
04BA:  MOVLW  03
04BB:  MOVWF  6D
04BC:  CALL   091
04BD:  BTFSC  28.7
04BE:  BSF    0B.7
04BF:  MOVLW  01
04C0:  ADDWF  78,W
04C1:  ADDLW  29
04C2:  MOVWF  04
04C3:  BCF    03.7
04C4:  CLRF   00
04C5:  CLRF   28
04C6:  BTFSC  0B.7
04C7:  BSF    28.7
04C8:  BCF    0B.7
04C9:  MOVF   61,W
04CA:  MOVWF  6C
04CB:  MOVLW  03
04CC:  MOVWF  6D
04CD:  CALL   091
04CE:  BTFSC  28.7
04CF:  BSF    0B.7
04D0:  MOVLW  02
04D1:  ADDWF  78,W
04D2:  ADDLW  29
04D3:  MOVWF  04
04D4:  BCF    03.7
04D5:  CLRF   00
.................... 	set_col(actual_col++); 
04D6:  MOVF   61,W
04D7:  INCF   61,F
04D8:  MOVWF  66
04D9:  MOVWF  68
04DA:  CALL   455
04DB:  CLRF   28
04DC:  BTFSC  0B.7
04DD:  BSF    28.7
04DE:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x1, 0x0, 0xF0); 
04DF:  MOVF   61,W
04E0:  MOVWF  6C
04E1:  MOVLW  03
04E2:  MOVWF  6D
04E3:  CALL   091
04E4:  BTFSC  28.7
04E5:  BSF    0B.7
04E6:  MOVLW  29
04E7:  ADDWF  78,W
04E8:  MOVWF  04
04E9:  BCF    03.7
04EA:  MOVLW  01
04EB:  MOVWF  00
04EC:  CLRF   28
04ED:  BTFSC  0B.7
04EE:  BSF    28.7
04EF:  BCF    0B.7
04F0:  MOVF   61,W
04F1:  MOVWF  6C
04F2:  MOVLW  03
04F3:  MOVWF  6D
04F4:  CALL   091
04F5:  BTFSC  28.7
04F6:  BSF    0B.7
04F7:  MOVLW  01
04F8:  ADDWF  78,W
04F9:  ADDLW  29
04FA:  MOVWF  04
04FB:  BCF    03.7
04FC:  CLRF   00
04FD:  CLRF   28
04FE:  BTFSC  0B.7
04FF:  BSF    28.7
0500:  BCF    0B.7
0501:  MOVF   61,W
0502:  MOVWF  6C
0503:  MOVLW  03
0504:  MOVWF  6D
0505:  CALL   091
0506:  BTFSC  28.7
0507:  BSF    0B.7
0508:  MOVLW  02
0509:  ADDWF  78,W
050A:  ADDLW  29
050B:  MOVWF  04
050C:  BCF    03.7
050D:  MOVLW  F0
050E:  MOVWF  00
.................... 	set_col(actual_col++); 
050F:  MOVF   61,W
0510:  INCF   61,F
0511:  MOVWF  66
0512:  MOVWF  68
0513:  CALL   455
0514:  CLRF   28
0515:  BTFSC  0B.7
0516:  BSF    28.7
0517:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x80); 
0518:  MOVF   61,W
0519:  MOVWF  6C
051A:  MOVLW  03
051B:  MOVWF  6D
051C:  CALL   091
051D:  BTFSC  28.7
051E:  BSF    0B.7
051F:  MOVLW  29
0520:  ADDWF  78,W
0521:  MOVWF  04
0522:  BCF    03.7
0523:  CLRF   00
0524:  CLRF   28
0525:  BTFSC  0B.7
0526:  BSF    28.7
0527:  BCF    0B.7
0528:  MOVF   61,W
0529:  MOVWF  6C
052A:  MOVLW  03
052B:  MOVWF  6D
052C:  CALL   091
052D:  BTFSC  28.7
052E:  BSF    0B.7
052F:  MOVLW  01
0530:  ADDWF  78,W
0531:  ADDLW  29
0532:  MOVWF  04
0533:  BCF    03.7
0534:  CLRF   00
0535:  CLRF   28
0536:  BTFSC  0B.7
0537:  BSF    28.7
0538:  BCF    0B.7
0539:  MOVF   61,W
053A:  MOVWF  6C
053B:  MOVLW  03
053C:  MOVWF  6D
053D:  CALL   091
053E:  BTFSC  28.7
053F:  BSF    0B.7
0540:  MOVLW  02
0541:  ADDWF  78,W
0542:  ADDLW  29
0543:  MOVWF  04
0544:  BCF    03.7
0545:  MOVLW  80
0546:  MOVWF  00
.................... 	set_col(actual_col++); 
0547:  MOVF   61,W
0548:  INCF   61,F
0549:  MOVWF  66
054A:  MOVWF  68
054B:  CALL   455
054C:  CLRF   28
054D:  BTFSC  0B.7
054E:  BSF    28.7
054F:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x3E, 0x0); 
0550:  MOVF   61,W
0551:  MOVWF  6C
0552:  MOVLW  03
0553:  MOVWF  6D
0554:  CALL   091
0555:  BTFSC  28.7
0556:  BSF    0B.7
0557:  MOVLW  29
0558:  ADDWF  78,W
0559:  MOVWF  04
055A:  BCF    03.7
055B:  CLRF   00
055C:  CLRF   28
055D:  BTFSC  0B.7
055E:  BSF    28.7
055F:  BCF    0B.7
0560:  MOVF   61,W
0561:  MOVWF  6C
0562:  MOVLW  03
0563:  MOVWF  6D
0564:  CALL   091
0565:  BTFSC  28.7
0566:  BSF    0B.7
0567:  MOVLW  01
0568:  ADDWF  78,W
0569:  ADDLW  29
056A:  MOVWF  04
056B:  BCF    03.7
056C:  MOVLW  3E
056D:  MOVWF  00
056E:  CLRF   28
056F:  BTFSC  0B.7
0570:  BSF    28.7
0571:  BCF    0B.7
0572:  MOVF   61,W
0573:  MOVWF  6C
0574:  MOVLW  03
0575:  MOVWF  6D
0576:  CALL   091
0577:  BTFSC  28.7
0578:  BSF    0B.7
0579:  MOVLW  02
057A:  ADDWF  78,W
057B:  ADDLW  29
057C:  MOVWF  04
057D:  BCF    03.7
057E:  CLRF   00
.................... 	set_col(actual_col++); 
057F:  MOVF   61,W
0580:  INCF   61,F
0581:  MOVWF  66
0582:  MOVWF  68
0583:  CALL   455
0584:  CLRF   28
0585:  BTFSC  0B.7
0586:  BSF    28.7
0587:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x0); 
0588:  MOVF   61,W
0589:  MOVWF  6C
058A:  MOVLW  03
058B:  MOVWF  6D
058C:  CALL   091
058D:  BTFSC  28.7
058E:  BSF    0B.7
058F:  MOVLW  29
0590:  ADDWF  78,W
0591:  MOVWF  04
0592:  BCF    03.7
0593:  CLRF   00
0594:  CLRF   28
0595:  BTFSC  0B.7
0596:  BSF    28.7
0597:  BCF    0B.7
0598:  MOVF   61,W
0599:  MOVWF  6C
059A:  MOVLW  03
059B:  MOVWF  6D
059C:  CALL   091
059D:  BTFSC  28.7
059E:  BSF    0B.7
059F:  MOVLW  01
05A0:  ADDWF  78,W
05A1:  ADDLW  29
05A2:  MOVWF  04
05A3:  BCF    03.7
05A4:  MOVLW  2A
05A5:  MOVWF  00
05A6:  CLRF   28
05A7:  BTFSC  0B.7
05A8:  BSF    28.7
05A9:  BCF    0B.7
05AA:  MOVF   61,W
05AB:  MOVWF  6C
05AC:  MOVLW  03
05AD:  MOVWF  6D
05AE:  CALL   091
05AF:  BTFSC  28.7
05B0:  BSF    0B.7
05B1:  MOVLW  02
05B2:  ADDWF  78,W
05B3:  ADDLW  29
05B4:  MOVWF  04
05B5:  BCF    03.7
05B6:  CLRF   00
.................... 	set_col(actual_col++); 
05B7:  MOVF   61,W
05B8:  INCF   61,F
05B9:  MOVWF  66
05BA:  MOVWF  68
05BB:  CALL   455
05BC:  CLRF   28
05BD:  BTFSC  0B.7
05BE:  BSF    28.7
05BF:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x0); 
05C0:  MOVF   61,W
05C1:  MOVWF  6C
05C2:  MOVLW  03
05C3:  MOVWF  6D
05C4:  CALL   091
05C5:  BTFSC  28.7
05C6:  BSF    0B.7
05C7:  MOVLW  29
05C8:  ADDWF  78,W
05C9:  MOVWF  04
05CA:  BCF    03.7
05CB:  CLRF   00
05CC:  CLRF   28
05CD:  BTFSC  0B.7
05CE:  BSF    28.7
05CF:  BCF    0B.7
05D0:  MOVF   61,W
05D1:  MOVWF  6C
05D2:  MOVLW  03
05D3:  MOVWF  6D
05D4:  CALL   091
05D5:  BTFSC  28.7
05D6:  BSF    0B.7
05D7:  MOVLW  01
05D8:  ADDWF  78,W
05D9:  ADDLW  29
05DA:  MOVWF  04
05DB:  BCF    03.7
05DC:  CLRF   00
05DD:  CLRF   28
05DE:  BTFSC  0B.7
05DF:  BSF    28.7
05E0:  BCF    0B.7
05E1:  MOVF   61,W
05E2:  MOVWF  6C
05E3:  MOVLW  03
05E4:  MOVWF  6D
05E5:  CALL   091
05E6:  BTFSC  28.7
05E7:  BSF    0B.7
05E8:  MOVLW  02
05E9:  ADDWF  78,W
05EA:  ADDLW  29
05EB:  MOVWF  04
05EC:  BCF    03.7
05ED:  CLRF   00
.................... 	set_col(actual_col++); 
05EE:  MOVF   61,W
05EF:  INCF   61,F
05F0:  MOVWF  66
05F1:  MOVWF  68
05F2:  CALL   455
05F3:  CLRF   28
05F4:  BTFSC  0B.7
05F5:  BSF    28.7
05F6:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0xF0, 0xF0, 0x0); 
05F7:  MOVF   61,W
05F8:  MOVWF  6C
05F9:  MOVLW  03
05FA:  MOVWF  6D
05FB:  CALL   091
05FC:  BTFSC  28.7
05FD:  BSF    0B.7
05FE:  MOVLW  29
05FF:  ADDWF  78,W
0600:  MOVWF  04
0601:  BCF    03.7
0602:  MOVLW  F0
0603:  MOVWF  00
0604:  CLRF   28
0605:  BTFSC  0B.7
0606:  BSF    28.7
0607:  BCF    0B.7
0608:  MOVF   61,W
0609:  MOVWF  6C
060A:  MOVLW  03
060B:  MOVWF  6D
060C:  CALL   091
060D:  BTFSC  28.7
060E:  BSF    0B.7
060F:  MOVLW  01
0610:  ADDWF  78,W
0611:  ADDLW  29
0612:  MOVWF  04
0613:  BCF    03.7
0614:  MOVLW  F0
0615:  MOVWF  00
0616:  CLRF   28
0617:  BTFSC  0B.7
0618:  BSF    28.7
0619:  BCF    0B.7
061A:  MOVF   61,W
061B:  MOVWF  6C
061C:  MOVLW  03
061D:  MOVWF  6D
061E:  CALL   091
061F:  BTFSC  28.7
0620:  BSF    0B.7
0621:  MOVLW  02
0622:  ADDWF  78,W
0623:  ADDLW  29
0624:  MOVWF  04
0625:  BCF    03.7
0626:  CLRF   00
.................... 	set_col(actual_col++); 
0627:  MOVF   61,W
0628:  INCF   61,F
0629:  MOVWF  66
062A:  MOVWF  68
062B:  CALL   455
062C:  CLRF   28
062D:  BTFSC  0B.7
062E:  BSF    28.7
062F:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x90, 0x90, 0x0); 
0630:  MOVF   61,W
0631:  MOVWF  6C
0632:  MOVLW  03
0633:  MOVWF  6D
0634:  CALL   091
0635:  BTFSC  28.7
0636:  BSF    0B.7
0637:  MOVLW  29
0638:  ADDWF  78,W
0639:  MOVWF  04
063A:  BCF    03.7
063B:  MOVLW  90
063C:  MOVWF  00
063D:  CLRF   28
063E:  BTFSC  0B.7
063F:  BSF    28.7
0640:  BCF    0B.7
0641:  MOVF   61,W
0642:  MOVWF  6C
0643:  MOVLW  03
0644:  MOVWF  6D
0645:  CALL   091
0646:  BTFSC  28.7
0647:  BSF    0B.7
0648:  MOVLW  01
0649:  ADDWF  78,W
064A:  ADDLW  29
064B:  MOVWF  04
064C:  BCF    03.7
064D:  MOVLW  90
064E:  MOVWF  00
064F:  CLRF   28
0650:  BTFSC  0B.7
0651:  BSF    28.7
0652:  BCF    0B.7
0653:  MOVF   61,W
0654:  MOVWF  6C
0655:  MOVLW  03
0656:  MOVWF  6D
0657:  CALL   091
0658:  BTFSC  28.7
0659:  BSF    0B.7
065A:  MOVLW  02
065B:  ADDWF  78,W
065C:  ADDLW  29
065D:  MOVWF  04
065E:  BCF    03.7
065F:  CLRF   00
.................... 	set_col(actual_col++); 
0660:  MOVF   61,W
0661:  INCF   61,F
0662:  MOVWF  66
0663:  MOVWF  68
0664:  CALL   455
0665:  CLRF   28
0666:  BTFSC  0B.7
0667:  BSF    28.7
0668:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x60, 0x60, 0x0); 
0669:  MOVF   61,W
066A:  MOVWF  6C
066B:  MOVLW  03
066C:  MOVWF  6D
066D:  CALL   091
066E:  BTFSC  28.7
066F:  BSF    0B.7
0670:  MOVLW  29
0671:  ADDWF  78,W
0672:  MOVWF  04
0673:  BCF    03.7
0674:  MOVLW  60
0675:  MOVWF  00
0676:  CLRF   28
0677:  BTFSC  0B.7
0678:  BSF    28.7
0679:  BCF    0B.7
067A:  MOVF   61,W
067B:  MOVWF  6C
067C:  MOVLW  03
067D:  MOVWF  6D
067E:  CALL   091
067F:  BTFSC  28.7
0680:  BSF    0B.7
0681:  MOVLW  01
0682:  ADDWF  78,W
0683:  ADDLW  29
0684:  MOVWF  04
0685:  BCF    03.7
0686:  MOVLW  60
0687:  MOVWF  00
0688:  CLRF   28
0689:  BTFSC  0B.7
068A:  BSF    28.7
068B:  BCF    0B.7
068C:  MOVF   61,W
068D:  MOVWF  6C
068E:  MOVLW  03
068F:  MOVWF  6D
0690:  CALL   091
0691:  BTFSC  28.7
0692:  BSF    0B.7
0693:  MOVLW  02
0694:  ADDWF  78,W
0695:  ADDLW  29
0696:  MOVWF  04
0697:  BCF    03.7
0698:  CLRF   00
.................... 	set_col(actual_col++); 
0699:  MOVF   61,W
069A:  INCF   61,F
069B:  MOVWF  66
069C:  MOVWF  68
069D:  CALL   455
069E:  CLRF   28
069F:  BTFSC  0B.7
06A0:  BSF    28.7
06A1:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x4, 0x4); 
06A2:  MOVF   61,W
06A3:  MOVWF  6C
06A4:  MOVLW  03
06A5:  MOVWF  6D
06A6:  CALL   091
06A7:  BTFSC  28.7
06A8:  BSF    0B.7
06A9:  MOVLW  29
06AA:  ADDWF  78,W
06AB:  MOVWF  04
06AC:  BCF    03.7
06AD:  CLRF   00
06AE:  CLRF   28
06AF:  BTFSC  0B.7
06B0:  BSF    28.7
06B1:  BCF    0B.7
06B2:  MOVF   61,W
06B3:  MOVWF  6C
06B4:  MOVLW  03
06B5:  MOVWF  6D
06B6:  CALL   091
06B7:  BTFSC  28.7
06B8:  BSF    0B.7
06B9:  MOVLW  01
06BA:  ADDWF  78,W
06BB:  ADDLW  29
06BC:  MOVWF  04
06BD:  BCF    03.7
06BE:  MOVLW  04
06BF:  MOVWF  00
06C0:  CLRF   28
06C1:  BTFSC  0B.7
06C2:  BSF    28.7
06C3:  BCF    0B.7
06C4:  MOVF   61,W
06C5:  MOVWF  6C
06C6:  MOVLW  03
06C7:  MOVWF  6D
06C8:  CALL   091
06C9:  BTFSC  28.7
06CA:  BSF    0B.7
06CB:  MOVLW  02
06CC:  ADDWF  78,W
06CD:  ADDLW  29
06CE:  MOVWF  04
06CF:  BCF    03.7
06D0:  MOVLW  04
06D1:  MOVWF  00
.................... 	set_col(actual_col++); 
06D2:  MOVF   61,W
06D3:  INCF   61,F
06D4:  MOVWF  66
06D5:  MOVWF  68
06D6:  CALL   455
06D7:  CLRF   28
06D8:  BTFSC  0B.7
06D9:  BSF    28.7
06DA:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x2A); 
06DB:  MOVF   61,W
06DC:  MOVWF  6C
06DD:  MOVLW  03
06DE:  MOVWF  6D
06DF:  CALL   091
06E0:  BTFSC  28.7
06E1:  BSF    0B.7
06E2:  MOVLW  29
06E3:  ADDWF  78,W
06E4:  MOVWF  04
06E5:  BCF    03.7
06E6:  CLRF   00
06E7:  CLRF   28
06E8:  BTFSC  0B.7
06E9:  BSF    28.7
06EA:  BCF    0B.7
06EB:  MOVF   61,W
06EC:  MOVWF  6C
06ED:  MOVLW  03
06EE:  MOVWF  6D
06EF:  CALL   091
06F0:  BTFSC  28.7
06F1:  BSF    0B.7
06F2:  MOVLW  01
06F3:  ADDWF  78,W
06F4:  ADDLW  29
06F5:  MOVWF  04
06F6:  BCF    03.7
06F7:  MOVLW  2A
06F8:  MOVWF  00
06F9:  CLRF   28
06FA:  BTFSC  0B.7
06FB:  BSF    28.7
06FC:  BCF    0B.7
06FD:  MOVF   61,W
06FE:  MOVWF  6C
06FF:  MOVLW  03
0700:  MOVWF  6D
0701:  CALL   091
0702:  BTFSC  28.7
0703:  BSF    0B.7
0704:  MOVLW  02
0705:  ADDWF  78,W
0706:  ADDLW  29
0707:  MOVWF  04
0708:  BCF    03.7
0709:  MOVLW  2A
070A:  MOVWF  00
.................... 	set_col(actual_col++); 
070B:  MOVF   61,W
070C:  INCF   61,F
070D:  MOVWF  66
070E:  MOVWF  68
070F:  CALL   455
0710:  CLRF   28
0711:  BTFSC  0B.7
0712:  BSF    28.7
0713:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x2A, 0x2A); 
0714:  MOVF   61,W
0715:  MOVWF  6C
0716:  MOVLW  03
0717:  MOVWF  6D
0718:  CALL   091
0719:  BTFSC  28.7
071A:  BSF    0B.7
071B:  MOVLW  29
071C:  ADDWF  78,W
071D:  MOVWF  04
071E:  BCF    03.7
071F:  CLRF   00
0720:  CLRF   28
0721:  BTFSC  0B.7
0722:  BSF    28.7
0723:  BCF    0B.7
0724:  MOVF   61,W
0725:  MOVWF  6C
0726:  MOVLW  03
0727:  MOVWF  6D
0728:  CALL   091
0729:  BTFSC  28.7
072A:  BSF    0B.7
072B:  MOVLW  01
072C:  ADDWF  78,W
072D:  ADDLW  29
072E:  MOVWF  04
072F:  BCF    03.7
0730:  MOVLW  2A
0731:  MOVWF  00
0732:  CLRF   28
0733:  BTFSC  0B.7
0734:  BSF    28.7
0735:  BCF    0B.7
0736:  MOVF   61,W
0737:  MOVWF  6C
0738:  MOVLW  03
0739:  MOVWF  6D
073A:  CALL   091
073B:  BTFSC  28.7
073C:  BSF    0B.7
073D:  MOVLW  02
073E:  ADDWF  78,W
073F:  ADDLW  29
0740:  MOVWF  04
0741:  BCF    03.7
0742:  MOVLW  2A
0743:  MOVWF  00
.................... 	set_col(actual_col++); 
0744:  MOVF   61,W
0745:  INCF   61,F
0746:  MOVWF  66
0747:  MOVWF  68
0748:  CALL   455
0749:  CLRF   28
074A:  BTFSC  0B.7
074B:  BSF    28.7
074C:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x10, 0x10); 
074D:  MOVF   61,W
074E:  MOVWF  6C
074F:  MOVLW  03
0750:  MOVWF  6D
0751:  CALL   091
0752:  BTFSC  28.7
0753:  BSF    0B.7
0754:  MOVLW  29
0755:  ADDWF  78,W
0756:  MOVWF  04
0757:  BCF    03.7
0758:  CLRF   00
0759:  CLRF   28
075A:  BTFSC  0B.7
075B:  BSF    28.7
075C:  BCF    0B.7
075D:  MOVF   61,W
075E:  MOVWF  6C
075F:  MOVLW  03
0760:  MOVWF  6D
0761:  CALL   091
0762:  BTFSC  28.7
0763:  BSF    0B.7
0764:  MOVLW  01
0765:  ADDWF  78,W
0766:  ADDLW  29
0767:  MOVWF  04
0768:  BCF    03.7
0769:  MOVLW  10
076A:  MOVWF  00
076B:  CLRF   28
076C:  BTFSC  0B.7
076D:  BSF    28.7
076E:  BCF    0B.7
076F:  MOVF   61,W
0770:  MOVWF  6C
0771:  MOVLW  03
0772:  MOVWF  6D
0773:  CALL   091
0774:  BTFSC  28.7
0775:  BSF    0B.7
0776:  MOVLW  02
0777:  ADDWF  78,W
0778:  ADDLW  29
0779:  MOVWF  04
077A:  BCF    03.7
077B:  MOVLW  10
077C:  MOVWF  00
.................... 	set_col(actual_col++); 
077D:  MOVF   61,W
077E:  INCF   61,F
077F:  MOVWF  66
0780:  MOVWF  68
0781:  CALL   455
0782:  CLRF   28
0783:  BTFSC  0B.7
0784:  BSF    28.7
0785:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0x0, 0x0, 0x0); 
0786:  MOVF   61,W
0787:  MOVWF  6C
0788:  MOVLW  03
0789:  MOVWF  6D
078A:  CALL   091
078B:  BTFSC  28.7
078C:  BSF    0B.7
078D:  MOVLW  29
078E:  ADDWF  78,W
078F:  MOVWF  04
0790:  BCF    03.7
0791:  CLRF   00
0792:  CLRF   28
0793:  BTFSC  0B.7
0794:  BSF    28.7
0795:  BCF    0B.7
0796:  MOVF   61,W
0797:  MOVWF  6C
0798:  MOVLW  03
0799:  MOVWF  6D
079A:  CALL   091
079B:  BTFSC  28.7
079C:  BSF    0B.7
079D:  MOVLW  01
079E:  ADDWF  78,W
079F:  ADDLW  29
07A0:  MOVWF  04
07A1:  BCF    03.7
07A2:  CLRF   00
07A3:  CLRF   28
07A4:  BTFSC  0B.7
07A5:  BSF    28.7
07A6:  BCF    0B.7
07A7:  MOVF   61,W
07A8:  MOVWF  6C
07A9:  MOVLW  03
07AA:  MOVWF  6D
07AB:  CALL   091
07AC:  BTFSC  28.7
07AD:  BSF    0B.7
07AE:  MOVLW  02
07AF:  ADDWF  78,W
07B0:  ADDLW  29
07B1:  MOVWF  04
07B2:  BCF    03.7
07B3:  CLRF   00
.................... 	set_col(actual_col++); 
07B4:  MOVF   61,W
07B5:  INCF   61,F
07B6:  MOVWF  66
07B7:  MOVWF  68
07B8:  CALL   455
07B9:  CLRF   28
07BA:  BTFSC  0B.7
07BB:  BSF    28.7
07BC:  BCF    0B.7
.................... 	SET_ACTUAL_COLUMN(0xBC, 0x0, 0xBC); 
07BD:  MOVF   61,W
07BE:  MOVWF  6C
07BF:  MOVLW  03
07C0:  MOVWF  6D
07C1:  CALL   091
07C2:  BTFSC  28.7
07C3:  BSF    0B.7
07C4:  MOVLW  29
07C5:  ADDWF  78,W
07C6:  MOVWF  04
07C7:  BCF    03.7
07C8:  MOVLW  BC
07C9:  MOVWF  00
07CA:  CLRF   28
07CB:  BTFSC  0B.7
07CC:  BSF    28.7
07CD:  BCF    0B.7
07CE:  MOVF   61,W
07CF:  MOVWF  6C
07D0:  MOVLW  03
07D1:  MOVWF  6D
07D2:  CALL   091
07D3:  BTFSC  28.7
07D4:  BSF    0B.7
07D5:  MOVLW  01
07D6:  ADDWF  78,W
07D7:  ADDLW  29
07D8:  MOVWF  04
07D9:  BCF    03.7
07DA:  CLRF   00
07DB:  CLRF   28
07DC:  BTFSC  0B.7
07DD:  BSF    28.7
07DE:  BCF    0B.7
07DF:  MOVF   61,W
07E0:  MOVWF  6C
07E1:  MOVLW  03
07E2:  MOVWF  6D
07E3:  CALL   091
07E4:  BTFSC  28.7
07E5:  BSF    0B.7
07E6:  MOVLW  02
07E7:  ADDWF  78,W
07E8:  ADDLW  29
07E9:  MOVWF  04
07EA:  BCF    03.7
07EB:  MOVLW  BC
07EC:  MOVWF  00
.................... 	return; 
.................... } 
07ED:  BSF    0A.3
07EE:  BCF    0A.4
07EF:  GOTO   109 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG

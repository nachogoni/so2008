CCS PCM C Compiler, Version 4.023, 25097               19-Nov-08 03:31

               Filename: main.lst

               ROM used: 479 words (6%)
                         Largest free fragment is 2048
               RAM used: 115 (31%) at main() level
                         121 (33%) worst case
               Stack:    4 worst case (2 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   12A
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  MOVLW  8C
001A:  MOVWF  04
001B:  BTFSS  00.5
001C:  GOTO   01F
001D:  BTFSC  0C.5
001E:  GOTO   032
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   27,W
002A:  MOVWF  7B
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   067
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOBROWNOUT,NOLVP,NOPUT 
.................... #use delay(clock=20000000) 
*
00AE:  MOVLW  D4
00AF:  MOVWF  04
00B0:  BCF    03.7
00B1:  MOVF   00,W
00B2:  BTFSC  03.2
00B3:  GOTO   0C1
00B4:  MOVLW  06
00B5:  MOVWF  78
00B6:  CLRF   77
00B7:  DECFSZ 77,F
00B8:  GOTO   0B7
00B9:  DECFSZ 78,F
00BA:  GOTO   0B6
00BB:  MOVLW  7B
00BC:  MOVWF  77
00BD:  DECFSZ 77,F
00BE:  GOTO   0BD
00BF:  DECFSZ 00,F
00C0:  GOTO   0B4
00C1:  BCF    0A.3
00C2:  BCF    0A.4
00C3:  GOTO   0D6 (RETURN)
.................... #use rs232(baud=115200, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #define SET_74154_TIME	1 
.................... #define SET_74573_TIME	0 
....................  
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
....................  
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... byte matriz[3 * 16] = {	0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0xFF, 
.................... 						0x00, 0xFF, 0x00, 
.................... 						0x00, 0xFF, 0xFF, 
.................... 						0xFF, 0x00, 0x00, 
.................... 						0xFF, 0x00, 0xFF, 
.................... 						0xFF, 0xFF, 0x00, 
.................... 						0xFF, 0xFF, 0xFF, 
.................... 						0x00, 0x00, 0x00, 
.................... 						0x00, 0x00, 0xFF, 
.................... 						0x00, 0xFF, 0x00, 
.................... 						0x00, 0xFF, 0xFF, 
.................... 						0xFF, 0x00, 0x00, 
.................... 						0xFF, 0x00, 0xFF, 
.................... 						0xFF, 0xFF, 0x00, 
.................... 						0xFF, 0xFF, 0xFF}; 
*
013B:  BCF    03.5
013C:  CLRF   28
013D:  CLRF   29
013E:  CLRF   2A
013F:  CLRF   2B
0140:  CLRF   2C
0141:  MOVLW  FF
0142:  MOVWF  2D
0143:  CLRF   2E
0144:  MOVWF  2F
0145:  CLRF   30
0146:  CLRF   31
0147:  MOVWF  32
0148:  MOVWF  33
0149:  MOVWF  34
014A:  CLRF   35
014B:  CLRF   36
014C:  MOVWF  37
014D:  CLRF   38
014E:  MOVWF  39
014F:  MOVWF  3A
0150:  MOVWF  3B
0151:  CLRF   3C
0152:  MOVWF  3D
0153:  MOVWF  3E
0154:  MOVWF  3F
0155:  CLRF   40
0156:  CLRF   41
0157:  CLRF   42
0158:  CLRF   43
0159:  CLRF   44
015A:  MOVWF  45
015B:  CLRF   46
015C:  MOVWF  47
015D:  CLRF   48
015E:  CLRF   49
015F:  MOVWF  4A
0160:  MOVWF  4B
0161:  MOVWF  4C
0162:  CLRF   4D
0163:  CLRF   4E
0164:  MOVWF  4F
0165:  CLRF   50
0166:  MOVWF  51
0167:  MOVWF  52
0168:  MOVWF  53
0169:  CLRF   54
016A:  MOVWF  55
016B:  MOVWF  56
016C:  MOVWF  57
....................  
.................... // Serial Rx buffer 
.................... byte buffer[3 * 16]; 
.................... byte idx = 0; 
016D:  CLRF   58
....................  
.................... #INT_RDA 
.................... void recv_rs232(){ 
.................... 	int recv = 0; 
*
0067:  BSF    03.5
0068:  CLRF   56
....................  
.................... 	recv = getc(); 
0069:  BCF    03.5
006A:  BTFSS  0C.5
006B:  GOTO   06A
006C:  MOVF   1A,W
006D:  BSF    03.5
006E:  MOVWF  56
....................  
.................... 	if (recv == 'R') 
006F:  MOVF   56,W
0070:  SUBLW  52
0071:  BTFSS  03.2
0072:  GOTO   077
.................... 	{ 
.................... 		idx = 0; 
0073:  BCF    03.5
0074:  CLRF   58
.................... 	} 
.................... 	else 
0075:  GOTO   08A
0076:  BSF    03.5
.................... 	{ 
.................... 		idx %= (3 * 16); 
0077:  BCF    03.5
0078:  MOVF   58,W
0079:  BSF    03.5
007A:  MOVWF  57
007B:  MOVLW  30
007C:  MOVWF  58
007D:  BCF    03.5
007E:  GOTO   04E
007F:  MOVF   77,W
0080:  MOVWF  58
.................... 		matriz[idx++] = recv; 
0081:  MOVF   58,W
0082:  INCF   58,F
0083:  ADDLW  28
0084:  MOVWF  04
0085:  BCF    03.7
0086:  BSF    03.5
0087:  MOVF   56,W
0088:  MOVWF  00
0089:  BCF    03.5
.................... 	} 
.................... } 
....................  
008A:  BCF    0C.5
008B:  BCF    0A.3
008C:  BCF    0A.4
008D:  GOTO   01F
.................... void set_col(byte col) 
.................... { 
.................... 	if (col < 16) 
*
00C4:  BSF    03.5
00C5:  MOVF   53,W
00C6:  SUBLW  0F
00C7:  BTFSS  03.0
00C8:  GOTO   0D7
.................... 	{ 
.................... 		output_a(col); 
00C9:  CLRF   05
00CA:  MOVF   53,W
00CB:  BCF    03.5
00CC:  MOVWF  05
.................... 		COL_ENA 
00CD:  BSF    03.5
00CE:  BCF    08.1
00CF:  BCF    03.5
00D0:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
00D1:  MOVLW  01
00D2:  BSF    03.5
00D3:  MOVWF  54
00D4:  BCF    03.5
00D5:  GOTO   0AE
00D6:  BSF    03.5
.................... 		//COL_DIS 
.................... 	} 
.................... 	return; 
.................... } 
00D7:  BCF    03.5
00D8:  RETLW  00
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
008E:  BSF    03.5
008F:  BCF    08.7
0090:  BCF    03.5
0091:  BSF    08.7
.................... 	G_ENA 
0092:  BSF    03.5
0093:  BCF    08.6
0094:  BCF    03.5
0095:  BSF    08.6
.................... 	B_ENA 
0096:  BSF    03.5
0097:  BCF    08.5
0098:  BCF    03.5
0099:  BSF    08.5
.................... 	output_b(0xFF); 
009A:  BSF    03.5
009B:  CLRF   06
009C:  MOVLW  FF
009D:  BCF    03.5
009E:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
009F:  BSF    03.5
00A0:  BCF    08.7
00A1:  BCF    03.5
00A2:  BCF    08.7
.................... 	G_DIS 
00A3:  BSF    03.5
00A4:  BCF    08.6
00A5:  BCF    03.5
00A6:  BCF    08.6
.................... 	B_DIS 
00A7:  BSF    03.5
00A8:  BCF    08.5
00A9:  BCF    03.5
00AA:  BCF    08.5
.................... 	return; 
.................... } 
00AB:  BCF    0A.3
00AC:  BCF    0A.4
00AD:  GOTO   1A4 (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
*
00D9:  BSF    03.5
00DA:  BCF    08.6
00DB:  BCF    03.5
00DC:  BCF    08.6
.................... 	B_DIS 
00DD:  BSF    03.5
00DE:  BCF    08.5
00DF:  BCF    03.5
00E0:  BCF    08.5
.................... 	output_b(0xFF - color); 
00E1:  BSF    03.5
00E2:  MOVF   53,W
00E3:  SUBLW  FF
00E4:  MOVWF  54
00E5:  CLRF   06
00E6:  MOVF   54,W
00E7:  BCF    03.5
00E8:  MOVWF  06
.................... 	R_ENA 
00E9:  BSF    03.5
00EA:  BCF    08.7
00EB:  BCF    03.5
00EC:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
00ED:  BSF    03.5
00EE:  BCF    08.7
00EF:  BCF    03.5
00F0:  BCF    08.7
.................... 	return; 
.................... } 
00F1:  BCF    0A.3
00F2:  BCF    0A.4
00F3:  GOTO   1BC (RETURN)
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
00F4:  BSF    03.5
00F5:  BCF    08.6
00F6:  BCF    03.5
00F7:  BCF    08.6
.................... 	B_DIS 
00F8:  BSF    03.5
00F9:  BCF    08.5
00FA:  BCF    03.5
00FB:  BCF    08.5
.................... 	output_b(0xFF - color); 
00FC:  BSF    03.5
00FD:  MOVF   54,W
00FE:  SUBLW  FF
00FF:  MOVWF  55
0100:  CLRF   06
0101:  MOVF   55,W
0102:  BCF    03.5
0103:  MOVWF  06
.................... 	G_ENA 
0104:  BSF    03.5
0105:  BCF    08.6
0106:  BCF    03.5
0107:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
0108:  BSF    03.5
0109:  BCF    08.6
010A:  BCF    03.5
010B:  BCF    08.6
.................... 	return; 
.................... } 
010C:  BCF    0A.3
010D:  BCF    0A.4
010E:  GOTO   1C7 (RETURN)
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
010F:  BSF    03.5
0110:  BCF    08.6
0111:  BCF    03.5
0112:  BCF    08.6
.................... 	B_DIS 
0113:  BSF    03.5
0114:  BCF    08.5
0115:  BCF    03.5
0116:  BCF    08.5
.................... 	output_b(0xFF - color);	 
0117:  BSF    03.5
0118:  MOVF   54,W
0119:  SUBLW  FF
011A:  MOVWF  55
011B:  CLRF   06
011C:  MOVF   55,W
011D:  BCF    03.5
011E:  MOVWF  06
.................... 	B_ENA 
011F:  BSF    03.5
0120:  BCF    08.5
0121:  BCF    03.5
0122:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
0123:  BSF    03.5
0124:  BCF    08.5
0125:  BCF    03.5
0126:  BCF    08.5
.................... 	return; 
.................... } 
0127:  BCF    0A.3
0128:  BCF    0A.4
0129:  GOTO   1D2 (RETURN)
....................  
.................... void main() 
.................... { 
012A:  CLRF   04
012B:  BCF    03.7
012C:  MOVLW  1F
012D:  ANDWF  03,F
012E:  MOVLW  0A
012F:  BSF    03.5
0130:  MOVWF  19
0131:  MOVLW  A6
0132:  MOVWF  18
0133:  MOVLW  90
0134:  BCF    03.5
0135:  MOVWF  18
0136:  BSF    03.5
0137:  BSF    1F.0
0138:  BSF    1F.1
0139:  BSF    1F.2
013A:  BCF    1F.3
.................... 	int i; 
.................... 	byte c = 0; 
*
016E:  BSF    03.5
016F:  CLRF   51
.................... 	set_tris_a(0x00); 
0170:  MOVLW  00
0171:  MOVWF  05
.................... 	set_tris_b(0x00); 
0172:  MOVWF  06
.................... 	set_tris_d(0x00); 
0173:  MOVWF  08
....................  
.................... 	output_a(0x00); 
0174:  CLRF   05
0175:  BCF    03.5
0176:  CLRF   05
.................... 	output_b(0xFF); 
0177:  BSF    03.5
0178:  CLRF   06
0179:  MOVLW  FF
017A:  BCF    03.5
017B:  MOVWF  06
.................... 	output_d(0x00); 
017C:  BSF    03.5
017D:  CLRF   08
017E:  BCF    03.5
017F:  CLRF   08
....................  
.................... 	for (i = 0; i < (16 * 3); i++) 
0180:  BSF    03.5
0181:  CLRF   50
0182:  MOVF   50,W
0183:  SUBLW  2F
0184:  BTFSS  03.0
0185:  GOTO   18D
.................... 		buffer[i] = 0; 
0186:  MOVLW  A0
0187:  ADDWF  50,W
0188:  MOVWF  04
0189:  BCF    03.7
018A:  CLRF   00
018B:  INCF   50,F
018C:  GOTO   182
....................  
.................... 	enable_interrupts(GLOBAL); 
018D:  MOVLW  C0
018E:  BCF    03.5
018F:  IORWF  0B,F
.................... 	enable_interrupts(INT_RDA);  
0190:  BSF    03.5
0191:  BSF    0C.5
....................  
.................... 	printf("Bienvenidos a Fleds!"); 
0192:  CLRF   52
0193:  MOVF   52,W
0194:  BCF    03.5
0195:  CALL   035
0196:  BSF    03.5
0197:  INCF   52,F
0198:  MOVWF  77
0199:  BCF    03.5
019A:  BTFSS  0C.4
019B:  GOTO   19A
019C:  MOVWF  19
019D:  MOVLW  14
019E:  BSF    03.5
019F:  SUBWF  52,W
01A0:  BTFSS  03.2
01A1:  GOTO   193
....................  
.................... 	clear(); 
01A2:  BCF    03.5
01A3:  GOTO   08E
....................  
.................... 	set_col(0); 
01A4:  BSF    03.5
01A5:  CLRF   53
01A6:  BCF    03.5
01A7:  CALL   0C4
.................... 	while(1) 
.................... 	{ 
.................... 		c = 0; 
01A8:  BSF    03.5
01A9:  CLRF   51
.................... 		for (i = 0; i < (16 * 3); i+=3) 
01AA:  CLRF   50
01AB:  MOVF   50,W
01AC:  SUBLW  2F
01AD:  BTFSS  03.0
01AE:  GOTO   1DD
.................... 		{ 
.................... 			COL_DIS 
01AF:  BCF    08.1
01B0:  BCF    03.5
01B1:  BSF    08.1
.................... 			set_red(matriz[i]); 
01B2:  MOVLW  28
01B3:  BSF    03.5
01B4:  ADDWF  50,W
01B5:  MOVWF  04
01B6:  BCF    03.7
01B7:  MOVF   00,W
01B8:  MOVWF  52
01B9:  MOVWF  53
01BA:  BCF    03.5
01BB:  GOTO   0D9
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_green(matriz[i+1]); 
01BC:  MOVLW  01
01BD:  BSF    03.5
01BE:  ADDWF  50,W
01BF:  ADDLW  28
01C0:  MOVWF  04
01C1:  BCF    03.7
01C2:  MOVF   00,W
01C3:  MOVWF  53
01C4:  MOVWF  54
01C5:  BCF    03.5
01C6:  GOTO   0F4
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_blue(matriz[i+2]); 
01C7:  MOVLW  02
01C8:  BSF    03.5
01C9:  ADDWF  50,W
01CA:  ADDLW  28
01CB:  MOVWF  04
01CC:  BCF    03.7
01CD:  MOVF   00,W
01CE:  MOVWF  53
01CF:  MOVWF  54
01D0:  BCF    03.5
01D1:  GOTO   10F
.................... 			delay_ms(SET_74573_TIME); 
.................... 			set_col(c++); 
01D2:  BSF    03.5
01D3:  MOVF   51,W
01D4:  INCF   51,F
01D5:  MOVWF  52
01D6:  MOVWF  53
01D7:  BCF    03.5
01D8:  CALL   0C4
.................... 		} 
01D9:  MOVLW  03
01DA:  BSF    03.5
01DB:  ADDWF  50,F
01DC:  GOTO   1AB
.................... 	} 
01DD:  GOTO   1A9
....................  
....................  	return; 
.................... } 
01DE:  SLEEP

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG

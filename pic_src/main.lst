CCS PCM C Compiler, Version 4.023, 25097               28-Nov-08 11:27

               Filename: main.lst

               ROM used: 1509 words (18%)
                         Largest free fragment is 2048
               RAM used: 77 (21%) at main() level
                         155 (42%) worst case
               Stack:    5 worst case (3 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   545
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   036
001D:  MOVLW  8C
001E:  MOVWF  04
001F:  BTFSS  00.5
0020:  GOTO   023
0021:  BTFSC  0C.5
0022:  GOTO   039
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   27,W
002E:  MOVWF  7B
002F:  MOVF   20,W
0030:  MOVWF  0A
0031:  SWAPF  21,W
0032:  MOVWF  03
0033:  SWAPF  7F,F
0034:  SWAPF  7F,W
0035:  RETFIE
0036:  BCF    0A.3
0037:  BCF    0A.4
0038:  GOTO   2B4
0039:  BCF    0A.3
003A:  BCF    0A.4
003B:  GOTO   0B1
.................... #define _VERSION_ "0.52" 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NOBROWNOUT,NOPUT 
.................... #use delay(clock=20000000, restart_wdt) 
*
049F:  MOVLW  68
04A0:  MOVWF  04
04A1:  BCF    03.7
04A2:  MOVF   00,W
04A3:  BTFSC  03.2
04A4:  GOTO   4B6
04A5:  MOVLW  06
04A6:  MOVWF  78
04A7:  MOVLW  BF
04A8:  MOVWF  77
04A9:  CLRWDT
04AA:  DECFSZ 77,F
04AB:  GOTO   4A9
04AC:  DECFSZ 78,F
04AD:  GOTO   4A7
04AE:  MOVLW  7A
04AF:  MOVWF  77
04B0:  DECFSZ 77,F
04B1:  GOTO   4B0
04B2:  GOTO   4B3
04B3:  CLRWDT
04B4:  DECFSZ 00,F
04B5:  GOTO   4A5
04B6:  BCF    0A.3
04B7:  BCF    0A.4
04B8:  GOTO   4C9 (RETURN)
.................... #use rs232(baud=115200, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... /****** DEFINITIONS ******/ 
.................... typedef enum {B1200 = 0, B2400, B4800, B9600, B19200,  
.................... 				B38400, B57600, B115200} bouds; 
....................  
.................... #define SCROLL_NONE			-1 
.................... #define SCROLL_DOWN_CARRY	0 
.................... #define SCROLL_DOWN			1 
.................... #define SCROLL_UP_CARRY		2 
.................... #define SCROLL_UP			3 
.................... #define SCROLL_LEFT_CARRY	4 
.................... #define SCROLL_LEFT			5 
.................... #define SCROLL_RIGHT_CARRY	6 
.................... #define SCROLL_RIGHT		7 
.................... #define START_SCROLL		8 
.................... #define STOP_SCROLL			9 
....................  
.................... #define DISABLED			0 
.................... #define ENABLED				(DISABLED + 1) 
....................  
.................... /* STATUS*/ 
.................... #define STATUS_ENA			output_high(PIN_D3); 
.................... #define LINK_ENA			output_high(PIN_D2); 
.................... #define STATUS_DIS			output_low(PIN_D3); 
.................... #define LINK_DIS			output_low(PIN_D2); 
....................  
.................... /* LEDS */ 
.................... #define R_ENA				output_high(PIN_D7); 
.................... #define G_ENA				output_high(PIN_D6); 
.................... #define B_ENA				output_high(PIN_D5); 
.................... #define COL_ENA				output_low(PIN_D1); 
.................... #define R_DIS				output_low(PIN_D7); 
.................... #define G_DIS				output_low(PIN_D6); 
.................... #define B_DIS				output_low(PIN_D5); 
.................... #define COL_DIS				output_high(PIN_D1); 
.................... #define SET_74154_TIME		1 
.................... #define SET_74573_TIME		0 
.................... #define SCREEN_WIDTH		16 
.................... #define COLOR_COUNT			3 
.................... #define SCREEN				(COLOR_COUNT * SCREEN_WIDTH) 
....................  
.................... /* TIMER */ 
.................... // 76 && 256 -> 1Hz 
.................... #define DEFAULT_TIMER_COUNT	76 
.................... #define DEFAULT_TIMER_DIV	RTCC_DIV_256 
.................... #define DEFAULT_PING_COUNT	38 // ping every 500ms 
.................... #define PING_PONG_COUNT		50 
....................  
.................... /****** FUNCTIONS ******/ 
....................  
.................... /* LEDS */ 
.................... void clear(void); 
.................... void set_red(byte color); 
.................... void set_green(byte color); 
.................... void set_blue(byte color); 
.................... void set_col(byte col); 
.................... void get_col(void); 
.................... void scrollUp(void); 
.................... void scrollUpCarry(void); 
.................... void scrollDown(void); 
.................... void scrollDownCarry(void); 
.................... void scrollLeft(void); 
.................... void scrollLeftCarry(void); 
.................... void scrollRight(void); 
.................... void scrollRightCarry(void); 
.................... void getScreen(void); 
.................... void clearScreen(void); 
.................... void stopScroll(void); 
.................... void startScroll(void); 
.................... void setUARTSpeed(byte speed); 
.................... void setScrollFreq(byte freq); 
.................... void ping(void); 
.................... void pong(void); 
.................... void showSplashScreen(void); 
....................  
.................... /* TIMER */ 
.................... byte matrix[SCREEN]; 
....................  
.................... /****** IMPLEMENTATION ******/ 
.................... // SCROLL CONTROL 
.................... byte timer_div = DEFAULT_TIMER_DIV; 
*
0556:  MOVLW  07
0557:  BCF    03.5
0558:  MOVWF  58
.................... byte timer_count = DEFAULT_TIMER_COUNT; 
0559:  MOVLW  4C
055A:  MOVWF  59
.................... byte int_count = DEFAULT_TIMER_COUNT; 
055B:  MOVWF  5A
.................... byte scroll = DISABLED; 
055C:  CLRF   5B
.................... byte scroll_type = SCROLL_NONE; 
055D:  MOVLW  FF
055E:  MOVWF  5C
.................... // PING CONTROL 
.................... byte int_ping_count = DEFAULT_PING_COUNT; 
055F:  MOVLW  26
0560:  MOVWF  5D
.................... byte ping_count = DEFAULT_PING_COUNT; 
0561:  MOVWF  5E
.................... byte do_reset = PING_PONG_COUNT; 
0562:  MOVLW  32
0563:  MOVWF  5F
.................... // SERIAL CONTROL 
.................... byte actual_col = 0; 
0564:  CLRF   60
.................... byte column = 0; 
0565:  CLRF   61
.................... byte status = 0; 
0566:  CLRF   62
....................  
.................... /* INTERRUPT */ 
.................... #INT_RDA 
.................... void recv_rs232(void) 
.................... { 
.................... 	int recv = 0; 
*
00B1:  BSF    03.5
00B2:  CLRF   53
....................  
.................... 	LINK_ENA 
00B3:  BCF    08.2
00B4:  BCF    03.5
00B5:  BSF    08.2
.................... 	recv = getc(); 
00B6:  BTFSS  0C.5
00B7:  GOTO   0B6
00B8:  MOVF   1A,W
00B9:  BSF    03.5
00BA:  MOVWF  53
....................  
.................... 	// GET RED BYTE 
.................... 	if (status == 0x01) 
00BB:  BCF    03.5
00BC:  DECFSZ 62,W
00BD:  GOTO   0D0
.................... 	{ 
.................... 		status = 0x02; 
00BE:  MOVLW  02
00BF:  MOVWF  62
.................... 		matrix[column * 3] = recv; 
00C0:  MOVF   61,W
00C1:  BSF    03.5
00C2:  MOVWF  54
00C3:  MOVLW  03
00C4:  MOVWF  55
00C5:  BCF    03.5
00C6:  CALL   069
00C7:  MOVLW  28
00C8:  ADDWF  78,W
00C9:  MOVWF  04
00CA:  BCF    03.7
00CB:  BSF    03.5
00CC:  MOVF   53,W
00CD:  MOVWF  00
.................... 	} 
.................... 	// GET GREEN BYTE 
.................... 	else if (status == 0x02) 
00CE:  GOTO   2AF
00CF:  BCF    03.5
00D0:  MOVF   62,W
00D1:  SUBLW  02
00D2:  BTFSS  03.2
00D3:  GOTO   0E7
.................... 	{ 
.................... 		status = 0x03; 
00D4:  MOVLW  03
00D5:  MOVWF  62
.................... 		matrix[column * 3 + 1] = recv; 
00D6:  MOVF   61,W
00D7:  BSF    03.5
00D8:  MOVWF  54
00D9:  MOVLW  03
00DA:  MOVWF  55
00DB:  BCF    03.5
00DC:  CALL   069
00DD:  MOVLW  01
00DE:  ADDWF  78,W
00DF:  ADDLW  28
00E0:  MOVWF  04
00E1:  BCF    03.7
00E2:  BSF    03.5
00E3:  MOVF   53,W
00E4:  MOVWF  00
.................... 	} 
.................... 	// GET BLUE BYTE 
.................... 	else if (status == 0x03) 
00E5:  GOTO   2AF
00E6:  BCF    03.5
00E7:  MOVF   62,W
00E8:  SUBLW  03
00E9:  BTFSS  03.2
00EA:  GOTO   0FD
.................... 	{ 
.................... 		status = 0x00; 
00EB:  CLRF   62
.................... 		matrix[column * 3 + 2] = recv; 
00EC:  MOVF   61,W
00ED:  BSF    03.5
00EE:  MOVWF  54
00EF:  MOVLW  03
00F0:  MOVWF  55
00F1:  BCF    03.5
00F2:  CALL   069
00F3:  MOVLW  02
00F4:  ADDWF  78,W
00F5:  ADDLW  28
00F6:  MOVWF  04
00F7:  BCF    03.7
00F8:  BSF    03.5
00F9:  MOVF   53,W
00FA:  MOVWF  00
.................... 	} 
.................... 	// GET COMMAND 
.................... 	else if (status == 0) 
00FB:  GOTO   2AF
00FC:  BCF    03.5
00FD:  MOVF   62,F
00FE:  BTFSS  03.2
00FF:  GOTO   2AE
.................... 	{ 
.................... 		// SET COLUMN (0100 ABCD) + R + G + B 
.................... 		if ((recv & 0xF0) == 0x40) 
0100:  BSF    03.5
0101:  MOVF   53,W
0102:  ANDLW  F0
0103:  SUBLW  40
0104:  BTFSS  03.2
0105:  GOTO   10D
.................... 		{ 
.................... 			column = recv & 0x0F; 
0106:  MOVF   53,W
0107:  ANDLW  0F
0108:  BCF    03.5
0109:  MOVWF  61
.................... 			status = 0x01; 
010A:  MOVLW  01
010B:  MOVWF  62
010C:  BSF    03.5
.................... 		} 
.................... 		// CLEAR SCREEN (0000 0000) 
.................... 		if (recv == 0x00) 
010D:  MOVF   53,F
010E:  BTFSS  03.2
010F:  GOTO   11D
.................... 			clearScreen(); 
.................... 		// GET SCREEN (0101 1010) 
.................... 		if (recv == 0x5A) 
*
011D:  MOVF   53,W
011E:  SUBLW  5A
011F:  BTFSS  03.2
0120:  GOTO   140
.................... 			getScreen(); 
.................... 		// PONG RECV (0111 1110) 
.................... 		if (recv == 0x7E) 
*
0140:  MOVF   53,W
0141:  SUBLW  7E
0142:  BTFSS  03.2
0143:  GOTO   148
.................... 			pong(); 
.................... 		// SET UART SPEED (0000 1ABC) 
.................... 		if ((recv & 0xF8) == 0x08) 
*
0148:  MOVF   53,W
0149:  ANDLW  F8
014A:  SUBLW  08
014B:  BTFSS  03.2
014C:  GOTO   1A3
.................... 			setUARTSpeed(recv & 0x07); 
014D:  MOVF   53,W
014E:  ANDLW  07
014F:  MOVWF  54
0150:  MOVF   54,W
0151:  MOVWF  55
.................... 		// SET SCROLL FREQ (0010 ABCD) 
.................... 		if ((recv & 0xF0) == 0x20) 
*
01A3:  MOVF   53,W
01A4:  ANDLW  F0
01A5:  SUBLW  20
01A6:  BTFSS  03.2
01A7:  GOTO   263
.................... 			setScrollFreq(recv & 0x0F); 
01A8:  MOVF   53,W
01A9:  ANDLW  0F
01AA:  MOVWF  54
01AB:  MOVF   54,W
01AC:  MOVWF  55
.................... 		// SCROLL (0001 ABCD) 
.................... 		if ((recv & 0xF0) == 0x10) 
*
0263:  MOVF   53,W
0264:  ANDLW  F0
0265:  SUBLW  10
0266:  BTFSS  03.2
0267:  GOTO   2AF
.................... 		{ 
.................... 			switch (recv & 0x0F) 
.................... 			{ 
0268:  MOVF   53,W
0269:  ANDLW  0F
026A:  BCF    03.5
026B:  BTFSC  03.2
026C:  GOTO   289
026D:  XORLW  01
026E:  BTFSC  03.2
026F:  GOTO   28C
0270:  XORLW  03
0271:  BTFSC  03.2
0272:  GOTO   290
0273:  XORLW  01
0274:  BTFSC  03.2
0275:  GOTO   294
0276:  XORLW  07
0277:  BTFSC  03.2
0278:  GOTO   298
0279:  XORLW  01
027A:  BTFSC  03.2
027B:  GOTO   29C
027C:  XORLW  03
027D:  BTFSC  03.2
027E:  GOTO   2A0
027F:  XORLW  01
0280:  BTFSC  03.2
0281:  GOTO   2A4
0282:  XORLW  0F
0283:  BTFSC  03.2
0284:  GOTO   2A8
0285:  XORLW  01
0286:  BTFSC  03.2
0287:  GOTO   2AA
0288:  GOTO   2AC
.................... 				case SCROLL_DOWN_CARRY: 
.................... 					scroll_type = SCROLL_DOWN_CARRY; 
0289:  CLRF   5C
.................... 					startScroll(); 
028A:  CALL   090
.................... 					break; 
028B:  GOTO   2AE
.................... 				case SCROLL_DOWN: 
.................... 					scroll_type = SCROLL_DOWN; 
028C:  MOVLW  01
028D:  MOVWF  5C
.................... 					startScroll(); 
028E:  CALL   090
.................... 					break; 
028F:  GOTO   2AE
.................... 				case SCROLL_UP_CARRY: 
.................... 					scroll_type = SCROLL_UP_CARRY; 
0290:  MOVLW  02
0291:  MOVWF  5C
.................... 					startScroll(); 
0292:  CALL   090
.................... 					break; 
0293:  GOTO   2AE
.................... 				case SCROLL_UP: 
.................... 					scroll_type = SCROLL_UP; 
0294:  MOVLW  03
0295:  MOVWF  5C
.................... 					startScroll(); 
0296:  CALL   090
.................... 					break; 
0297:  GOTO   2AE
.................... 				case SCROLL_LEFT_CARRY: 
.................... 					scroll_type = SCROLL_LEFT_CARRY; 
0298:  MOVLW  04
0299:  MOVWF  5C
.................... 					startScroll(); 
029A:  CALL   090
.................... 					break; 
029B:  GOTO   2AE
.................... 				case SCROLL_LEFT: 
.................... 					scroll_type = SCROLL_LEFT; 
029C:  MOVLW  05
029D:  MOVWF  5C
.................... 					startScroll(); 
029E:  CALL   090
.................... 					break; 
029F:  GOTO   2AE
.................... 				case SCROLL_RIGHT_CARRY: 
.................... 					scroll_type = SCROLL_RIGHT_CARRY; 
02A0:  MOVLW  06
02A1:  MOVWF  5C
.................... 					startScroll(); 
02A2:  CALL   090
.................... 					break; 
02A3:  GOTO   2AE
.................... 				case SCROLL_RIGHT: 
.................... 					scroll_type = SCROLL_RIGHT; 
02A4:  MOVLW  07
02A5:  MOVWF  5C
.................... 					startScroll(); 
02A6:  CALL   090
.................... 					break; 
02A7:  GOTO   2AE
.................... 				case START_SCROLL: 
.................... 					startScroll(); 
02A8:  CALL   090
.................... 					break; 
02A9:  GOTO   2AE
.................... 				case STOP_SCROLL: 
.................... 					stopScroll(); 
02AA:  CALL   0AF
.................... 					break; 
02AB:  GOTO   2AE
.................... 				default: 
.................... 					stopScroll(); 
02AC:  CALL   0AF
.................... 					break; 
02AD:  GOTO   2AE
02AE:  BSF    03.5
.................... 			} 
.................... 		} 
.................... 	} 
.................... 	return; 
.................... } 
....................  
02AF:  BCF    03.5
02B0:  BCF    0C.5
02B1:  BCF    0A.3
02B2:  BCF    0A.4
02B3:  GOTO   023
.................... #INT_RTCC 
.................... void clock(void) 
.................... { 
.................... 	LINK_DIS 
02B4:  BSF    03.5
02B5:  BCF    08.2
02B6:  BCF    03.5
02B7:  BCF    08.2
.................... /* 
.................... 	if(0 == (--int_ping_count)) 
.................... 	{ 
.................... 		ping(); 
.................... 		int_ping_count = ping_count; 
.................... 		if (0 == do_reset--) 
.................... 		{ 
.................... 			printf("\r\n# Ping timeout - check the drivers #\r\n"); 
.................... 			reset_cpu(); 
.................... 		} 
.................... 	} 
.................... */ 
....................  
.................... 	if((scroll == ENABLED) && (0 == (--int_count))) 
02B8:  DECFSZ 5B,W
02B9:  GOTO   41D
02BA:  DECFSZ 5A,F
02BB:  GOTO   41D
.................... 	{ 
.................... 		switch (scroll_type) 
.................... 		{ 
02BC:  MOVF   5C,W
02BD:  XORLW  07
02BE:  BTFSC  03.2
02BF:  GOTO   2D6
02C0:  XORLW  02
02C1:  BTFSC  03.2
02C2:  GOTO   2FD
02C3:  XORLW  06
02C4:  BTFSC  03.2
02C5:  GOTO   331
02C6:  XORLW  02
02C7:  BTFSC  03.2
02C8:  GOTO   34B
02C9:  XORLW  07
02CA:  BTFSC  03.2
02CB:  GOTO   363
02CC:  XORLW  02
02CD:  BTFSC  03.2
02CE:  GOTO   3A6
02CF:  XORLW  06
02D0:  BTFSC  03.2
02D1:  GOTO   3E9
02D2:  XORLW  02
02D3:  BTFSC  03.2
02D4:  GOTO   401
02D5:  GOTO   419
.................... 			case SCROLL_RIGHT: 
.................... 				scrollRight(); 
.................... 				break; 
*
02FC:  GOTO   41B
.................... 			case SCROLL_LEFT: 
.................... 				scrollLeft(); 
.................... 				break; 
*
032F:  BCF    03.5
0330:  GOTO   41B
.................... 			case SCROLL_UP: 
.................... 				scrollUp(); 
.................... 				break; 
*
0349:  BCF    03.5
034A:  GOTO   41B
.................... 			case SCROLL_DOWN: 
.................... 				scrollDown(); 
.................... 				break; 
*
0361:  BCF    03.5
0362:  GOTO   41B
.................... 			case SCROLL_RIGHT_CARRY: 
.................... 				scrollRightCarry(); 
.................... 				break; 
*
03A5:  GOTO   41B
.................... 			case SCROLL_LEFT_CARRY: 
.................... 				scrollLeftCarry(); 
.................... 				break; 
*
03E7:  BCF    03.5
03E8:  GOTO   41B
.................... 			case SCROLL_UP_CARRY: 
.................... 				scrollUpCarry(); 
.................... 				break; 
*
03FF:  BCF    03.5
0400:  GOTO   41B
.................... 			case SCROLL_DOWN_CARRY: 
.................... 				scrollDownCarry(); 
.................... 				break; 
*
0417:  BCF    03.5
0418:  GOTO   41B
.................... 			default: 
.................... 				stopScroll(); 
0419:  CALL   0AF
.................... 				break; 
041A:  GOTO   41B
.................... 		} 
.................... 		int_count = timer_count; 
041B:  MOVF   59,W
041C:  MOVWF  5A
.................... 	} 
.................... } 
....................  
041D:  BCF    0B.2
041E:  BCF    0A.3
041F:  BCF    0A.4
0420:  GOTO   023
.................... void showScreen(void) 
.................... { 
.................... 	int i; 
.................... 	actual_col = 0; 
*
04CE:  CLRF   60
.................... 	for (i = 0; i < SCREEN; i+=3) 
04CF:  CLRF   65
04D0:  MOVF   65,W
04D1:  SUBLW  2F
04D2:  BTFSS  03.0
04D3:  GOTO   542
.................... 	{ 
.................... 		COL_DIS 
04D4:  BSF    03.5
04D5:  BCF    08.1
04D6:  BCF    03.5
04D7:  BSF    08.1
.................... 		set_red(matrix[i]); 
04D8:  MOVLW  28
04D9:  ADDWF  65,W
04DA:  MOVWF  04
04DB:  BCF    03.7
04DC:  MOVF   00,W
04DD:  MOVWF  66
04DE:  MOVF   66,W
04DF:  MOVWF  67
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_green(matrix[i+1]); 
*
04F8:  MOVLW  01
04F9:  ADDWF  65,W
04FA:  ADDLW  28
04FB:  MOVWF  04
04FC:  BCF    03.7
04FD:  MOVF   00,W
04FE:  MOVWF  67
04FF:  MOVF   67,W
0500:  MOVWF  68
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_blue(matrix[i+2]); 
*
0519:  MOVLW  02
051A:  ADDWF  65,W
051B:  ADDLW  28
051C:  MOVWF  04
051D:  BCF    03.7
051E:  MOVF   00,W
051F:  MOVWF  67
0520:  MOVF   67,W
0521:  MOVWF  68
.................... 		delay_ms(SET_74573_TIME); 
.................... 		set_col(actual_col++); 
*
053A:  MOVF   60,W
053B:  INCF   60,F
053C:  MOVWF  66
053D:  MOVWF  67
053E:  CALL   4B9
.................... 	} 
053F:  MOVLW  03
0540:  ADDWF  65,F
0541:  GOTO   4D0
.................... 	return; 
.................... } 
0542:  BCF    0A.3
0543:  BCF    0A.4
0544:  GOTO   5D3 (RETURN)
....................  
.................... /* MAIN */ 
.................... void main(void) 
.................... { 
0545:  CLRF   04
0546:  BCF    03.7
0547:  MOVLW  1F
0548:  ANDWF  03,F
0549:  MOVLW  0A
054A:  BSF    03.5
054B:  MOVWF  19
054C:  MOVLW  A6
054D:  MOVWF  18
054E:  MOVLW  90
054F:  BCF    03.5
0550:  MOVWF  18
0551:  BSF    03.5
0552:  BSF    1F.0
0553:  BSF    1F.1
0554:  BSF    1F.2
0555:  BCF    1F.3
.................... 	int i; 
.................... 	unsigned byte alive = 0; 
*
0567:  CLRF   64
....................  
.................... 	set_tris_a(0x00); 
0568:  MOVLW  00
0569:  BSF    03.5
056A:  MOVWF  05
.................... 	set_tris_b(0x00); 
056B:  MOVWF  06
.................... 	set_tris_d(0x00); 
056C:  MOVWF  08
....................  
.................... 	output_a(0x00); 
056D:  CLRF   05
056E:  BCF    03.5
056F:  CLRF   05
.................... 	output_b(0xFF); 
0570:  BSF    03.5
0571:  CLRF   06
0572:  MOVLW  FF
0573:  BCF    03.5
0574:  MOVWF  06
.................... 	output_d(0x00); 
0575:  BSF    03.5
0576:  CLRF   08
0577:  BCF    03.5
0578:  CLRF   08
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
0579:  CLRF   63
057A:  MOVF   63,W
057B:  SUBLW  2F
057C:  BTFSS  03.0
057D:  GOTO   585
.................... 		matrix[i] = 0; 
057E:  MOVLW  28
057F:  ADDWF  63,W
0580:  MOVWF  04
0581:  BCF    03.7
0582:  CLRF   00
0583:  INCF   63,F
0584:  GOTO   57A
....................  
.................... 	status = 0; //means waiting for a command 
0585:  CLRF   62
.................... 	// scroll? 
.................... 	scroll = DISABLED; 
0586:  CLRF   5B
.................... 	scroll_type = SCROLL_NONE; 
0587:  MOVLW  FF
0588:  MOVWF  5C
.................... 	// watch dog 
.................... 	do_reset = PING_PONG_COUNT; 
0589:  MOVLW  32
058A:  MOVWF  5F
.................... 	ping_count = DEFAULT_PING_COUNT; 
058B:  MOVLW  26
058C:  MOVWF  5E
.................... 	// reset timer0 
.................... 	set_rtcc(0); 
058D:  CLRF   01
.................... 	timer_div = RTCC_DIV_256; 
058E:  MOVLW  07
058F:  MOVWF  58
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0590:  MOVF   58,W
0591:  MOVWF  77
0592:  BTFSS  58.3
0593:  GOTO   59D
0594:  MOVLW  07
0595:  CLRF   01
0596:  MOVLW  81
0597:  MOVWF  04
0598:  BCF    03.7
0599:  MOVF   00,W
059A:  ANDLW  C0
059B:  IORLW  0F
059C:  MOVWF  00
059D:  CLRWDT
059E:  MOVLW  81
059F:  MOVWF  04
05A0:  MOVF   00,W
05A1:  ANDLW  C0
05A2:  IORWF  77,W
05A3:  MOVWF  00
.................... 	//timer interrupt 
.................... 	enable_interrupts (INT_RTCC); 
05A4:  BSF    0B.5
.................... 	//serial interrupt 
.................... 	enable_interrupts(INT_RDA); 
05A5:  BSF    03.5
05A6:  BSF    0C.5
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
05A7:  MOVLW  C0
05A8:  BCF    03.5
05A9:  IORWF  0B,F
....................  
.................... 	printf("\r\nInitializing Fleds (ver %s)\r\n", _VERSION_); 
05AA:  CLRF   65
05AB:  MOVF   65,W
05AC:  CALL   03C
05AD:  INCF   65,F
05AE:  MOVWF  77
05AF:  MOVF   77,W
05B0:  BTFSS  0C.4
05B1:  GOTO   5B0
05B2:  MOVWF  19
05B3:  MOVLW  1A
05B4:  SUBWF  65,W
05B5:  BTFSS  03.2
05B6:  GOTO   5AB
05B7:  CLRF   66
05B8:  MOVF   66,W
05B9:  CALL   060
05BA:  IORLW  00
05BB:  BTFSC  03.2
05BC:  GOTO   5C2
05BD:  INCF   66,F
05BE:  BTFSS  0C.4
05BF:  GOTO   5BE
05C0:  MOVWF  19
05C1:  GOTO   5B8
05C2:  MOVLW  29
05C3:  BTFSS  0C.4
05C4:  GOTO   5C3
05C5:  MOVWF  19
05C6:  MOVLW  0D
05C7:  BTFSS  0C.4
05C8:  GOTO   5C7
05C9:  MOVWF  19
05CA:  MOVLW  0A
05CB:  BTFSS  0C.4
05CC:  GOTO   5CB
05CD:  MOVWF  19
....................  
.................... 	clear(); 
05CE:  GOTO   421
....................  
.................... 	showSplashScreen(); 
05CF:  GOTO   441
....................  
.................... 	set_col(0); 
05D0:  CLRF   67
05D1:  CALL   4B9
.................... 	while(1) 
.................... 	{ 
.................... 		showScreen(); 
05D2:  GOTO   4CE
.................... 		// Red led -> Alive! 
.................... 		if (0 == alive) 
05D3:  MOVF   64,F
05D4:  BTFSS  03.2
05D5:  GOTO   5DA
.................... 			STATUS_ENA 
05D6:  BSF    03.5
05D7:  BCF    08.3
05D8:  BCF    03.5
05D9:  BSF    08.3
.................... 		if (128 == alive++) 
05DA:  MOVF   64,W
05DB:  INCF   64,F
05DC:  SUBLW  80
05DD:  BTFSS  03.2
05DE:  GOTO   5E3
.................... 			STATUS_DIS 
05DF:  BSF    03.5
05E0:  BCF    08.3
05E1:  BCF    03.5
05E2:  BCF    08.3
.................... 	} 
05E3:  GOTO   5D2
....................  
....................  	return; 
.................... } 
....................  
.................... /* LEDS */ 
.................... void set_col(byte col) 
.................... { 
05E4:  SLEEP
.................... 	if (col < 16) 
*
04B9:  MOVF   67,W
04BA:  SUBLW  0F
04BB:  BTFSS  03.0
04BC:  GOTO   4CD
.................... 	{ 
.................... 		output_a(col); 
04BD:  BSF    03.5
04BE:  CLRF   05
04BF:  BCF    03.5
04C0:  MOVF   67,W
04C1:  MOVWF  05
.................... 		COL_ENA 
04C2:  BSF    03.5
04C3:  BCF    08.1
04C4:  BCF    03.5
04C5:  BCF    08.1
.................... 		delay_ms(SET_74154_TIME); 
04C6:  MOVLW  01
04C7:  MOVWF  68
04C8:  GOTO   49F
.................... 		COL_DIS 
04C9:  BSF    03.5
04CA:  BCF    08.1
04CB:  BCF    03.5
04CC:  BSF    08.1
.................... 	} 
.................... 	return; 
.................... } 
04CD:  RETLW  00
....................  
.................... void get_col(void) 
.................... { 
.................... 	putchar('<'); 
.................... 	putchar(actual_col); 
.................... 	putchar('>'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void clear(void) 
.................... { 
.................... 	R_ENA 
*
0421:  BSF    03.5
0422:  BCF    08.7
0423:  BCF    03.5
0424:  BSF    08.7
.................... 	G_ENA 
0425:  BSF    03.5
0426:  BCF    08.6
0427:  BCF    03.5
0428:  BSF    08.6
.................... 	B_ENA 
0429:  BSF    03.5
042A:  BCF    08.5
042B:  BCF    03.5
042C:  BSF    08.5
.................... 	output_b(0xFF); 
042D:  BSF    03.5
042E:  CLRF   06
042F:  MOVLW  FF
0430:  BCF    03.5
0431:  MOVWF  06
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
0432:  BSF    03.5
0433:  BCF    08.7
0434:  BCF    03.5
0435:  BCF    08.7
.................... 	G_DIS 
0436:  BSF    03.5
0437:  BCF    08.6
0438:  BCF    03.5
0439:  BCF    08.6
.................... 	B_DIS 
043A:  BSF    03.5
043B:  BCF    08.5
043C:  BCF    03.5
043D:  BCF    08.5
.................... 	return; 
.................... } 
043E:  BCF    0A.3
043F:  BCF    0A.4
0440:  GOTO   5CF (RETURN)
....................  
.................... void set_red(byte color) 
.................... { 
.................... 	G_DIS 
*
04E0:  BSF    03.5
04E1:  BCF    08.6
04E2:  BCF    03.5
04E3:  BCF    08.6
.................... 	B_DIS 
04E4:  BSF    03.5
04E5:  BCF    08.5
04E6:  BCF    03.5
04E7:  BCF    08.5
.................... 	output_b(0xFF - color); 
04E8:  MOVF   67,W
04E9:  SUBLW  FF
04EA:  MOVWF  68
04EB:  BSF    03.5
04EC:  CLRF   06
04ED:  BCF    03.5
04EE:  MOVF   68,W
04EF:  MOVWF  06
.................... 	R_ENA 
04F0:  BSF    03.5
04F1:  BCF    08.7
04F2:  BCF    03.5
04F3:  BSF    08.7
.................... 	delay_ms(SET_74573_TIME); 
.................... 	R_DIS 
04F4:  BSF    03.5
04F5:  BCF    08.7
04F6:  BCF    03.5
04F7:  BCF    08.7
.................... 	return; 
.................... } 
....................  
.................... void set_green(byte color) 
.................... { 
.................... 	G_DIS 
*
0501:  BSF    03.5
0502:  BCF    08.6
0503:  BCF    03.5
0504:  BCF    08.6
.................... 	B_DIS 
0505:  BSF    03.5
0506:  BCF    08.5
0507:  BCF    03.5
0508:  BCF    08.5
.................... 	output_b(0xFF - color); 
0509:  MOVF   68,W
050A:  SUBLW  FF
050B:  MOVWF  69
050C:  BSF    03.5
050D:  CLRF   06
050E:  BCF    03.5
050F:  MOVF   69,W
0510:  MOVWF  06
.................... 	G_ENA 
0511:  BSF    03.5
0512:  BCF    08.6
0513:  BCF    03.5
0514:  BSF    08.6
.................... 	delay_ms(SET_74573_TIME); 
.................... 	G_DIS 
0515:  BSF    03.5
0516:  BCF    08.6
0517:  BCF    03.5
0518:  BCF    08.6
.................... 	return; 
.................... } 
....................  
.................... void set_blue(byte color) 
.................... { 
.................... 	G_DIS 
*
0522:  BSF    03.5
0523:  BCF    08.6
0524:  BCF    03.5
0525:  BCF    08.6
.................... 	B_DIS 
0526:  BSF    03.5
0527:  BCF    08.5
0528:  BCF    03.5
0529:  BCF    08.5
.................... 	output_b(0xFF - color);	 
052A:  MOVF   68,W
052B:  SUBLW  FF
052C:  MOVWF  69
052D:  BSF    03.5
052E:  CLRF   06
052F:  BCF    03.5
0530:  MOVF   69,W
0531:  MOVWF  06
.................... 	B_ENA 
0532:  BSF    03.5
0533:  BCF    08.5
0534:  BCF    03.5
0535:  BSF    08.5
.................... 	delay_ms(SET_74573_TIME); 
.................... 	B_DIS 
0536:  BSF    03.5
0537:  BCF    08.5
0538:  BCF    03.5
0539:  BCF    08.5
.................... 	return; 
.................... } 
....................  
.................... void scrollUpCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
03E9:  BSF    03.5
03EA:  CLRF   53
.................... 	for(i = 0; i < SCREEN; i++) 
03EB:  CLRF   53
03EC:  MOVF   53,W
03ED:  SUBLW  2F
03EE:  BTFSS  03.0
03EF:  GOTO   3FF
.................... 		rotate_right(matrix + i, 1); 
03F0:  MOVLW  28
03F1:  ADDWF  53,W
03F2:  MOVWF  54
03F3:  CLRF   55
03F4:  BTFSC  03.0
03F5:  INCF   55,F
03F6:  MOVF   54,W
03F7:  MOVWF  04
03F8:  BCF    03.7
03F9:  BTFSC  55.0
03FA:  BSF    03.7
03FB:  RRF    00,W
03FC:  RRF    00,F
03FD:  INCF   53,F
03FE:  GOTO   3EC
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollUp(void) 
.................... { 
.................... 	byte i = 0; 
*
0331:  BSF    03.5
0332:  CLRF   53
.................... 	for(i = 0; i < SCREEN; i++) 
0333:  CLRF   53
0334:  MOVF   53,W
0335:  SUBLW  2F
0336:  BTFSS  03.0
0337:  GOTO   349
.................... 		shift_right(matrix + i, 1, 0); 
0338:  MOVLW  28
0339:  ADDWF  53,W
033A:  MOVWF  54
033B:  CLRF   55
033C:  BTFSC  03.0
033D:  INCF   55,F
033E:  MOVF   54,W
033F:  MOVWF  04
0340:  BCF    03.7
0341:  BTFSC  55.0
0342:  BSF    03.7
0343:  MOVLW  00
0344:  ADDWF  04,F
0345:  BCF    03.0
0346:  RRF    00,F
0347:  INCF   53,F
0348:  GOTO   334
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDownCarry(void) 
.................... { 
.................... 	byte i = 0; 
*
0401:  BSF    03.5
0402:  CLRF   53
.................... 	for(i = 0; i < SCREEN; i++) 
0403:  CLRF   53
0404:  MOVF   53,W
0405:  SUBLW  2F
0406:  BTFSS  03.0
0407:  GOTO   417
.................... 		rotate_left(matrix + i, 1); 
0408:  MOVLW  28
0409:  ADDWF  53,W
040A:  MOVWF  54
040B:  CLRF   55
040C:  BTFSC  03.0
040D:  INCF   55,F
040E:  MOVF   54,W
040F:  MOVWF  04
0410:  BCF    03.7
0411:  BTFSC  55.0
0412:  BSF    03.7
0413:  RLF    00,W
0414:  RLF    00,F
0415:  INCF   53,F
0416:  GOTO   404
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollDown(void) 
.................... { 
.................... 	byte i = 0; 
*
034B:  BSF    03.5
034C:  CLRF   53
.................... 	for(i = 0; i < SCREEN; i++) 
034D:  CLRF   53
034E:  MOVF   53,W
034F:  SUBLW  2F
0350:  BTFSS  03.0
0351:  GOTO   361
.................... 		shift_left(matrix + i, 1, 0); 
0352:  MOVLW  28
0353:  ADDWF  53,W
0354:  MOVWF  54
0355:  CLRF   55
0356:  BTFSC  03.0
0357:  INCF   55,F
0358:  MOVF   54,W
0359:  MOVWF  04
035A:  BCF    03.7
035B:  BTFSC  55.0
035C:  BSF    03.7
035D:  BCF    03.0
035E:  RLF    00,F
035F:  INCF   53,F
0360:  GOTO   34E
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeft(void) 
.................... { 
.................... 	byte i = 0; 
*
02FD:  BSF    03.5
02FE:  CLRF   53
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
02FF:  CLRF   53
0300:  MOVF   53,W
0301:  SUBLW  2C
0302:  BTFSS  03.0
0303:  GOTO   31E
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
0304:  MOVLW  28
0305:  ADDWF  53,W
0306:  MOVWF  78
0307:  CLRF   7A
0308:  BTFSC  03.0
0309:  INCF   7A,F
030A:  MOVF   78,W
030B:  MOVWF  54
030C:  MOVF   7A,W
030D:  MOVWF  55
030E:  MOVLW  03
030F:  ADDWF  53,W
0310:  ADDLW  28
0311:  MOVWF  04
0312:  BCF    03.7
0313:  MOVF   00,W
0314:  MOVWF  57
0315:  MOVF   54,W
0316:  MOVWF  04
0317:  BCF    03.7
0318:  BTFSC  55.0
0319:  BSF    03.7
031A:  MOVF   57,W
031B:  MOVWF  00
.................... 	} 
031C:  INCF   53,F
031D:  GOTO   300
.................... 	// clear last column 
.................... 	matrix[i] = 0; 
031E:  MOVLW  28
031F:  ADDWF  53,W
0320:  MOVWF  04
0321:  BCF    03.7
0322:  CLRF   00
.................... 	matrix[i+1] = 0; 
0323:  MOVLW  01
0324:  ADDWF  53,W
0325:  ADDLW  28
0326:  MOVWF  04
0327:  BCF    03.7
0328:  CLRF   00
.................... 	matrix[i+2] = 0; 
0329:  MOVLW  02
032A:  ADDWF  53,W
032B:  ADDLW  28
032C:  MOVWF  04
032D:  BCF    03.7
032E:  CLRF   00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollLeftCarry(void) 
.................... { 
.................... 	byte i = 0, r, g, b; 
*
03A6:  BSF    03.5
03A7:  CLRF   53
....................  
.................... 	// Backup first column 
.................... 	r = matrix[0]; 
03A8:  BCF    03.5
03A9:  MOVF   28,W
03AA:  BSF    03.5
03AB:  MOVWF  54
.................... 	g = matrix[1]; 
03AC:  BCF    03.5
03AD:  MOVF   29,W
03AE:  BSF    03.5
03AF:  MOVWF  55
.................... 	b = matrix[2]; 
03B0:  BCF    03.5
03B1:  MOVF   2A,W
03B2:  BSF    03.5
03B3:  MOVWF  56
....................  
.................... 	for(i = 0; i < (SCREEN - 3); i++) 
03B4:  CLRF   53
03B5:  MOVF   53,W
03B6:  SUBLW  2C
03B7:  BTFSS  03.0
03B8:  GOTO   3D3
.................... 	{ 
.................... 		matrix[i] = matrix[i + 3]; 
03B9:  MOVLW  28
03BA:  ADDWF  53,W
03BB:  MOVWF  78
03BC:  CLRF   7A
03BD:  BTFSC  03.0
03BE:  INCF   7A,F
03BF:  MOVF   78,W
03C0:  MOVWF  57
03C1:  MOVF   7A,W
03C2:  MOVWF  58
03C3:  MOVLW  03
03C4:  ADDWF  53,W
03C5:  ADDLW  28
03C6:  MOVWF  04
03C7:  BCF    03.7
03C8:  MOVF   00,W
03C9:  MOVWF  5A
03CA:  MOVF   57,W
03CB:  MOVWF  04
03CC:  BCF    03.7
03CD:  BTFSC  58.0
03CE:  BSF    03.7
03CF:  MOVF   5A,W
03D0:  MOVWF  00
.................... 	} 
03D1:  INCF   53,F
03D2:  GOTO   3B5
.................... 	// set last column 
.................... 	matrix[i] = r; 
03D3:  MOVLW  28
03D4:  ADDWF  53,W
03D5:  MOVWF  04
03D6:  BCF    03.7
03D7:  MOVF   54,W
03D8:  MOVWF  00
.................... 	matrix[i+1] = g; 
03D9:  MOVLW  01
03DA:  ADDWF  53,W
03DB:  ADDLW  28
03DC:  MOVWF  04
03DD:  BCF    03.7
03DE:  MOVF   55,W
03DF:  MOVWF  00
.................... 	matrix[i+2] = b; 
03E0:  MOVLW  02
03E1:  ADDWF  53,W
03E2:  ADDLW  28
03E3:  MOVWF  04
03E4:  BCF    03.7
03E5:  MOVF   56,W
03E6:  MOVWF  00
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRight(void) 
.................... { 
.................... 	byte i = SCREEN-1; 
*
02D6:  MOVLW  2F
02D7:  BSF    03.5
02D8:  MOVWF  53
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
02D9:  MOVWF  53
02DA:  MOVF   53,W
02DB:  SUBLW  02
02DC:  BTFSC  03.0
02DD:  GOTO   2F8
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
02DE:  MOVLW  28
02DF:  ADDWF  53,W
02E0:  MOVWF  78
02E1:  CLRF   7A
02E2:  BTFSC  03.0
02E3:  INCF   7A,F
02E4:  MOVF   78,W
02E5:  MOVWF  54
02E6:  MOVF   7A,W
02E7:  MOVWF  55
02E8:  MOVLW  03
02E9:  SUBWF  53,W
02EA:  ADDLW  28
02EB:  MOVWF  04
02EC:  BCF    03.7
02ED:  MOVF   00,W
02EE:  MOVWF  57
02EF:  MOVF   54,W
02F0:  MOVWF  04
02F1:  BCF    03.7
02F2:  BTFSC  55.0
02F3:  BSF    03.7
02F4:  MOVF   57,W
02F5:  MOVWF  00
.................... 	} 
02F6:  DECF   53,F
02F7:  GOTO   2DA
.................... 	// set last column 
.................... 	matrix[0] = 0; 
02F8:  BCF    03.5
02F9:  CLRF   28
.................... 	matrix[1] = 0; 
02FA:  CLRF   29
.................... 	matrix[2] = 0; 
02FB:  CLRF   2A
....................  
.................... 	return; 
.................... } 
....................  
.................... void scrollRightCarry(void) 
.................... { 
.................... 	byte i = SCREEN-1, r, g, b; 
*
0363:  MOVLW  2F
0364:  BSF    03.5
0365:  MOVWF  53
....................  
.................... 	// Backup first column 
.................... 	r = matrix[i-2]; 
0366:  MOVLW  02
0367:  SUBWF  53,W
0368:  ADDLW  28
0369:  MOVWF  04
036A:  BCF    03.7
036B:  MOVF   00,W
036C:  MOVWF  54
.................... 	g = matrix[i-1]; 
036D:  MOVLW  01
036E:  SUBWF  53,W
036F:  ADDLW  28
0370:  MOVWF  04
0371:  BCF    03.7
0372:  MOVF   00,W
0373:  MOVWF  55
.................... 	b = matrix[i]; 
0374:  MOVLW  28
0375:  ADDWF  53,W
0376:  MOVWF  04
0377:  BCF    03.7
0378:  MOVF   00,W
0379:  MOVWF  56
....................  
.................... 	for(i = SCREEN-1; i >= 3; i--) 
037A:  MOVLW  2F
037B:  MOVWF  53
037C:  MOVF   53,W
037D:  SUBLW  02
037E:  BTFSC  03.0
037F:  GOTO   39A
.................... 	{ 
.................... 		matrix[i] = matrix[i - 3]; 
0380:  MOVLW  28
0381:  ADDWF  53,W
0382:  MOVWF  78
0383:  CLRF   7A
0384:  BTFSC  03.0
0385:  INCF   7A,F
0386:  MOVF   78,W
0387:  MOVWF  57
0388:  MOVF   7A,W
0389:  MOVWF  58
038A:  MOVLW  03
038B:  SUBWF  53,W
038C:  ADDLW  28
038D:  MOVWF  04
038E:  BCF    03.7
038F:  MOVF   00,W
0390:  MOVWF  5A
0391:  MOVF   57,W
0392:  MOVWF  04
0393:  BCF    03.7
0394:  BTFSC  58.0
0395:  BSF    03.7
0396:  MOVF   5A,W
0397:  MOVWF  00
.................... 	} 
0398:  DECF   53,F
0399:  GOTO   37C
.................... 	// set last column 
.................... 	matrix[0] = r; 
039A:  MOVF   54,W
039B:  BCF    03.5
039C:  MOVWF  28
.................... 	matrix[1] = g; 
039D:  BSF    03.5
039E:  MOVF   55,W
039F:  BCF    03.5
03A0:  MOVWF  29
.................... 	matrix[2] = b; 
03A1:  BSF    03.5
03A2:  MOVF   56,W
03A3:  BCF    03.5
03A4:  MOVWF  2A
....................  
.................... 	return; 
.................... } 
....................  
.................... void clearScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0110:  CLRF   54
.................... 	 
.................... 	for(i = 0; i < SCREEN; i++) 
0111:  CLRF   54
0112:  MOVF   54,W
0113:  SUBLW  2F
0114:  BTFSS  03.0
0115:  GOTO   11D
.................... 	{ 
.................... 		matrix[i] = 0; 
0116:  MOVLW  28
0117:  ADDWF  54,W
0118:  MOVWF  04
0119:  BCF    03.7
011A:  CLRF   00
.................... 	} 
011B:  INCF   54,F
011C:  GOTO   112
.................... 	return; 
.................... } 
....................  
.................... void getScreen(void) 
.................... { 
.................... 	byte i = 0; 
*
0121:  CLRF   54
.................... 	 
.................... 	putchar('['); 
0122:  MOVLW  5B
0123:  BCF    03.5
0124:  BTFSS  0C.4
0125:  GOTO   124
0126:  MOVWF  19
.................... 	for(i = 0; i < SCREEN; i++) 
0127:  BSF    03.5
0128:  CLRF   54
0129:  MOVF   54,W
012A:  SUBLW  2F
012B:  BTFSS  03.0
012C:  GOTO   13A
.................... 	{ 
.................... 		putchar(matrix[i]); 
012D:  MOVLW  28
012E:  ADDWF  54,W
012F:  MOVWF  04
0130:  BCF    03.7
0131:  MOVF   00,W
0132:  MOVWF  55
0133:  BCF    03.5
0134:  BTFSS  0C.4
0135:  GOTO   134
0136:  MOVWF  19
.................... 	} 
0137:  BSF    03.5
0138:  INCF   54,F
0139:  GOTO   129
.................... 	putchar(']'); 
013A:  MOVLW  5D
013B:  BCF    03.5
013C:  BTFSS  0C.4
013D:  GOTO   13C
013E:  MOVWF  19
013F:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void stopScroll(void) 
.................... { 
.................... 	scroll = DISABLED; 
*
00AF:  CLRF   5B
.................... 	return; 
.................... } 
00B0:  RETLW  00
....................  
.................... void startScroll(void) 
.................... { 
.................... 	disable_interrupts(GLOBAL); 
*
0090:  BCF    0B.6
0091:  BCF    0B.7
0092:  BTFSC  0B.7
0093:  GOTO   091
.................... 	scroll = ENABLED; 
0094:  MOVLW  01
0095:  MOVWF  5B
.................... 	set_rtcc(0); 
0096:  CLRF   01
.................... 	setup_counters (RTCC_INTERNAL, timer_div); 
0097:  MOVF   58,W
0098:  MOVWF  77
0099:  BTFSS  58.3
009A:  GOTO   0A4
009B:  MOVLW  07
009C:  CLRF   01
009D:  MOVLW  81
009E:  MOVWF  04
009F:  BCF    03.7
00A0:  MOVF   00,W
00A1:  ANDLW  C0
00A2:  IORLW  0F
00A3:  MOVWF  00
00A4:  CLRWDT
00A5:  MOVLW  81
00A6:  MOVWF  04
00A7:  MOVF   00,W
00A8:  ANDLW  C0
00A9:  IORWF  77,W
00AA:  MOVWF  00
.................... 	enable_interrupts(INT_RTCC); 
00AB:  BSF    0B.5
.................... 	enable_interrupts(GLOBAL); 
00AC:  MOVLW  C0
00AD:  IORWF  0B,F
.................... 	return; 
.................... } 
00AE:  RETLW  00
....................  
.................... void setUARTSpeed(byte speed) 
.................... { 
.................... 	switch(speed) 
.................... 	{ 
*
0152:  MOVF   55,W
0153:  BCF    03.5
0154:  BTFSC  03.2
0155:  GOTO   16C
0156:  XORLW  01
0157:  BTFSC  03.2
0158:  GOTO   172
0159:  XORLW  03
015A:  BTFSC  03.2
015B:  GOTO   178
015C:  XORLW  01
015D:  BTFSC  03.2
015E:  GOTO   17E
015F:  XORLW  07
0160:  BTFSC  03.2
0161:  GOTO   184
0162:  XORLW  01
0163:  BTFSC  03.2
0164:  GOTO   18A
0165:  XORLW  03
0166:  BTFSC  03.2
0167:  GOTO   190
0168:  XORLW  01
0169:  BTFSC  03.2
016A:  GOTO   196
016B:  GOTO   19D
.................... 		case B1200: 
.................... 			setup_uart(1200); 
016C:  MOVLW  FF
016D:  BSF    03.5
016E:  MOVWF  19
016F:  MOVLW  A2
0170:  MOVWF  18
.................... 			break; 
0171:  GOTO   1A3
.................... 		case B2400: 
.................... 			setup_uart(2400); 
0172:  MOVLW  81
0173:  BSF    03.5
0174:  MOVWF  19
0175:  MOVLW  A2
0176:  MOVWF  18
.................... 			break; 
0177:  GOTO   1A3
.................... 		case B4800: 
.................... 			setup_uart(4800); 
0178:  MOVLW  40
0179:  BSF    03.5
017A:  MOVWF  19
017B:  MOVLW  A2
017C:  MOVWF  18
.................... 			break; 
017D:  GOTO   1A3
.................... 		case B9600: 
.................... 			setup_uart(9600); 
017E:  MOVLW  81
017F:  BSF    03.5
0180:  MOVWF  19
0181:  MOVLW  A6
0182:  MOVWF  18
.................... 			break; 
0183:  GOTO   1A3
.................... 		case B19200: 
.................... 			setup_uart(19200); 
0184:  MOVLW  40
0185:  BSF    03.5
0186:  MOVWF  19
0187:  MOVLW  A6
0188:  MOVWF  18
.................... 			break; 
0189:  GOTO   1A3
.................... 		case B38400: 
.................... 			setup_uart(38400); 
018A:  MOVLW  20
018B:  BSF    03.5
018C:  MOVWF  19
018D:  MOVLW  A6
018E:  MOVWF  18
.................... 			break; 
018F:  GOTO   1A3
.................... 		case B57600: 
.................... 			setup_uart(57600); 
0190:  MOVLW  15
0191:  BSF    03.5
0192:  MOVWF  19
0193:  MOVLW  A6
0194:  MOVWF  18
.................... 			break; 
0195:  GOTO   1A3
.................... 		case B115200: 
.................... 			setup_uart(115200); 
0196:  MOVLW  0A
0197:  BSF    03.5
0198:  MOVWF  19
0199:  MOVLW  A6
019A:  MOVWF  18
.................... 			break; 
019B:  GOTO   1A3
019C:  BCF    03.5
.................... 		default: 
.................... 			setup_uart(4800); 
019D:  MOVLW  40
019E:  BSF    03.5
019F:  MOVWF  19
01A0:  MOVLW  A2
01A1:  MOVWF  18
.................... 			break; 
01A2:  GOTO   1A3
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void setScrollFreq(byte freq) 
.................... { 
.................... 	//global interrupt 
.................... 	disable_interrupts(GLOBAL); 
*
01AD:  BCF    03.5
01AE:  BCF    0B.6
01AF:  BCF    0B.7
01B0:  BTFSC  0B.7
01B1:  GOTO   1AF
.................... 	set_rtcc(0); 
01B2:  CLRF   01
....................  
.................... 	switch(freq) 
.................... 	{ 
01B3:  BSF    03.5
01B4:  MOVF   55,W
01B5:  BCF    03.5
01B6:  BTFSC  03.2
01B7:  GOTO   1E6
01B8:  XORLW  01
01B9:  BTFSC  03.2
01BA:  GOTO   1ED
01BB:  XORLW  03
01BC:  BTFSC  03.2
01BD:  GOTO   1F4
01BE:  XORLW  01
01BF:  BTFSC  03.2
01C0:  GOTO   1FB
01C1:  XORLW  07
01C2:  BTFSC  03.2
01C3:  GOTO   202
01C4:  XORLW  01
01C5:  BTFSC  03.2
01C6:  GOTO   208
01C7:  XORLW  03
01C8:  BTFSC  03.2
01C9:  GOTO   20F
01CA:  XORLW  01
01CB:  BTFSC  03.2
01CC:  GOTO   216
01CD:  XORLW  0F
01CE:  BTFSC  03.2
01CF:  GOTO   21D
01D0:  XORLW  01
01D1:  BTFSC  03.2
01D2:  GOTO   224
01D3:  XORLW  03
01D4:  BTFSC  03.2
01D5:  GOTO   22B
01D6:  XORLW  01
01D7:  BTFSC  03.2
01D8:  GOTO   232
01D9:  XORLW  07
01DA:  BTFSC  03.2
01DB:  GOTO   239
01DC:  XORLW  01
01DD:  BTFSC  03.2
01DE:  GOTO   240
01DF:  XORLW  03
01E0:  BTFSC  03.2
01E1:  GOTO   247
01E2:  XORLW  01
01E3:  BTFSC  03.2
01E4:  GOTO   24E
01E5:  GOTO   255
.................... 		case 0: 
.................... 			timer_div = RTCC_DIV_64; 
01E6:  MOVLW  05
01E7:  MOVWF  58
.................... 			timer_count = 1; 
01E8:  MOVLW  01
01E9:  MOVWF  59
.................... 			ping_count = 229; 
01EA:  MOVLW  E5
01EB:  MOVWF  5E
.................... 			break; 
01EC:  GOTO   25C
.................... 		case 1: 
.................... 			timer_div = RTCC_DIV_128; 
01ED:  MOVLW  06
01EE:  MOVWF  58
.................... 			timer_count = 1; 
01EF:  MOVLW  01
01F0:  MOVWF  59
.................... 			ping_count = 115; 
01F1:  MOVLW  73
01F2:  MOVWF  5E
.................... 			break; 
01F3:  GOTO   25C
.................... 		case 2: 
.................... 			timer_div = RTCC_DIV_64; 
01F4:  MOVLW  05
01F5:  MOVWF  58
.................... 			timer_count = 3; 
01F6:  MOVLW  03
01F7:  MOVWF  59
.................... 			ping_count = 230; 
01F8:  MOVLW  E6
01F9:  MOVWF  5E
.................... 			break; 
01FA:  GOTO   25C
.................... 		case 3: 
.................... 			timer_div = RTCC_DIV_256; 
01FB:  MOVLW  07
01FC:  MOVWF  58
.................... 			timer_count = 1; 
01FD:  MOVLW  01
01FE:  MOVWF  59
.................... 			ping_count = 57; 
01FF:  MOVLW  39
0200:  MOVWF  5E
.................... 			break; 
0201:  GOTO   25C
.................... 		case 4: 
.................... 			timer_div = RTCC_DIV_64; 
0202:  MOVLW  05
0203:  MOVWF  58
.................... 			timer_count = 5; 
0204:  MOVWF  59
.................... 			ping_count = 229; 
0205:  MOVLW  E5
0206:  MOVWF  5E
.................... 			break; 
0207:  GOTO   25C
.................... 		case 5: 
.................... 			timer_div = RTCC_DIV_128; 
0208:  MOVLW  06
0209:  MOVWF  58
.................... 			timer_count = 3; 
020A:  MOVLW  03
020B:  MOVWF  59
.................... 			ping_count = 115; 
020C:  MOVLW  73
020D:  MOVWF  5E
.................... 			break; 
020E:  GOTO   25C
.................... 		case 6: 
.................... 			timer_div = RTCC_DIV_64; 
020F:  MOVLW  05
0210:  MOVWF  58
.................... 			timer_count = 7; 
0211:  MOVLW  07
0212:  MOVWF  59
.................... 			ping_count = 231; 
0213:  MOVLW  E7
0214:  MOVWF  5E
.................... 			break; 
0215:  GOTO   25C
.................... 		case 7: 
.................... 			timer_div = RTCC_DIV_256; 
0216:  MOVLW  07
0217:  MOVWF  58
.................... 			timer_count = 2; 
0218:  MOVLW  02
0219:  MOVWF  59
.................... 			ping_count = 57; 
021A:  MOVLW  39
021B:  MOVWF  5E
.................... 			break; 
021C:  GOTO   25C
.................... 		case 8: 
.................... 			timer_div = RTCC_DIV_64; 
021D:  MOVLW  05
021E:  MOVWF  58
.................... 			timer_count = 9; 
021F:  MOVLW  09
0220:  MOVWF  59
.................... 			ping_count = 230; 
0221:  MOVLW  E6
0222:  MOVWF  5E
.................... 			break; 
0223:  GOTO   25C
.................... 		case 9: 
.................... 			timer_div = RTCC_DIV_256; 
0224:  MOVLW  07
0225:  MOVWF  58
.................... 			timer_count = 3; 
0226:  MOVLW  03
0227:  MOVWF  59
.................... 			ping_count = 56; 
0228:  MOVLW  38
0229:  MOVWF  5E
.................... 			break; 
022A:  GOTO   25C
.................... 		case 10: 
.................... 			timer_div = RTCC_DIV_64; 
022B:  MOVLW  05
022C:  MOVWF  58
.................... 			timer_count = 17; 
022D:  MOVLW  11
022E:  MOVWF  59
.................... 			ping_count = 230; 
022F:  MOVLW  E6
0230:  MOVWF  5E
.................... 			break; 
0231:  GOTO   25C
.................... 		case 11: 
.................... 			timer_div = RTCC_DIV_256; 
0232:  MOVLW  07
0233:  MOVWF  58
.................... 			timer_count = 5; 
0234:  MOVLW  05
0235:  MOVWF  59
.................... 			ping_count = 56; 
0236:  MOVLW  38
0237:  MOVWF  5E
.................... 			break; 
0238:  GOTO   25C
.................... 		case 12: 
.................... 			timer_div = RTCC_DIV_256; 
0239:  MOVLW  07
023A:  MOVWF  58
.................... 			timer_count = 8; 
023B:  MOVLW  08
023C:  MOVWF  59
.................... 			ping_count = 60; 
023D:  MOVLW  3C
023E:  MOVWF  5E
.................... 			break; 
023F:  GOTO   25C
.................... 		case 13: 
.................... 			timer_div = RTCC_DIV_256; 
0240:  MOVLW  07
0241:  MOVWF  58
.................... 			timer_count = 9; 
0242:  MOVLW  09
0243:  MOVWF  59
.................... 			ping_count = 54; 
0244:  MOVLW  36
0245:  MOVWF  5E
.................... 			break; 
0246:  GOTO   25C
.................... 		case 14: 
.................... 			timer_div = RTCC_DIV_256; 
0247:  MOVLW  07
0248:  MOVWF  58
.................... 			timer_count = 14; 
0249:  MOVLW  0E
024A:  MOVWF  59
.................... 			ping_count = 53; 
024B:  MOVLW  35
024C:  MOVWF  5E
.................... 			break; 
024D:  GOTO   25C
.................... 		case 15: 
.................... 			timer_div = RTCC_DIV_256; 
024E:  MOVLW  07
024F:  MOVWF  58
.................... 			timer_count = 76; 
0250:  MOVLW  4C
0251:  MOVWF  59
.................... 			ping_count = 57; 
0252:  MOVLW  39
0253:  MOVWF  5E
.................... 			break; 
0254:  GOTO   25C
.................... 		default: 
.................... 			timer_div = DEFAULT_TIMER_DIV; 
0255:  MOVLW  07
0256:  MOVWF  58
.................... 			timer_count = DEFAULT_TIMER_COUNT; 
0257:  MOVLW  4C
0258:  MOVWF  59
.................... 			ping_count = DEFAULT_PING_COUNT; 
0259:  MOVLW  26
025A:  MOVWF  5E
.................... 			break; 
025B:  GOTO   25C
.................... 	} 
....................  
.................... 	// Reset counters 
.................... 	int_count = timer_count; 
025C:  MOVF   59,W
025D:  MOVWF  5A
.................... 	int_ping_count = ping_count; 
025E:  MOVF   5E,W
025F:  MOVWF  5D
....................  
.................... 	//global interrupt 
.................... 	enable_interrupts(GLOBAL); 
0260:  MOVLW  C0
0261:  IORWF  0B,F
0262:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void ping(void) 
.................... { 
....................  
.................... 	putchar('?'); 
....................  
.................... 	return; 
.................... } 
....................  
.................... void pong(void) 
.................... { 
.................... 	// do not do reset! 
.................... 	do_reset = ping_count; 
*
0144:  BCF    03.5
0145:  MOVF   5E,W
0146:  MOVWF  5F
0147:  BSF    03.5
....................  
.................... 	return; 
.................... } 
....................  
.................... void showSplashScreen(void) 
.................... { 
.................... 	int i = 0; 
*
0441:  CLRF   65
.................... 	byte splash[SCREEN] = {0x3F, 0x0, 0x0, 0x5, 0x0, 0x0, 0x1, 0x0, 0xF0, 0x0, 0x0, 0x80, 0x0, 0x3E, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x0, 0x0, 0xF0, 0xF0, 0x0, 0x90, 0x90, 0x0, 0x60, 0x60, 0x0, 0x0, 0x4, 0x4, 0x0, 0x2A, 0x2A, 0x0, 0x2A, 0x2A, 0x0, 0x10, 0x10, 0x0, 0x0, 0x0, 0xBC, 0x0, 0xBC}; 
0442:  MOVLW  3F
0443:  BSF    03.5
0444:  MOVWF  20
0445:  CLRF   21
0446:  CLRF   22
0447:  MOVLW  05
0448:  MOVWF  23
0449:  CLRF   24
044A:  CLRF   25
044B:  MOVLW  01
044C:  MOVWF  26
044D:  CLRF   27
044E:  MOVLW  F0
044F:  MOVWF  28
0450:  CLRF   29
0451:  CLRF   2A
0452:  MOVLW  80
0453:  MOVWF  2B
0454:  CLRF   2C
0455:  MOVLW  3E
0456:  MOVWF  2D
0457:  CLRF   2E
0458:  CLRF   2F
0459:  MOVLW  2A
045A:  MOVWF  30
045B:  CLRF   31
045C:  CLRF   32
045D:  CLRF   33
045E:  CLRF   34
045F:  MOVLW  F0
0460:  MOVWF  35
0461:  MOVWF  36
0462:  CLRF   37
0463:  MOVLW  90
0464:  MOVWF  38
0465:  MOVWF  39
0466:  CLRF   3A
0467:  MOVLW  60
0468:  MOVWF  3B
0469:  MOVWF  3C
046A:  CLRF   3D
046B:  CLRF   3E
046C:  MOVLW  04
046D:  MOVWF  3F
046E:  MOVWF  40
046F:  CLRF   41
0470:  MOVLW  2A
0471:  MOVWF  42
0472:  MOVWF  43
0473:  CLRF   44
0474:  MOVWF  45
0475:  MOVWF  46
0476:  CLRF   47
0477:  MOVLW  10
0478:  MOVWF  48
0479:  MOVWF  49
047A:  CLRF   4A
047B:  CLRF   4B
047C:  CLRF   4C
047D:  MOVLW  BC
047E:  MOVWF  4D
047F:  CLRF   4E
0480:  MOVWF  4F
.................... //	byte splash[SCREEN] = {0x0, 0x0, 0x3F, 0x0, 0x0, 0x5, 0x0, 0xF0, 0x1, 0x0, 0x80, 0x0, 0x3E, 0x3E, 0x0, 0x2A, 0x2A, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF0, 0xF0, 0x0, 0x90, 0x90, 0x0, 0x60, 0x60, 0x4, 0x0, 0x4, 0x2A, 0x0, 0x2A, 0x2A, 0x0, 0x2A, 0x10, 0x0, 0x10, 0x0, 0x0, 0x0, 0xBC, 0x0, 0x0}; 
.................... //	byte splash[SCREEN] = {0x0, 0x3F, 0x0, 0x0, 0x5, 0x0, 0xF0, 0xF1, 0x0, 0x80, 0x80, 0x0, 0x0, 0x3E, 0x3E, 0x0, 0x2A, 0x2A, 0x0, 0x0, 0x0, 0xF0, 0x0, 0xF0, 0x90, 0x0, 0x90, 0x60, 0x0, 0x60, 0x4, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xBC}; 
.................... //	byte splash[SCREEN] = {0x3F, 0x3F, 0x0, 0x5, 0x5, 0x0, 0x1, 0xF1, 0xF0, 0x0, 0x80, 0x80, 0x3E, 0x0, 0x3E, 0x2A, 0x0, 0x2A, 0x0, 0x0, 0x0, 0xF0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0xBC, 0x0}; 
.................... //	byte splash[SCREEN] = {0x0, 0x3F, 0x3F, 0x0, 0x5, 0x5, 0xF0, 0x1, 0xF1, 0x80, 0x0, 0x80, 0x3E, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x60, 0x0, 0x4, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0xBC, 0xBC, 0x0,}; 
.................... //	byte splash[SCREEN] = {0x3F, 0x0, 0x3F, 0x5, 0x0, 0x5, 0xF1, 0x0, 0x1, 0x80, 0x0, 0x0, 0x0, 0x0, 0x3E, 0x0, 0x0, 0x2A, 0x0, 0x0, 0x0, 0x0, 0xF0, 0x0, 0x0, 0x90, 0x0, 0x0, 0x60, 0x0, 0x4, 0x4, 0x0, 0x2A, 0x2A, 0x0, 0x2A, 0x2A, 0x0, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0xBC, 0xBC}; 
....................  
.................... 	for (i = 0; i < SCREEN; i++) 
0481:  BCF    03.5
0482:  CLRF   65
0483:  MOVF   65,W
0484:  SUBLW  2F
0485:  BTFSS  03.0
0486:  GOTO   49C
.................... 		matrix[i] = splash[i]; 
0487:  MOVLW  28
0488:  ADDWF  65,W
0489:  MOVWF  78
048A:  CLRF   7A
048B:  BTFSC  03.0
048C:  INCF   7A,F
048D:  MOVLW  A0
048E:  ADDWF  65,W
048F:  MOVWF  04
0490:  BCF    03.7
0491:  MOVF   00,W
0492:  MOVWF  68
0493:  MOVF   78,W
0494:  MOVWF  04
0495:  BCF    03.7
0496:  BTFSC  7A.0
0497:  BSF    03.7
0498:  MOVF   68,W
0499:  MOVWF  00
049A:  INCF   65,F
049B:  GOTO   483
....................  
.................... 	return; 
.................... } 
049C:  BCF    0A.3
049D:  BCF    0A.4
049E:  GOTO   5D0 (RETURN)

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
